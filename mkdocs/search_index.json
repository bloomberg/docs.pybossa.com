{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to PYBOSSA\ns documentation\n\n\nPYBOSSA is an open source platform for crowd-sourcing online (volunteer)\nassistance to perform tasks that require human cognition, knowledge or\nintelligence (e.g. image classification, transcription, information\nlocation etc).\n\n\nPYBOSSA was inspired by the \nBOSSA\n\ncrowdsourcing engine but is written in python (hence the name!). It can\nbe used for any distributed tasks project but was initially developed to\nhelp scientists and other researchers crowd-source human problem-solving\nskills!\n\n\nThe documentation is organized as follows:", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pybossas-documentation", 
            "text": "PYBOSSA is an open source platform for crowd-sourcing online (volunteer)\nassistance to perform tasks that require human cognition, knowledge or\nintelligence (e.g. image classification, transcription, information\nlocation etc).  PYBOSSA was inspired by the  BOSSA \ncrowdsourcing engine but is written in python (hence the name!). It can\nbe used for any distributed tasks project but was initially developed to\nhelp scientists and other researchers crowd-source human problem-solving\nskills!  The documentation is organized as follows:", 
            "title": "Welcome to PYBOSSA's documentation"
        }, 
        {
            "location": "/admin/", 
            "text": "Administrating PYBOSSA\n\n\nPYBOSSA has three type of users: anonymous, authenticated and\nadministrators. By default the first created user in a PYBOSSA server\nwill become an administrator and manage the site with full privileges.\n\n\nAnd admin user will be able to access the admin page by clicking in the\nuser name and then in the link \nAdmin site\n.\n\n\n\n\nAdministrators can manage different areas of the server:\n\n\n\n\n\n\nBackground jobs\n\n\nFeatured projects\n\n\nCategories\n\n\nAdministrators\n\n\nUsers\n\n\n\n\n\n\n\n\n\n\nAdmins can also modify all projects, and also see which projects are marked\n\n:   as **Draft**: projects that do not have at least one task and a\n    task-presenter to allow other volunteers to participate.\n\n\n\n\n\n\n\nIn the users option, admins will be able\n\n:   to obtain a list of all registered users in the PYBOSSA system, in\n    either json or csv formats.\n\n\n\n\n\n\n\nIn addition, admins can access an extension called [RQ dashboard](https://github.com/nvie/rq-dashboard) from where to\n\n:   monitor all the background jobs and even cancel them or retry failed\n    ones.\n\n\n\n\n\nFeatured Projects\n\n\nIn this section, admins can add/remove projects to the front page of the\nsite.\n\n\n\n\nYou will see a \nAdd to Featured\n link to add a a project to featured\nfront page or a \nRemove from Featured\n to remove it.\n\n\nCategories\n\n\nPYBOSSA provides by default two type of categories:\n\n\n\n\nThinking\n: for projects where the users can use their skills to\n    solve a problem (i.e. image or sound pattern recognition).\n\n\nSensing\n: for projects where the users can help gathering data\n    using tools like \nEpiCollect\n and then\n    analyze the data in the PYBOSSA server.\n\n\n\n\nAdmins can add as many categories as they want, just type then and its\ndescription and click in the green button labeled: Add category.\n\n\n{width=\n100%\n}\n\n\n\n\nYou cannot delete a category if it has one or more projects associated\n\n:   with it. You can however rename the category or delete it when all\n    the associated projects are not linked to the given category.\n\n\n\n\n\nAdministrators\n\n\nIn this section an administrator will be able to add/remove users to the\nadmin role. Basically, you can search by user name -nick name- and add\nthem to the admin group.\n\n\n\n\nAs with the categories section, a green button will allow you to add the\nuser to the admin group, while a red button will be shown to remove the\nuser from the admin group.\n\n\nAudit log\n\n\nWhen a project is created, deleted or updated, the system registers its\nactions in the server. Admins will have access to all the logged actions\nin every project page, in a section named \nAudit log\n.\n\n\n{width=\n100%\n}\n\n\nThe section will let you know the following information:\n\n\n\n\nWhen\n: when the action was taken.\n\n\nAction\n: which action was taken: \ncreated\n, \nupdated\n, or\n    \ndeleted\n.\n\n\nSource\n: if it was done the action via the API or the WEB\n    interface.\n\n\nAttribute\n: which attribute of the project has been changed.\n\n\nWho\n: the user who took the action.\n\n\nOld value\n: the previous value before the action.\n\n\nNew value\n: the new value after the action.\n\n\n\n\n\n\nOnly admins and users marked as *pro* can see the audit log.\n\n\n\n\n\nDashboard\n\n\nThe dashboard allows you to see what\ns going on in your PYBOSSA server.\n\n\n\n\n\n\nThis feature requires PostgreSQL \n= 9.3. Please upgrade as soon as possible your\n\n:   server to have this feature.\n\n\n\n\n\nThe dashboard shows the following information for the last 7 days:\n\n\n\n\nActive users\n: Number of users that have contributed at least 1\n    task_run in the last 7 days.\n\n\nActive anonymous users\n: Number of anonymous users that have\n    contributed at least 1 task_run in the last 7 days.\n\n\nNew projects\n: Projects created in the last 7 days.\n\n\nUpdated projects\n: Updated projects in the last 7 days.\n\n\nUpdated projects\n: Updated projects in the last 7 days.\n\n\nNew users\n: Number of new users registered in the last 7 days.\n\n\nNumber of returning users\n: Number of returning users in the last\n    7 days classified by number of days coming back.\n\n\nRecent activity feed\n: Last events in real time of the server.\n\n\n\n\nThe dashboard is updated every 24 hours via the background jobs. These\njobs are scheduled in the \nlow\n queue.", 
            "title": "Admin"
        }, 
        {
            "location": "/admin/#administrating-pybossa", 
            "text": "PYBOSSA has three type of users: anonymous, authenticated and\nadministrators. By default the first created user in a PYBOSSA server\nwill become an administrator and manage the site with full privileges.  And admin user will be able to access the admin page by clicking in the\nuser name and then in the link  Admin site .   Administrators can manage different areas of the server:    Background jobs  Featured projects  Categories  Administrators  Users     \n\nAdmins can also modify all projects, and also see which projects are marked\n\n:   as **Draft**: projects that do not have at least one task and a\n    task-presenter to allow other volunteers to participate.  \n\nIn the users option, admins will be able\n\n:   to obtain a list of all registered users in the PYBOSSA system, in\n    either json or csv formats.  \n\nIn addition, admins can access an extension called [RQ dashboard](https://github.com/nvie/rq-dashboard) from where to\n\n:   monitor all the background jobs and even cancel them or retry failed\n    ones.", 
            "title": "Administrating PYBOSSA"
        }, 
        {
            "location": "/admin/#featured-projects", 
            "text": "In this section, admins can add/remove projects to the front page of the\nsite.   You will see a  Add to Featured  link to add a a project to featured\nfront page or a  Remove from Featured  to remove it.", 
            "title": "Featured Projects"
        }, 
        {
            "location": "/admin/#categories", 
            "text": "PYBOSSA provides by default two type of categories:   Thinking : for projects where the users can use their skills to\n    solve a problem (i.e. image or sound pattern recognition).  Sensing : for projects where the users can help gathering data\n    using tools like  EpiCollect  and then\n    analyze the data in the PYBOSSA server.   Admins can add as many categories as they want, just type then and its\ndescription and click in the green button labeled: Add category.  {width= 100% }  \n\nYou cannot delete a category if it has one or more projects associated\n\n:   with it. You can however rename the category or delete it when all\n    the associated projects are not linked to the given category.", 
            "title": "Categories"
        }, 
        {
            "location": "/admin/#administrators", 
            "text": "In this section an administrator will be able to add/remove users to the\nadmin role. Basically, you can search by user name -nick name- and add\nthem to the admin group.   As with the categories section, a green button will allow you to add the\nuser to the admin group, while a red button will be shown to remove the\nuser from the admin group.", 
            "title": "Administrators"
        }, 
        {
            "location": "/admin/#audit-log", 
            "text": "When a project is created, deleted or updated, the system registers its\nactions in the server. Admins will have access to all the logged actions\nin every project page, in a section named  Audit log .  {width= 100% }  The section will let you know the following information:   When : when the action was taken.  Action : which action was taken:  created ,  updated , or\n     deleted .  Source : if it was done the action via the API or the WEB\n    interface.  Attribute : which attribute of the project has been changed.  Who : the user who took the action.  Old value : the previous value before the action.  New value : the new value after the action.   \n\nOnly admins and users marked as *pro* can see the audit log.", 
            "title": "Audit log"
        }, 
        {
            "location": "/admin/#dashboard", 
            "text": "The dashboard allows you to see what s going on in your PYBOSSA server.   \n\nThis feature requires PostgreSQL  = 9.3. Please upgrade as soon as possible your\n\n:   server to have this feature.  The dashboard shows the following information for the last 7 days:   Active users : Number of users that have contributed at least 1\n    task_run in the last 7 days.  Active anonymous users : Number of anonymous users that have\n    contributed at least 1 task_run in the last 7 days.  New projects : Projects created in the last 7 days.  Updated projects : Updated projects in the last 7 days.  Updated projects : Updated projects in the last 7 days.  New users : Number of new users registered in the last 7 days.  Number of returning users : Number of returning users in the last\n    7 days classified by number of days coming back.  Recent activity feed : Last events in real time of the server.   The dashboard is updated every 24 hours via the background jobs. These\njobs are scheduled in the  low  queue.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/api/", 
            "text": "RESTful API\n\n\nThe RESTful API is located at:\n\n\nhttp://{pybossa-site-url}/api\n\n\n\nIt expects and returns JSON.\n\n\nSome requests will need an \nAPI-KEY\n to authenticate \n authorize the\noperation. You can get your API-KEY in your \nprofile\n account.\n\n\nThe returned objects will have a \nlinks\n and \nlink\n fields, not\nincluded in the model in order to support \nHypermedia as the Engine of\nApplication State\n (also known as\nHATEOAS), so you can know which are the relations between objects.\n\n\nAll objects will return a field \nlink\n which will be the absolute URL\nfor that specific object within the API. If the object has some parents,\nyou will find the relations in the \nlinks\n list. For example, for a\nTask Run you will get something like this:\n\n\n``` {.sourceCode .javascript}\n{\n\ninfo\n: 65,\n\nuser_id\n: null,\n\nlinks\n: [\n    \n,\n    \n\n],\n\ntask_id\n: 5894,\n\ncreated\n: \n2012-07-07T17:23:45.714184\n,\n\nfinish_time\n: \n2012-07-07T17:23:45.714210\n,\n\ncalibration\n: null,\n\nproject_id\n: 90,\n\nuser_ip\n: \nX.X.X.X\n,\n\nlink\n: \n,\n\ntimeout\n: null,\n\nid\n: 8969\n}\n\n\n\nThe object link will have a tag **rel** equal to **self**, while the\nparent objects will be tagged with **parent**. The **title** field is\nused to specify the type of the object: task, taskrun or project.\n\nProjects will not have a **links** field, because these objects do not\nhave parents.\n\nTasks will have only one parent: the associated project.\n\nTask Runs will have only two parents: the associated task and associated\nproject.\n\nRate Limiting\n-------------\n\nRate Limiting has been enabled for all the API endpoints (since PYBOSSA\nv2.0.1). The rate limiting gives any user, using the IP, **a window of\n15 minutes to do at most 300 requests per endpoint**.\n\nThis new feature includes in the headers the following values to\nthrottle your requests without problems:\n\n-   **X-RateLimit-Limit**: the rate limit ceiling for that given request\n-   **X-RateLimit-Remaining**: the number of requests left for the 15\n    minute window\n-   **X-RateLimit-Reset**: the remaining window before the rate limit\n    resets in UTC epoch seconds\n\nWe recommend to use the Python package **requests** for interacting with\nPYBOSSA, as it is really simple to check those values:\n\n``` {.sourceCode .python}\nimport requests\nimport time\n\nres = requests.get('http://SERVER/api/project')\nif int(res.headers['X-RateLimit-Remaining']) \n 10:\n    time.sleep(300) # Sleep for 5 minutes\nelse:\n    pass # Do your stuff\n\n\n\n\nList\n\n\nList domain objects:\n\n\nGET http://{pybossa-site-url}/api/{domain-object}\n\n\n\nThe API is context aware in the sense that if you\nve an API-KEY and\nyou\nre authenticating the calls, then, the server will send you first\nyour own related data: projects, tasks, and task runs. You can get\naccess to all the projects, tasks, and task runs (the whole data base)\nusing the parameter: \nall=1\n.\n\n\nFor example, if an anonymous user access the generic api endpoints like:\n\n\nGET http://{pybossa-site-url}/api/project\n\n\n\nIt will return all the projects from the DB, ordering them by ID. If you\naccess it like authenticating yourself:\n\n\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\n\n\n\nThen, you will get your own list of projects. In other words, the\nprojects that you own. If you don\nt have a project, but you want to\nexplore the API then you can use the \nall=1\n argument:\n\n\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nall=1\n\n\n\nThis call will return all the projects from the DB ordering by ID.\n\n\nFor example, you can get a list of your Projects like this:\n\n\nGET http://{pybossa-site-url}/api/project\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nall=1\n\n\n\nOr a list of available Categories:\n\n\nGET http://{pybossa-site-url}/api/category\n\n\n\nOr a list of Tasks:\n\n\nGET http://{pybossa-site-url}/api/task\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nall=1\n\n\n\nFor a list of TaskRuns use:\n\n\nGET http://{pybossa-site-url}/api/taskrun\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nall=1\n\n\n\nFinally, you can get a list of users by doing:\n\n\nGET http://{pybossa-site-url}/api/user\n\n\n\nOrder by\n\n\nAny query can be ordered by an attribute of the domain object that you\nare querying. For example you can get a list of tasks ordered by ID:\n\n\nGET http://{pybossa-site-url}/api/task?orderby=id\n\n\n\nIf you want, you can order them in descending order:\n\n\nGET http://{pybossa-site-url}/api/task?orderby=id\ndesc=true\n\n\n\nCheck all the attritbutes that you can use to order by in the \nDomain\nObject section\n.\n\n\n\n\nPlease, notice that in order to keep users privacy, only their locale and\n\n:   nickname will be shared by default. Optionally, users can disable\n    privacy mode in their settings. By doing so, also their fullname and\n    account creation date will be visible for everyone through the API.\n\n\n\n\n\n\n\nBy default PYBOSSA limits the list of items to 20. If you want to get more\n\n:   items, use the keyword **limit=N** with **N** being a number to get\n    that amount. There is a maximum of 100 to the **limit** keyword, so\n    if you try to get more items at once it won't work.\n\n\n\n\n\n\n\n**DEPRECATED (see next Note for a better and faster solution)**\n\n:   You can use the keyword **offset=N** in any **GET** query to skip\n    that many rows before beginning to get rows. If both **offset** and\n    **limit** appear, then **offset** rows are skipped before starting\n    to count the **limit** rows that are returned.\n\n\n\n\n\n\n\nYou can paginate the results of any GET query using the last ID of the\n\n:   domain object that you have received and the parameter:\n    **last\\_id**. For example, to get the next 20 items after the last\n    project ID that you've received you will write the query like this:\n    GET /api/project?last\\_id={{last\\_id}}.\n\n\n\n\n\nRelated data\n\n\nFor Tasks, TaskRuns and Results you can get the associated data using\nthe argument: \nrelated=True\n.\n\n\nThis flag will allow you to get in one call all the TaskRuns and Result\nfor a given task. You can do the same for a TaskRun getting the Task and\nassociated Result, and for a Result getting all the task_runs and\nassociated Task.\n\n\nProjects do not have this feature, as it will be too expensive for the\nAPI.\n\n\nGet\n\n\nGet a specific domain object by id (by default any GET action will\nreturn only 20 objects, you can get more or less objects using the\n\nlimit\n option). Returns domain object.:\n\n\nGET http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\n\n\n\nSome GET actions may require to authenticate \n&\n authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.\n\n\n\n\n\nIf the object is not found you will get a JSON object like this:\n\n\n``` {.sourceCode .js}\n{\n    \nstatus\n: \nfailed\n,\n    \naction\n: \nGET\n,\n    \ntarget\n: \nproject\n,\n    \nexception_msg\n: \n404 Not Found\n,\n    \nstatus_code\n: 404,\n    \nexception_cls\n: \nNotFound\n\n}\n\n\n\nAny other error will return the same object but with the proper status\ncode and error message.\n\nSearch\n------\n\nGet a list of domain objects by its fields. Returns a list of domain\nobjects matching the query:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?domain-object-field=value]\n\nMultiple fields can be used separated by the **\n** symbol:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value\nfield2=value2]\n\nIt is possible to limit the number of returned objects:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value\nlimit=20]\n\nIt is possible to access first level JSON keys within the **info** field\nof Projects, Tasks, Task Runs and Results:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value\ninfo=foo::bar\nlimit=20]\n\nTo search within the first level (nested keys are not supported), you\nhave to use the following format:\n\n    info=key::value\n\nFor adding more keys:\n\n    info=key1::value1|key2::value2|keyN::valueN\n\nThese parameters will be ANDs, so, it will return objects that have\nthose keys with and **and** operator.\n\nFull text search\n----------------\n\nIt is also possible to use full text search queries within those first\nlevel keys (as seen before). For searching like that all you have to do\nis adding the following argument:\n\n    info=key1::value1\nfulltextsearch=1\n\nThat will return every object in the DB that has a key equal to key1 and\ncontains in the value the word value1.\n\nAnother option could be the following:\n\n    info=key1::value1|key2:word1%26word2\nfulltextsearch=1\n\nThis second query will return objects that has the words word1 and\nword2. It's important to escape the \n operator with %26 to use the and\noperator.\n\nWhen you use the fulltextsearch argument, the API will return the\nobjects enriched with the following two fields:\n\n\n -   **headline**: The matched words of the key1::value1 found, with\n\n     \nlt;b\ngt;\nlt;/b\ngt; items to highlight them.\n\n -   **rank**: The ranking returned by the database. Ranking attempts\n\n     to measure how relevant documents are to a particular query, so\n\n     that when there are many matches the most relevant ones can be\n\n     shown first.\n\nHere you have an example of the expected output for an api call like\nthis:\n\n    /api/task?project_id=1\ninfo=name::ipsum%26bravo\nfulltextsearch=1 \n\n``` {.sourceCode .python}\n[\n  {\n    \ninfo\n: {\n      \nurl\n: \nhttps://domain.com/img.png\n,\n      \nname\n: \nLore ipsum delta bravo\n,\n    },\n    \nn_answers\n: 1,\n    \nquorum\n: 0,\n    \nlinks\n: [\n      \nlink rel='parent' title='project' href='http://localhost:5000/api/project/1'/\n\n    ],\n    \ncalibration\n: 0,\n    \nheadline\n: \nLore \nb\nipsum\n/b\n delta \nb\nbravo\n/b\n,\n    \ncreated\n: \n2016-05-10T11:20:45.005725\n,\n    \nrank\n: 0.05,\n    \nstate\n: \ncompleted\n,\n    \nlink\n: \nlink rel='self' title='task' href='http://localhost:5001/api/task/1'/\n,\n    \nproject_id\n: 1,\n    \nid\n: 1,\n    \npriority_0\n: 0\n  },\n]\n\n\n\n\n\n\nWhen you use the fulltextsearch API the results are always sorted by\nrank, showing first the most relevant ones to your query.\n\n\n\n\n\n\n\nWe use PostgreSQL ts\\_rank\\_cd with the following configuration:\nts\\_rank\\_cd(textsearch, query, 4). For more details check the official\ndocumentation of PostgreSQL.\n\n\n\n\n\n\n\nBy default PYBOSSA uses English for the searches. You can customize this\nbehavior using any of the supported languages by PostgreSQL changing the\nsettings\\_local.py config variable: *FULLTEXTSEARCH\\_LANGUAGE* =\n'spanish'.\n\n\n\n\n\n\n\nBy default all GET queries return a maximum of 20 objects unless the\n\n:   **limit** keyword is used to get more: limit=50. However, a maximum\n    amount of 100 objects can be retrieved at once.\n\n\n\n\n\n\n\nIf the search does not find anything, the server will return an empty JSON\n\n:   list \\[\\]\n\n\n\n\n\nCreate\n\n\nCreate a domain object. Returns created domain object.:\n\n\nPOST http://{pybossa-site-url}/api/{domain-object}[?api_key=API-KEY]\n\n\n\n\n\nSome POST actions may require to authenticate \n&\n authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.\n\n\n\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n\n``` {.sourceCode .js}\n{\n    \nstatus\n: \nfailed\n,\n    \naction\n: \nPOST\n,\n    \ntarget\n: \nproject\n,\n    \nexception_msg\n: \ntype object \nProject\n has no attribute \nshort_ame\n,\n    \nstatus_code\n: 415,\n    \nexception_cls\n: \nAttributeError\n\n}\n\n\n\nWhere **target** will refer to a Project, Task or TaskRun object.\n\nUpdate\n------\n\nUpdate a domain object:\n\n    PUT http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\ndiv class=\nadmonition note\n\n\nSome PUT actions may require to authenticate \n authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.\n\n\n/div\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n``` {.sourceCode .js}\n{\n    \nstatus\n: \nfailed\n,\n    \naction\n: \nPUT\n,\n    \ntarget\n: \nproject\n,\n    \nexception_msg\n: \ntype object 'Project' has no attribute 'short_ame'\n,\n    \nstatus_code\n: 415,\n    \nexception_cls\n: \nAttributeError\n\n}\n\n\n\n\nWhere \ntarget\n will refer to a project, Task or TaskRun object.\n\n\nDelete\n\n\nDelete a domain object:\n\n\nDELETE http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\n\n\n\nSome DELETE actions may require to authenticate \n&\n authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.\n\n\n\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n\n``` {.sourceCode .js}\n{\n    \nstatus\n: \nfailed\n,\n    \naction\n: \nDELETE\n,\n    \ntarget\n: \nproject\n,\n    \nexception_msg\n: \ntype object \nProject\n has no attribute \nshort_ame\n,\n    \nstatus_code\n: 415,\n    \nexception_cls\n: \nAttributeError\n\n}\n\n\n\nWhere **target** will refer to a Project, Task or TaskRun object.\n\nFavorites\n---------\n\nAuthenticated users can mark a task as a favorite. This is useful for\nusers when they want to see all the tasks they have done to remember\nthem. For example, a user can mark as a favorite a picture that's\nbeautiful and that he/she has marked as favorited.\n\nFor serving this purpose PYBOSSA provides the following api endpoint:\n\n    GET /api/favorites\n\nIf the user is authenticated it will return all the tasks the user has\nmarked as favorited.\n\nTo add a task as a favorite, a POST should be done with a payload of\n{'task\\_id': Task.id}:\n\n    POST /api/favorites\n\nFor removing one task from the favorites, do a DELETE:\n\n    DEL /api/favorites/task.id\n\nBe sure to have always the user authenticated, otherwise the user will\nnot be able to see it.\n\nRequesting a new task for current user\n--------------------------------------\n\nYou can request a new task for the current user (anonymous or\nauthenticated) by:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask\n\nThis will return a domain Task object in JSON format if there is a task\navailable for the user, otherwise it will return **None**.\n\nYou can also use **limit** to get more than 1 task for the user like\nthis:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?limit=100\n\nThat query will return 100 tasks for the user.\n\n\ndiv class=\nadmonition note\n\n\nThat's the maximum of tasks that a user can get at once. If you pass an argument of 200,\n\n:   PYBOSSA will convert it to 100.\n\n\n/div\n\n\nYou can also, use **offset** to get the next tasks, if you want,\nallowing you to preload:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?offset=1\n\nThat query will return the next task for the user, once it solves the\nprevious task.\n\nBoth arguments, limit and offset can be used together:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?limit=2offset=2\n\nThat will load the next two tasks for the user.\n\nAlso you can request the tasks to be sorted by a Task attribute (like\nID, created, etc.) using the following arguments: **orderby** and\n**desc** to sort them in descending order:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?orderby=priority_0\ndesc=true\n\nThat query will return the tasks order by priority in descending order,\nin other words, it will return first the tasks with higher priority.\n\nRequesting the user's oAuth tokens\n----------------------------------\n\nA user who has registered or signed in with any of the third parties\nsupported by PYBOSSA (currently Twitter, Facebook and Google) can\nrequest his own oAuth tokens by doing:\n\n    GET http://{pybossa-site-url}/api/token?api_key=API-KEY\n\nAdditionally, the user can specify any of the tokens if only its\nretrieval is desired:\n\n    GET http://{pybossa-site-url}/api/token/{provider}?api_key=API-KEY\n\nWhere 'provider' will be any of the third parties supported, i.e.\n'twitter', 'facebook' or 'google'.\n\nUsing your own user database\n----------------------------\n\nSince version v2.3.0 PYBOSSA supports external User IDs. This means that\nyou can easily use your own database of users without having to\nregistering them in the PYBOSSA server. As a benefit, you will be able\nto track your own users within the PYBOSSA server providing a very\nsimple and easy experience for them.\n\nA typical case for this would be for example a native phone app\n(Android, iOS or Windows).\n\nUsually phone apps have their own user base. With this in mind, you can\nadd a crowdsourcing feature to your phone app by just using PYBOSSA in\nthe following way.\n\nFirst, create a project. When you create a project in PYBOSSA the system\nwill create for you a *secret key*. This secret key will be used by your\nphone app to authenticate all the requests and avoid other users to send\ndata to your project via external user API.\n\n\ndiv class=\nadmonition note\n\n\nWe highly recommend using SSL on your server to secure all the process.\nYou can use Let's Encrypt certificates for free. Check their\n[documentation.](https://certbot.eff.org/)\n\n\n/div\n\n\nNow your phone app will have to authenticate to the server to get tasks\nand post task runs.\n\nTo do it, all you have to do is to create an HTTP Request with an\nAuthorization Header like this:\n\n    HEADERS Authorization: project.secret_key\n    GET http://{pybossa-site-url}/api/auth/project/short_name/token\n\nThat request will return a JWT token for you. With that token, you will\nbe able to start requesting tasks for your user base passing again an\nauthorization header. Imagine a user from your database is identified\nlike this: '1xa':\n\n    HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?external_uid=1xa\n\nThat will return a task for the user ID 1xa that belongs to your\ndatabase but not to PYBOSSA. Then, once the user has completed the task\nyou will be able to submit it like this:\n\n    HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n    POST http://{pybossa-site-url}/api/taskrun\n\n\ndiv class=\nadmonition note\n\n\nThe TaskRun object needs to have the external\\_uid field filled with\n1xa.\n\n\n/div\n\n\nAs simple as that!\n\nDisqus Single Sign On (SSO)\n---------------------------\n\nIf the PYBOSSA server is configured with Disqus SSO keys (see disqus),\nthen you can get the authentication parameters in this endpoint:\n*api/disqus/sso*\n\nThe endpoint will return a JSON object with two keys: *api\\_key* and\n*remote\\_auth\\_s3*. Use those values to authenticate the user in Disqus.\nCheck their official [documentation]().\n\nUser api endpoint ----------------\n\nWhile all the other endpoints behave the same, this one is a bit special\nas we deal with private information like emails.\n\n### Anonymous users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Update an existing user via a PUT\n3.  Delete an existing user via a DEL\n\nRead action will only return user name and locale for that user.\n\n### Authenticated users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Update an existing user via a PUT different than the same user\n3.  Delete an existing user via a DEL\n\nRead action will only return user name and locale for that user. If the\nuser access its own page, then all the information will be available to\nhim/her.\n\n### Admin users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Delete an existing user via a DEL\n\nRead action can be done on any user. The admins will have access to the\nUser IDs. This will be helpful in case that you want to give, for\nexample badges, for users when using our webhooks solution. Each user\nhas in the info field a new field named **extra** where that information\n(or anything else) could be stored.\n\nCommand line Example Usage of the API\n-------------------------------------\n\nCreate a Project object:\n\n``` {.sourceCode .bash}\ncurl -X POST -H \nContent-Type:application/json\n -s -d '{\nname\n:\nmyproject\n, \ninfo\n:{\nxyz\n:1}}' 'http://localhost:5000/api/project?api_key=API-KEY'\n\n\n\n\nPYBOSSA endpoints\n\n\nThe following endpoints of PYBOSSA server can be requested setting the\nheader \nContent-Type\n to \napplication/json\n so you can retrieve the data\nusing JavaScript.\n\n\n\n\nIf a key has the value **null** is because, that view is not populating\nthat specific field. However, that value should be retrieved in a\ndifferent one. Please, see all the documentation.\n\n\n\n\n\nAccount index\n\n\nEndpoint: /account/page/\nint:page\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\naccounts\n: this key holds the list of accounts for the given\n    page.\n\n\npagination\n: this key holds the pagination information.\n\n\ntop_users\n: this key holds the top users (including the user if\n    authenticated) with their rank and scores.\n\n\nupdate_feed\n: the latest actions in the server (users created,\n    contributions, new tasks, etc.).\n\n\ntemplate\n: the Jinja2 template that should be rendered in case of\n    text/html.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \naccounts\n: [\n    {\n      \ncreated\n: \n2015-06-10T15:02:38.411497\n,\n      \nfullname\n: \nScifabric\n,\n      \ninfo\n: {\n        \navatar\n: \navatar.png\n,\n        \ncontainer\n: \nuser_234234dd3\n\n      },\n      \nlocale\n: null,\n      \nname\n: \nScifabric\n,\n      \nrank\n: null,\n      \nregistered_ago\n: \n1 year ago\n,\n      \nscore\n: null,\n      \ntask_runs\n: 3\n    },\n  ],\n  \npagination\n: {\n    \nnext\n: true,\n    \npage\n: 3,\n    \nper_page\n: 24,\n    \nprev\n: true,\n    \ntotal\n: 11121\n  },\n  \ntemplate\n: \naccount/index.html\n,\n  \ntitle\n: \nCommunity\n,\n  \ntop_users\n: [\n    {\n      \ncreated\n: \n2014-08-17T18:28:56.738119\n,\n      \nfullname\n: \nBuzz Bot\n,\n      \ninfo\n: {\n        \navatar\n: \navatar.png\n,\n        \ncontainer\n: \nuser_55\n\n      },\n      \nlocale\n: null,\n      \nname\n: \nbuzzbot\n,\n      \nrank\n: 1,\n      \nregistered_ago\n: null,\n      \nscore\n: 54247,\n      \ntask_runs\n: null\n    },\n  ],\n  \ntotal\n: 11121,\n  \nupdate_feed\n: []\n}\n\n\n\n### Account registration\n\n**Endpoint: /account/register**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **form**: The form fields that need to be sent for creating an\n    account. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title of the page.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nconfirm\n: null,\n    \ncsrf\n: \ntoken,\n\n    \nemail_addr\n: null,\n    \nerrors\n: {},\n    \nfullname\n: null,\n    \nname\n: null,\n    \npassword\n: null\n  },\n  \ntemplate\n: \naccount/register.html\n,\n  \ntitle\n: \nRegister\n\n}\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nnext\n: URL that you JavaScript can follow as a redirect. It is\n    not mandatory.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n    \nnext\n:\n/about\n\n}\n\n\n\nIf there's an error in the form fields, you will get them in the\n**form.errors** key:\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nconfirm\n: \ndaniel\n,\n    \ncsrf\n: \ntoken\n,\n    \nemail_addr\n: \ndaniel\n,\n    \nerrors\n: {\n      \nemail_addr\n: [\n        \nInvalid email address.\n\n      ],\n      \nname\n: [\n        \nThe user name is already taken\n\n      ]\n    },\n    \nfullname\n: \ndaniel\n,\n    \nname\n: \ndaniel\n,\n    \npassword\n: \ndaniel\n\n  },\n  \ntemplate\n: \naccount/register.html\n,\n  \ntitle\n: \nRegister\n\n}\n\n\n\n\nIf email confirmation is required for registering you will get this\naccount validation result when all input data is correct. Note: Keep in\nmind that account is not created fully until the user confirmed his\nemail.\n\n\n``` {.sourceCode .python}\n{\n  \nstatus\n: \nsent\n,\n  \ntemplate\n: \naccount/account_validation.html\n,\n  \ntitle\n: \nAccount validation\n\n}\n\n\n\n### Account sign in\n\n**Endpoint: /account/signin**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **auth**: list of supported authentication methods using different\n    social networks like Google, Facebook and Twitter.\n-   **form**: the form fields that need to be sent for signing a user.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nauth\n: {\n    \nfacebook\n: true,\n    \ngoogle\n: true,\n    \ntwitter\n: true\n  },\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \nemail\n: null,\n    \nerrors\n: {},\n    \npassword\n: null\n  },\n  \nnext\n: null,\n  \ntemplate\n: \naccount/signin.html\n,\n  \ntitle\n: \nSign in\n\n}\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nauth\n: {\n    \nfacebook\n: true,\n    \ngoogle\n: true,\n    \ntwitter\n: true\n  },\n  \nflash\n: \nPlease correct the errors\n,\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \nemail\n: \nprueba@prueba.com\n,\n    \nerrors\n: {\n      \npassword\n: [\n        \nYou must provide a password\n\n      ]\n    },\n    \npassword\n: \n\n  },\n  \nnext\n: null,\n  \nstatus\n: \nerror\n,\n  \ntemplate\n: \naccount/signin.html\n,\n  \ntitle\n: \nSign in\n\n}\n\n\n\nIf the login is successful, then, you will get something like this:\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nWelcome back John Doe\n,\n  \nnext\n: \n/\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nAccount sign out\n\n\nEndpoint: /account/signout\n\n\nAllowed methods\n: \nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nnext\n: suggested redirection after the sign out.\n\n\nmessage\n: message displaying success for sign out.\n\n\n\n\nAccount recover password\n\n\nEndpoint: /account/forgot-password\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for creating an\n    account. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \ncsrf\n: \ntoken,\n\n    \nemail_addr\n: null\n  },\n  \ntemplate\n: \naccount/password_forgot.html\n\n}\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **form**: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: [\n    \nWe don't have this email in our records. You may have signed up with a different email or used Twitter, Facebook, or Google to sign-in\n\n  ],\n  \nform\n: {\n    \ncsrf\n: \n1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31\n,\n    \nemail_addr\n: \nalgo@algo.com\n,\n    \nerrors\n: {}\n  },\n  \ntemplate\n: \n/account/password_forgot.html\n\n}\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\n\nform.errors\n key:\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nSomething went wrong, please correct the errors on the form\n,\n  \nform\n: {\n    \ncsrf\n: \n1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4\n,\n    \nemail_addr\n: \nalgoom\n,\n    \nerrors\n: {\n      \nemail_addr\n: [\n        \nInvalid email address.\n\n      ]\n    }\n  },\n  \ntemplate\n: \n/account/password_forgot.html\n\n}\n\n\n\n### Account name\n\n\\*\\*Endpoint: /account/\nlt;name\ngt;\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **projects\\_contrib**: a list of projects the user has contributed\n    too.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n-   **user**: User information, including fullname, rank etc.\n\n**Example output**\n\nIf you are not logged in or requesting details of another user you will\nonly get public viewable information. If you are logged in you will also\nget private information in the user field. Sample output of public\ninformation:\n\n``` {.sourceCode .python}\n{\n    \nprojects_contrib\n: [\n        {\n            \ndescription\n: \nthis is a project\n,\n            \ninfo\n: {\n                \ncontainer\n: \n123\n,\n                \nthumbnail\n: \nthumbnailx\n\n            },\n            \nn_tasks\n: 4,\n            \nn_volunteers\n: 0,\n            \nname\n: \ntest12334\n,\n            \noverall_progress\n: 0,\n            \nshort_name\n: \ntest12334\n\n        }\n    ],\n    \nprojects_created\n: [\n        {\n            \ndescription\n: \nYoutube 1\n,\n            \ninfo\n: {\n                \ncontainer\n: \n345\n,\n                \nthumbnail\n: \nthumbnaily\n\n            },\n            \nn_tasks\n: 15,\n            \nn_volunteers\n: 0,\n            \nname\n: \nJohnDoe Youtube 1\n,\n            \noverall_progress\n: 0,\n            \nshort_name\n: \njohnyoutube1\n\n        },\n    ]\n    \ntemplate\n: \n/account/public_profile.html\n,\n    \ntitle\n: \nJohn \nmiddot; User Profile\n,\n    \nuser\n: {\n        \nfullname\n: \nJoen Doe\n,\n        \ninfo\n: {\n            \ncontainer\n: \nuser_4953\n\n        },\n        \nn_answers\n: 56,\n        \nname\n: \nJohnDoe\n,\n        \nrank\n: 1813,\n        \nscore\n: 56\n    }\n}\n\n\n\n\nExample of logged in user:\n\n\n``` {.sourceCode .python}\n{\n    \n\n    \nuser\n: {\n        \napi_key\n: \naa3ee485-896d-488a-83f7-88a29bf45171\n,\n        \nconfirmation_email_sent\n: false,\n        \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n        \nemail_addr\n: \njohndoe@johndoe.com\n,\n        \nfacebook_user_id\n: null,\n        \nfullname\n: \nJohn Doe\n,\n        \ngoogle_user_id\n: null,\n        \nid\n: 4953,\n        \ninfo\n: {\n            \ncontainer\n: \nuser_4953\n\n        },\n        \nn_answers\n: 56,\n        \nname\n: \nJohnDoe\n,\n        \nrank\n: 1813,\n        \nregistered_ago\n: \n2 years ago\n,\n        \nscore\n: 56,\n        \ntotal\n: 10046,\n        \ntwitter_user_id\n: null,\n        \nvalid_email\n: true\n    }\n}\n\n\n\n### Account profile\n\n\\*\\*Endpoint: /account/profile\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIf logged in you will get the same information as on\n/account/\nlt;name\ngt; (see above). If you are not logged in you will get\nthe following example output\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nnext\n: \n/account/signin\n,\n  \nstatus\n: \nnot_signed_in\n\n}\n\n\n\n\nAccount projects\n\n\nEndpoint: /account/\nname\n/projects\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nThe user needs to be logged in. It returns a JSON object with the\nfollowing information:\n\n\n\n\nprojects_draft\n: a list of draft projects of the user.\n\n\nprojects_published\n: a list of published projects of the user.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nprojects_draft\n: [\n    {\n      \ndescription\n: \nThis should be the Youtube Project\n,\n      \nid\n: 3169,\n      \ninfo\n: {\n        \ntask_presenter\n: \n\n      },\n      \nn_tasks\n: 0,\n      \nn_volunteers\n: 0,\n      \nname\n: \nYoutube_Test1\n,\n      \noverall_progress\n: 0,\n      \nowner_id\n: 4953,\n      \nshort_name\n: \nyoutube_test1\n\n    },\n    \n\n  ],\n  \nprojects_published\n: [\n    {\n      \ndescription\n: \nYoutube 1\n,\n      \nid\n: 3206,\n      \ninfo\n: {\n        \nresults\n: \n,\n        \ntask_presenter\n: \n..\n\n        \ntutorial\n: \n\n      },\n      \nn_tasks\n: 15,\n      \nn_volunteers\n: 0,\n      \nname\n: \nYoutube 1\n,\n      \noverall_progress\n: 0,\n      \nowner_id\n: 4953,\n      \nshort_name\n: \nyoutube1\n\n    },\n    \n\n  ],\n  \ntemplate\n: \naccount/projects.html\n,\n  \ntitle\n: \nProjects\n\n}\n\n\n\n### Account update profile\n\n**Endpoint: /account/\nlt;name\ngt;/update**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **form**: the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n-   **password\\_form**: the form fields that need to be sent for\n    updating the account's password. It contains the csrf token for\n    validating the post, as well as an errors field in case that\n    something is wrong.\n-   **upload\\_form**: the form fields that need to be sent for updating\n    the account's avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: null,\n  \nform\n: {\n    \nckan_api\n: null,\n    \ncsrf\n: \ntoken\n,\n    \nemail_addr\n: \nemail@emai.com\n,\n    \nerrors\n: {},\n    \nfullname\n: \nJohn Doe\n,\n    \nid\n: 0,\n    \nlocale\n: \nen\n,\n    \nname\n: \njohndoe\n,\n    \nprivacy_mode\n: true,\n    \nsubscribed\n: true\n  },\n  \npassword_form\n: {\n    \nconfirm\n: null,\n    \ncsrf\n: \ntoken\n,\n    \ncurrent_password\n: null,\n    \nerrors\n: {},\n    \nnew_password\n: null\n  },\n  \nshow_passwd_form\n: true,\n  \ntemplate\n: \n/account/update.html\n,\n  \ntitle\n: \nUpdate your profile: John Doe\n,\n  \nupload_form\n: {\n    \navatar\n: null,\n    \ncsrf\n: \ntoken\n,\n    \nerrors\n: {},\n    \nid\n: null,\n    \nx1\n: 0,\n    \nx2\n: 0,\n    \ny1\n: 0,\n    \ny2\n: 0\n  }\n}\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nAs this endpoint supports \nthree\n different forms, you must specify\nwhich form are you targetting adding an extra key: \nbtn\n. The options\nfor this key are:\n\n\n\n\nProfile\n: to update the \nform\n. \nUpload\n: to update the\n    \nupload_form\n. \nPassword\n: to update the \npassword_form\n.\n    \nExternal\n: to update the \nform\n but only the external services.\n\n\n\n\n\n\nBe sure to respect the Uppercase in the first letter, otherwise it will\nfail.\n\n\n\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nYour profile has been updated!\n,\n  \nnext\n: \n/account/pruebaadfadfa/update\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\nIf there's an error in the form fields, you will get them in the\n**form.errors** key:\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nPlease correct the errors\n,\n  \nform\n: {\n    \nckan_api\n: null,\n    \ncsrf\n: \ntoken\n,\n    \nemail_addr\n: \npruebaprueba.com\n,\n    \nerrors\n: {\n      \nemail_addr\n: [\n        \nInvalid email address.\n\n      ]\n    },\n    \nfullname\n: \nprueba de json\n,\n    \nid\n: 0,\n    \nlocale\n: \nes\n,\n    \nname\n: \npruebaadfadfa\n,\n    \nprivacy_mode\n: true,\n    \nsubscribed\n: true\n  },\n  \npassword_form\n: {\n    \nconfirm\n: \n,\n    \ncsrf\n: \ntoken\n,\n    \ncurrent_password\n: \n,\n    \nerrors\n: {},\n    \nnew_password\n: \n\n  },\n  \nshow_passwd_form\n: true,\n  \ntemplate\n: \n/account/update.html\n,\n  \ntitle\n: \nUpdate your profile: John Doe\n,\n  \nupload_form\n: {\n    \navatar\n: \n,\n    \ncsrf\n: \ntoken\n,\n    \nerrors\n: {},\n    \nid\n: 0,\n    \nx1\n: 0,\n    \nx2\n: 0,\n    \ny1\n: 0,\n    \ny2\n: 0\n  }\n}\n\n\n\n\n\n\nFor updating the avatar is very important to not set the *Content-Type*. If you\n\n:   are using jQuery, set it to False, so the file is handled properly.\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n(x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop.\n\n\n\n\n\nAccount reset password\n\n\nEndpoint: /account/reset-password\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nRequired arguments\n: \nkey\n a string required to validate the link for\nupdating the password of the user. This key is sent to the user via\nemail after requesting to reset the password.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nconfirm\n: null,\n    \ncsrf\n: \ntoken\n,\n    \ncurrent_password\n: null,\n    \nerrors\n: {},\n    \nnew_password\n: null\n  },\n  \ntemplate\n: \n/account/password_reset.html\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **status**: A status message, indicating if something went wrong.\n-   **next**: Suggested URL to redirect the user.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    u'status': u'success',\n    u'flash': u'You reset your password successfully!',\n    u'next': u'/'\n}\n\n\n\n\nAccount reset API Key\n\n\nEndpoint: /account/\nuser\n/resetapikey\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\ncsrf\n: The CSRF token for validating the post.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n    \nform\n:\n        {\n            \ncsrf\n: \ntoken\n,\n        }\n}\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **status**: A status message, indicating if something went wrong.\n-   **next**: Suggested URL to redirect the user.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    u'status': u'success',\n    u'flash': u'New API-KEY generated',\n    u'next': u'/account/\nuser\n'\n}\n\n\n\n\nAccount subscribe to newsletter\n\n\n**Endpoint: /account/newsletter\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\ntemplate\n: The template that Jinja2 will render.\n\n\ntitle\n: The title of the endpoint.\n\n\nnext\n: The next URL.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n    \ntemplate\n: \naccount/newsletter.html\n,\n    \ntitle\n: \nSubscribe to our Newsletter\n,\n    \nnext\n: \n/\n\n}\n\n\n\nIf you want to subscribe a user, then you have to call the same endpoint\nwith the following argument: *subscribe=true*\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    \nflash\n: \nYou are subscribed to our newsletter\n,\n    \nstatus\n: \nsuccess\n,\n    \nnext\n: \n/\n\n}\n\n\n\n\nAccount confirm email\n\n\nEndpoint: /account/confirm-email\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIf account validation is enabled, then, using this endpoint the user\nwill receive an email to validate its account. It returns a JSON object\nwith the following information:\n\n\n\n\nflash\n: A message stating that an email has been sent.\n\n\nstatus\n: The status of the call.\n\n\nnext\n: The next url.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n    \nflash\n: \nAne email has been sent to validate your e-mail address.\n,\n    \nstatus\n: \ninfo\n,\n    \nnext\n: \n/account/\n/\n\n}\n\n\n\n### Home\n\n**Endpoint: /**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **top\\_projects**: A list of the most active projects.\n-   **categories\\_projects**: A dictionary with all the published\n    categories and its associated projects.\n-   **categories**: All the available categories.\n-   **template**: Jinja2 template.\n-   **top\\_users**: List of top contributors.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \ncategories\n: [\n    {\n      \ncreated\n: null,\n      \ndescription\n: null,\n      \nid\n: null,\n      \nname\n: \nFeatured\n,\n      \nshort_name\n: \nfeatured\n\n    },\n    {\n      \ndescription\n: \nEconomic projects\n,\n      \nid\n: 6,\n      \nname\n: \nEconomics\n,\n      \nshort_name\n: \neconomics\n\n    },\n  ],\n  \ncategories_projects\n: {\n    \neconomics\n: [\n      {\n        \ndescription\n: \nDescription\n,\n        \ninfo\n: {\n          \ncontainer\n: \nuser\n,\n          \nthumbnail\n: \n415602833.png\n\n        },\n        \nn_tasks\n: 18,\n        \nn_volunteers\n: 26,\n        \nname\n: \nMan made objects identity\n,\n        \noverall_progress\n: 0,\n        \nshort_name\n: \nmanmadeobjectsidentity\n\n      },\n    ],\n  },\n  \ntemplate\n: \n/home/index.html\n,\n  \ntop_projects\n: [\n    {\n      \ndescription\n: \nImage pattern recognition\n,\n      \ninfo\n: {\n        \ncontainer\n: \nuser\n,\n        \nthumbnail\n: \n772569.58.png\n\n      },\n      \nn_tasks\n: null,\n      \nn_volunteers\n: 17499,\n      \nname\n: \nName\n,\n      \noverall_progress\n: null,\n      \nshort_name\n: \nname\n\n    },\n  ],\n  \ntop_users\n: [\n    {\n      \ncreated\n: \n2014-08-17T18:28:56.738119\n,\n      \nfullname\n: \nJohn Doe\n,\n      \ninfo\n: {\n        \navatar\n: \n1410771tar.png\n,\n        \ncontainer\n: \n05\n\n      },\n      \nn_answers\n: null,\n      \nname\n: \njohndoe\n,\n      \nrank\n: 1,\n      \nregistered_ago\n: null,\n      \nscore\n: 54247\n    },\n  ]\n}\n\n\n\n\nProject shortname\n\n\nEndpoint: /project/\nshort_name\n/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project information and owner information.\n\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor logged in user JohnDoe:\n\n\n``` {.sourceCode .python}\n{\n  \nlast_activity\n: \n2015-01-21T12:01:41.209270\n,\n  \nn_completed_tasks\n: 0,\n  \nn_task_runs\n: 3,\n  \nn_tasks\n: 8,\n  \nn_volunteers\n: 1,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \napi_key\n: \nakjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1\n,\n    \nconfirmation_email_sent\n: false,\n    \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n    \nemail_addr\n: \njohndoe@johndoe.com\n,\n    \nfacebook_user_id\n: null,\n    \nfullname\n: \nJohn Doe\n,\n    \ngoogle_user_id\n: null,\n    \nid\n: 1234,\n    \ninfo\n: {\n      \ncontainer\n: \nuser_1234\n\n    },\n    \nn_answers\n: 56,\n    \nname\n: \nJohnDoe\n,\n    \nrank\n: 1813,\n    \nregistered_ago\n: \n2 years ago\n,\n    \nscore\n: 56,\n    \ntotal\n: 11093,\n    \ntwitter_user_id\n: null,\n    \nvalid_email\n: true\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: true,\n    \nautoimporter_enabled\n: true,\n    \nwebhooks_enabled\n: true\n  },\n  \nproject\n: {\n    \nallow_anonymous_contributors\n: true,\n    \ncategory_id\n: 2,\n    \ncontacted\n: true,\n    \ncontrib_button\n: \ncan_contribute\n,\n    \ncreated\n: \n2015-01-21T11:59:36.519541\n,\n    \ndescription\n: \nflickr678\n,\n    \nfeatured\n: false,\n    \nid\n: 4567,\n    \ninfo\n: {\n      \ntask_presenter\n: \n .... \n\n    },\n    \nlong_description\n: \nflickr678\\r\\n\n,\n    \nn_blogposts\n: 0,\n    \nn_results\n: 0,\n    \nname\n: \nflickr678\n,\n    \nowner_id\n: 9876,\n    \npublished\n: true,\n    \nsecret_key\n: \nveryverysecretkey\n,\n    \nshort_name\n: \nflickr678\n,\n    \nupdated\n: \n2016-04-13T08:07:38.897626\n,\n    \nwebhook\n: null\n  },\n  \ntemplate\n: \n/projects/project.html\n,\n  \ntitle\n: \nProject: flickr678\n\n}\n\n\n\nAnonymous and other user output:\n\n``` {.sourceCode .python}\n{\n  \nlast_activity\n: \n2015-01-21T12:01:41.209270\n,\n  \nn_completed_tasks\n: 0,\n  \nn_task_runs\n: 3,\n  \nn_tasks\n: 8,\n  \nn_volunteers\n: 1,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n    \nfullname\n: \nJohn Doe\n,\n    \ninfo\n: {\n      \navatar\n: null,\n      \ncontainer\n: \nuser_4953\n\n    },\n    \nn_answers\n: 56,\n    \nname\n: \nJohnDoe\n,\n    \nrank\n: 1813,\n    \nregistered_ago\n: \n2 years ago\n,\n    \nscore\n: 56\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \ncreated\n: \n2015-01-21T11:59:36.519541\n,\n    \ndescription\n: \nflickr678\n,\n    \nid\n: 4567,\n    \ninfo\n: {\n      \ncontainer\n: null,\n      \nthumbnail\n: null\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nflickr678\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \nflickr678\n,\n    \nupdated\n: \n2016-04-13T08:07:38.897626\n\n  },\n  \ntemplate\n: \n/projects/project.html\n,\n  \ntitle\n: \nProject: flickr678\n\n}\n\n\n\n\nProject settings\n\n\nEndpoint: /project/\nshort_name\n/settings\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project information and owner information. Only works for\nauthenticated users for their own projects (or admins). Anonymous users\nwill get a 302 to login page. Logged in users with access rights will\nget a 403 when it\ns not their own project.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nThe example output matches \n/project/\nshort_name\n/\n\n\nProject results\n\n\nEndpoint: /project/\nshort_name\n/results\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows information about a project results template. If the logged in\nuser is the owner of the project you will get more detailed owner\ninformation and project information.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_results\n: Number of results\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template for results\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor anonymous user or when you are not the project owner:\n\n\n``` {.sourceCode .python}\n{\n  \nlast_activity\n: \n2015-01-21T12:01:41.209270\n,\n  \nn_completed_tasks\n: 0,\n  \nn_results\n: 0,\n  \nn_task_runs\n: 3,\n  \nn_tasks\n: 8,\n  \nn_volunteers\n: 1,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n    \nfullname\n: \nJohn\n,\n    \ninfo\n: {\n      \navatar\n: null,\n      \ncontainer\n: \nuser_4953\n\n    },\n    \nn_answers\n: 56,\n    \nname\n: \nJohnDoe\n,\n    \nrank\n: 1813,\n    \nregistered_ago\n: \n2 years ago\n,\n    \nscore\n: 56\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \ncreated\n: \n2015-01-21T11:59:36.519541\n,\n    \ndescription\n: \nflickr678\n,\n    \nfeatured\n: false,\n    \nid\n: 2417,\n    \ninfo\n: {\n      \ncontainer\n: null,\n      \nthumbnail\n: null\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nflickr678\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \nflickr678\n,\n    \nupdated\n: \n2016-04-13T08:07:38.897626\n\n  },\n  \ntemplate\n: \n/projects/results.html\n,\n  \ntitle\n: \nProject: flickr678\n\n}\n\n\n\n### Project stats\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/stats**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows project statistics if available.\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n-   **avg\\_contrib\\_time**: Average contribution time (NOT existing when\n    no statistics there!).\n-   **projectStats**: Project statistics (NOT existing when no\n    statistics there!).\n-   **userStats**: User statistics (NOT existing when no statistics\n    there!).\n-   **n\\_completed\\_tasks**: Number of completed tasks.\n-   **n\\_tasks**: Number of tasks.\n-   **n\\_volunteers**: Number of volunteers.\n-   **overall\\_progress**: Progress (0..100).\n-   **owner**: Owner user information\n-   **pro\\_features**: Enabled pro features for the project.\n-   **project**: Project information\n-   **template**: Jinja2 template.\n-   **title**: the title for the endpoint.\n\n**Example output** Statistics are existing in this output:\n\n``` {.sourceCode .python}\n{\n  \navg_contrib_time\n: 0,\n  \nn_completed_tasks\n: 2,\n  \nn_tasks\n: 2,\n  \nn_volunteers\n: 59,\n  \noverall_progress\n: 100,\n  \nowner\n: {\n    \ncreated\n: \n2012-06-06T06:27:18.760254\n,\n    \nfullname\n: \nDaniel Lombra\u00f1a Gonz\u00e1lez\n,\n    \ninfo\n: {\n      \navatar\n: \n1422360933.8_avatar.png\n,\n      \ncontainer\n: \nuser_3\n\n    },\n    \nn_answers\n: 2998,\n    \nname\n: \nteleyinex\n,\n    \nrank\n: 66,\n    \nregistered_ago\n: \n4 years ago\n,\n    \nscore\n: 2998\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nbetter_stats_enabled\n: true,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \ncreated\n: \n2013-01-10T19:58:55.454015\n,\n    \ndescription\n: \nFacial expressions that convey feelings\n,\n    \nfeatured\n: true,\n    \nid\n: 253,\n    \ninfo\n: {\n      \ncontainer\n: \nuser_3\n,\n      \nthumbnail\n: \nproject_253_thumbnail_1460620575.png\n\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nThe Face We Make\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \nthefacewemake\n,\n    \nupdated\n: \n2016-04-14T07:56:16.114006\n\n  },\n  \nprojectStats\n: \n{\\\nuserAuthStats\\\n: {\\\ntop5\\\n: [], \\\nvalues\\\n: [], \\\nlabel\\\n: \\\nAuthenticated Users\\\n} ...\n,\n  \ntemplate\n: \n/projects/stats.html\n,\n  \ntitle\n: \nProject: The Face We Make \nmiddot; Statistics\n,\n  \nuserStats\n: {\n    \nanonymous\n: {\n      \npct_taskruns\n: 0,\n      \ntaskruns\n: 0,\n      \ntop5\n: [],\n      \nusers\n: 0\n    },\n    \nauthenticated\n: {\n      \npct_taskruns\n: 0,\n      \ntaskruns\n: 0,\n      \ntop5\n: [],\n      \nusers\n: 0\n    },\n    \ngeo\n: false\n  }\n}\n\n\n\n\nProject tasks\n\n\nEndpoint: /project/\nshort_name\n/tasks\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project tasks.\n\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n\n\n\nautoimporter_enabled\n: If autoimporter is enabled.\n\n\nlast_activity\n: Last activity.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Progress (0..100).\n\n\nowner\n: Owner user information\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information.\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor another project where you are not the owner:\n\n\n``` {.sourceCode .python}\n{\n  \nautoimporter_enabled\n: true,\n  \nlast_activity\n: \n2017-03-02T21:00:33.627277\n,\n  \nn_completed_tasks\n: 184839,\n  \nn_task_runs\n: 1282945,\n  \nn_tasks\n: 193090,\n  \nn_volunteers\n: 20016,\n  \noverall_progress\n: 95,\n  \nowner\n: {\n    \ncreated\n: \n2014-02-13T15:28:08.420187\n,\n    \nfullname\n: \nJohn Smith\n,\n    \ninfo\n: {\n      \navatar\n: \n1410769844.15_avatar.png\n,\n      \ncontainer\n: \nuser_3927\n,\n      \nextra\n: null\n    },\n    \nlocale\n: null,\n    \nn_answers\n: 43565,\n    \nname\n: \npmisson\n,\n    \nrank\n: 3,\n    \nregistered_ago\n: \n3 years ago\n,\n    \nscore\n: 43565\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: true,\n    \nautoimporter_enabled\n: true,\n    \nwebhooks_enabled\n: true\n  },\n  \nproject\n: {\n    \ncreated\n: \n2014-02-22T15:09:23.691811\n,\n    \ndescription\n: \nImage pattern recognition\n,\n    \nfeatured\n: true,\n    \nid\n: 1377,\n    \ninfo\n: {\n      \ncontainer\n: \nuser_3927\n,\n      \nthumbnail\n: \napp_1377_thumbnail_1410772569.58.png\n\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nCool Project\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \ncoolproject\n,\n    \nupdated\n: \n2017-03-02T21:00:33.965587\n\n  },\n  \ntemplate\n: \n/projects/tasks.html\n,\n  \ntitle\n: \nProject: Cool project\n\n}\n\n\n\n### Project task id\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/task/\nlt;int:task\\_id\ngt;**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows a project task based on id.\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n-   **owner**: Owner user information\n-   **project**: Project information.\n-   **template**: Jinja2 template of the task HTML template.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\nfor another project where you are not the owner:\n\n``` {.sourceCode .python}\n{\n  \nowner\n: {\n    \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n    \nfullname\n: \nJohn Doe\n,\n    \ninfo\n: {\n      \navatar\n: \n1458638093.9_avatar.png\n,\n      \ncontainer\n: \nuser_4953\n,\n      \nextra\n: null\n    },\n    \nlocale\n: null,\n    \nn_answers\n: 257,\n    \nname\n: \nJohnD\n,\n    \nrank\n: 840,\n    \nregistered_ago\n: \n2 years ago\n,\n    \nscore\n: 257\n  },\n  \nproject\n: {\n    \ncreated\n: \n2015-01-21T11:59:36.519541\n,\n    \ndescription\n: \nflickr678\n,\n    \nfeatured\n: false,\n    \nid\n: 2417,\n    \ninfo\n: {\n      \ncontainer\n: null,\n      \nthumbnail\n: null\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nflickr678\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \nflickr678\n,\n    \nupdated\n: \n2017-03-22T13:03:55.496660\n\n  },\n  \ntemplate\n: \n/projects/presenter.html\n,\n  \ntitle\n: \nProject: flickr678 \nmiddot; Contribute\n\n}\n\n\n\n\nLeaderboard\n\n\nEndpoint: /leaderboard/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows you the top 20 contributors rank in a sorted leaderboard. If you\nare logged in you will also get the rank of yourself even when you are\nnot visible on the top public leaderboard.\n\n\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\ntop_users\n: Sorted list of leaderboard top users.\n\n\n\n\nExample output\n\n\nfor logged in user JohnDoe (normally not visible in public leaderboard):\n\n\n``` {.sourceCode .python}\n{\n    \ntemplate\n: \n/stats/index.html\n,\n    \ntitle\n: \nCommunity Leaderboard\n,\n    \ntop_users\n: [\n        {\n            \ncreated\n: \n2014-08-17T18:28:56.738119\n,\n            \nfullname\n: \nBuzz Bot\n,\n            \ninfo\n: {\n                \navatar\n: \n1410771548.09_avatar.png\n,\n                \ncontainer\n: \nuser_5305\n\n            },\n            \nn_answers\n: null,\n            \nname\n: \nbuzzbot\n,\n            \nrank\n: 1,\n            \nregistered_ago\n: null,\n            \nscore\n: 54259\n        },\n        \n ,\n        {\n            \ncreated\n: \n2014-08-11T08:59:32.079599\n,\n            \nfullname\n: \nJohnDoe\n,\n            \ninfo\n: {\n                \navatar\n: null,\n                \ncontainer\n: \nuser_4953\n\n            },\n            \nn_answers\n: null,\n            \nname\n: \nJohnDoe\n,\n            \nrank\n: 1813,\n            \nregistered_ago\n: null,\n            \nscore\n: 56\n        }\n    ]\n}\n\n\n\n### Announcements\n\n**Endpoint: /announcements/**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows you PYBOSSA wide announcements\n\n-   **announcements**: Announcements\n-   **template**: the rendered Announcements tamplate (currently empty)\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    \nannouncements\n: [\n        {\n            \nbody\n: \ntest123\n,\n            \ncreated\n: \n2017-05-31T15:23:44.858735\n,\n            \nid\n: 5,\n            \ntitle\n: \ntitle123\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-05-31T15:23:28.477516\n,\n            \nid\n: 4,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-06-01T23:42:45.042010\n,\n            \nid\n: 7,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-06-01T23:45:11.612801\n,\n            \nid\n: 8,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        }\n    ],\n    \ntemplate\n: \n\n}\n\n\n\n\nAdmin announcement\n\n\nEndpoint: /admin/announcement\n\n\nGET\n\n\nShows you PYBOSSA wide announcements\n\n\n\n\nannouncements\n: Announcements\n\n\ncsrf\n: csrf token\n\n\ntemplate\n: the rendered Announcements tamplate (currently empty)\n\n\ntitle\n: title of rendered endpoint\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n    \nannouncements\n: [\n        {\n            \nbody\n: \ntest123\n,\n            \ncreated\n: \n2017-05-31T15:23:44.858735\n,\n            \nid\n: 5,\n            \ntitle\n: \ntitle123\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-05-31T15:23:28.477516\n,\n            \nid\n: 4,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-06-01T23:42:45.042010\n,\n            \nid\n: 7,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        },\n        {\n            \nbody\n: \nnew body\n,\n            \ncreated\n: \n2017-06-01T23:45:11.612801\n,\n            \nid\n: 8,\n            \ntitle\n: \nblogpost title\n,\n            \nuser_id\n: 4953\n        }\n    ],\n  \ncsrf\n: \n1496394861.12##1bfcbb386bae5d1625c023a23b08865b4176579d\n,\n  \ntemplate\n: \n,\n  \ntitle\n: \nManage global Announcements\n\n}\n\n\n\n### Admin announcement new\n\n**Endpoint: /admin/announcement/new**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nCreates a new PYBOSSA wide announcement\n\n-   **form**: form input\n-   **template**: the rendered Announcements tamplate (currently empty)\n-   **title**: title of rendered endpoint\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nbody\n: null,\n    \ncsrf\n: \n1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a\n,\n    \nerrors\n: {},\n    \ntitle\n: null\n  },\n  \ntemplate\n: \n,\n  \ntitle\n: \nWrite a new post\n\n}\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n. On success you will\nget a 200 http code and following output:\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \n Annnouncement created!\n,\n  \nnext\n: \n/admin/announcement\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n### Admin announcement update\n\n**Endpoint: /admin/announcement/\nlt;id\ngt;/update**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nUpdates a PYBOSSA announcement\n\n-   **form**: form input\n-   **template**: the rendered Announcements tamplate (currently empty)\n-   **title**: title of rendered endpoint\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nbody\n: \ntest6\n,\n    \ncsrf\n: \n1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6\n,\n    \nerrors\n: {},\n    \nid\n: 4,\n    \ntitle\n: \ntest6\n\n  },\n  \ntemplate\n: \n,\n  \ntitle\n: \nEdit a post\n\n}\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n. On success you will\nget a 200 http code and following output:\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \n Announcement updated!\n,\n  \nnext\n: \n/admin/announcement\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n### Admin announcement delete\n\n**Endpoint: /admin/announcement/\nlt;id\ngt;/delete**\n\n*Allowed methods*: **POST**\n\nDeletes a PYBOSSA announcement\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n. You can get the token\nfrom /admin/announcement On success you will get a 200 http code and\nfollowing output:\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \ni class=\\\nicon-ok\\\n/i\n Announcement deleted!\n,\n  \nnext\n: \n/admin/announcement\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nAdmin users\n\n\nEndpoint: /admin/users\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: A form for searching for users.\n\n\nfound\n: A list of found users according to a search.\n\n\ntemplate\n: Jinja2 template.\n\n\nusers\n: List of admin users.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \nerrors\n: {},\n    \nuser\n: null\n  },\n  \nfound\n: [],\n  \ntemplate\n: \n/admin/users.html\n,\n  \ntitle\n: \nManage Admin Users\n,\n  \nusers\n: [\n    {\n      \nadmin\n: true,\n      \napi_key\n: \nkey\n,\n      \ncategory\n: null,\n      \nckan_api\n: null,\n      \nconfirmation_email_sent\n: false,\n      \ncreated\n: \ndate\n,\n      \nemail_addr\n: \nemail\n,\n      \nfacebook_user_id\n: null,\n      \nflags\n: null,\n      \nfullname\n: \nJohn Doe\n,\n      \ngoogle_user_id\n: null,\n      \nid\n: 1,\n      \ninfo\n: {\n        \navatar\n: \navatar.png\n,\n        \ncontainer\n: \nuser_1\n\n      },\n      \nlocale\n: \nen\n,\n      \nname\n: \njohndoe\n,\n      \nnewsletter_prompted\n: false,\n      \npasswd_hash\n: \nhash\n,\n      \nprivacy_mode\n: true,\n      \npro\n: false,\n      \nsubscribed\n: true,\n      \ntwitter_user_id\n: null,\n      \nvalid_email\n: true\n    },\n  ]\n}\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\nIt returns a JSON object with the following information:\n\n-   **form**: A form with the submitted search.\n-   **found**: A list of found users according to a search.\n-   **template**: Jinja2 template.\n-   **users**: List of admin users.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \nerrors\n: {},\n    \nuser\n: 'janedoe',\n  },\n  \nfound\n: [\n        {\n          \nadmin\n: false,\n          \napi_key\n: \nkey\n,\n          \ncategory\n: null,\n          \nckan_api\n: null,\n          \nconfirmation_email_sent\n: false,\n          \ncreated\n: \ndate\n,\n          \nemail_addr\n: \nemail\n,\n          \nfacebook_user_id\n: null,\n          \nflags\n: null,\n          \nfullname\n: \njanedoe\n,\n          \ngoogle_user_id\n: null,\n          \nid\n: 80,\n          \ninfo\n: {},\n          \nlocale\n: \nen\n,\n          \nname\n: \njanedoe\n,\n          \nnewsletter_prompted\n: false,\n          \npasswd_hash\n: \nhash\n,\n          \nprivacy_mode\n: true,\n          \npro\n: false,\n          \nsubscribed\n: true,\n          \ntwitter_user_id\n: null,\n          \nvalid_email\n: true\n        },\n  ],\n  \ntemplate\n: \n/admin/users.html\n,\n  \ntitle\n: \nManage Admin Users\n,\n  \nusers\n: [\n    {\n      \nadmin\n: true,\n      \napi_key\n: \nkey\n,\n      \ncategory\n: null,\n      \nckan_api\n: null,\n      \nconfirmation_email_sent\n: false,\n      \ncreated\n: \ndate\n,\n      \nemail_addr\n: \nemail\n,\n      \nfacebook_user_id\n: null,\n      \nflags\n: null,\n      \nfullname\n: \nJohn Doe\n,\n      \ngoogle_user_id\n: null,\n      \nid\n: 1,\n      \ninfo\n: {\n        \navatar\n: \navatar.png\n,\n        \ncontainer\n: \nuser_1\n\n      },\n      \nlocale\n: \nen\n,\n      \nname\n: \njohndoe\n,\n      \nnewsletter_prompted\n: false,\n      \npasswd_hash\n: \nhash\n,\n      \nprivacy_mode\n: true,\n      \npro\n: false,\n      \nsubscribed\n: true,\n      \ntwitter_user_id\n: null,\n      \nvalid_email\n: true\n    },\n  ]\n  }\n\n\n\n\nAdmin users add\n\n\nEndpoint: /admin/users/add/\nint:user_id\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt adds a user to the admin group. It returns a JSON object with the\nfollowing information:\n\n\n\n\nnext\n: \n/admin/users\n,\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nnext\n: \n/admin/users\n,\n}\n\n\n\n\ndiv class=\nadmonition note\n\n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.\n\n\n/div\n\n\n### Admin users del\n\n**Endpoint: /admin/users/del/\nlt;int:user\\_id\ngt;**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt removes a user from the admin group. It returns a JSON object with\nthe following information:\n\n-   **next**: '/admin/users',\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nnext\n: '/admin/users',\n}\n\n\n\n\n\n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.\n\n\n\n\n\nAdmin categories\n\n\nEndpoint: /admin/categories\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt lists all the available categories. It returns a JSON object with the\nfollowing information:\n\n\n\n\ncategories\n: A list of categories.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\nn_projects_per_category\n: A dictionary with the number of\n    projects per category.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \ncategories\n: [\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nSocial projects\n,\n      \nid\n: 2,\n      \nname\n: \nSocial\n,\n      \nshort_name\n: \nsocial\n\n    },\n    {\n      \ncreated\n: \n2013-06-18T11:13:44.789149\n,\n      \ndescription\n: \nArt projects\n,\n      \nid\n: 3,\n      \nname\n: \nArt\n,\n      \nshort_name\n: \nart\n\n    },\n  ],\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: null,\n    \nerrors\n: {},\n    \nid\n: null,\n    \nname\n: null\n  },\n  \nn_projects_per_category\n: {\n    \nart\n: 41,\n    \nsocial\n: 182\n  },\n  \ntemplate\n: \nadmin/categories.html\n,\n  \ntitle\n: \nCategories\n\n}\n\n\n\n**POST**\n\nIt returns the same output as before, but if the form is valid, it will\nreturn the new created Category. Use the CSRFToken for submitting the\ndata.\n\n-   **categories**: A list of categories.\n-   **form**: A form with the CSRF key to add a new category.\n-   **n\\_projects\\_per\\_category**: A dictionary with the number of\n    projects per category.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \ncategories\n: [\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nSocial projects\n,\n      \nid\n: 2,\n      \nname\n: \nSocial\n,\n      \nshort_name\n: \nsocial\n\n    },\n    {\n      \ncreated\n: \n2013-06-18T11:13:44.789149\n,\n      \ndescription\n: \nArt projects\n,\n      \nid\n: 3,\n      \nname\n: \nArt\n,\n      \nshort_name\n: \nart\n\n    },\n    {\n      \ncreated\n: \nnow\n,\n      \ndescription\n: \nnew\n,\n      \nid\n: 4,\n      \nname\n: \nnew\n,\n      \nshort_name\n: \nnew\n\n    },\n\n  ],\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: \nnew\n,\n    \nerrors\n: {},\n    \nname\n: \nnew\n\n  },\n  \nn_projects_per_category\n: {\n    \nart\n: 41,\n    \nsocial\n: 182,\n    \nnew\n: 0\n  },\n  \ntemplate\n: \nadmin/categories.html\n,\n  \ntitle\n: \nCategories\n\n}\n\n\n\n\nAdmin categories delete\n\n\nEndpoint: /admin/categories/del/\nint:id\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.\n\n\n\n\ncategory\n: The category to be deleted.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \ncategory\n: {\n    \ncreated\n: \n2017-01-24T13:08:09.873071\n,\n    \ndescription\n: \nnew\n,\n    \nid\n: 9,\n    \nname\n: \nnew\n,\n    \nshort_name\n: \nnew\n\n  },\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n  },\n  \ntemplate\n: \nadmin/del_category.html\n,\n  \ntitle\n: \nDelete Category\n\n}\n\n\n\n**POST**\n\nIt shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.\n\n-   **flash**: A human readable message about the action.\n-   **next**: The next URL\n-   **status**: The status of the POST.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nCategory deleted\n,\n  \nnext\n: \n/admin/categories\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nAdmin categories update\n\n\nEndpoint: /admin/categories/update/\nint:id\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt shows the category that will be updated. It gives you the CSRF token\nto do a POST and update it.\n\n\n\n\ncategory\n: The category to be deleted.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \ncategory\n: {\n    \ncreated\n: \n2017-01-24T13:08:09.873071\n,\n    \ndescription\n: \nnew\n,\n    \nid\n: 9,\n    \nname\n: \nnew\n,\n    \nshort_name\n: \nnew\n\n  },\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: \nnew\n,\n    \nerrors\n: {},\n    \nid\n: 9,\n    \nname\n: \nnew\n\n  },\n  \ntemplate\n: \nadmin/update_category.html\n,\n  \ntitle\n: \nUpdate Category\n\n}\n\n\n\n**POST**\n\nIt updates the category. Use the CSRF token and form fields from the\nprevious action to update it.\n\n-   **flash**: A human readable message about the action.\n-   **next**: The next URL\n-   **status**: The status of the POST.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nCategory updated\n,\n  \nnext\n: \n/admin/categories\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nAdmin dashboard\n\n\n**Endpoint: /admin/dashboard/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt shows the server statistics. You can use the argument \n?refresh=1\n to\nupdate the data, as this data is only updated every 24 hours.\n\n\n\n\nactive_anon_last_week\n: Active number of anonymous users in\n    the server.\n\n\npublished_projects_last_week\n: Published projects from the\n    last week.\n\n\nnew_tasks_week\n: Number of new tasks created on the last week.\n\n\nupdate_feed\n: Activity feed of actions in the server.\n\n\ndraft_projects_last_week\n: List of new draft projects created\n    in the last week.\n\n\nupdate_projects_last_week\n: List of updated projects in the\n    last week.\n\n\nnew_users_week\n: Number of new registered users in the last\n    week.\n\n\nnew_task_runs_week\n: Number of new task runs in the last week.\n\n\nreturning_users_week\n: Number of returning users per number of\n    days in a row in the last week.\n\n\nactive_users_last_week\n: Number of active users in the last\n    week.\n\n\nwait\n: This will be False if there\ns data, otherwise it will be\n    True.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nactive_anon_last_week\n: {\n    \nlabels\n: [\n      \n2016-04-28\n\n    ],\n    \nseries\n: [\n      [\n        0\n      ]\n    ]\n  },\n  \nactive_users_last_week\n: {\n    \nlabels\n: [\n      \n2016-04-28\n\n    ],\n    \nseries\n: [\n      [\n        1\n      ]\n    ]\n  },\n  \ndraft_projects_last_week\n: [\n    {\n      \nday\n: \n2016-04-27\n,\n      \nemail_addr\n: \nemail\n,\n      \nid\n: id,\n      \nowner_id\n: id,\n      \np_name\n: \nname\n,\n      \nshort_name\n: \nname\n,\n      \nu_name\n: \nname\n\n    },\n    {\n      \nday\n: \n2016-04-26\n,\n      \nemail_addr\n: \nemail\n,\n      \nid\n: id,\n      \nowner_id\n: id,\n      \np_name\n: \nname\n,\n      \nshort_name\n: \nname\n,\n      \nu_name\n: \nname\n\n    }\n  ],\n  \nnew_task_runs_week\n: {\n    \nlabels\n: [\n      \n2016-04-28\n\n    ],\n    \nseries\n: [\n      [\n        4\n      ]\n    ]\n  },\n  \nnew_tasks_week\n: {\n    \nlabels\n: [\n      \n2016-04-26\n,\n      \n2016-04-28\n\n    ],\n    \nseries\n: [\n      [\n        57,\n        4\n      ]\n    ]\n  },\n  \nnew_users_week\n: {\n    \nlabels\n: [\n      \n2016-04-27\n\n    ],\n    \nseries\n: [\n      [\n        1\n      ]\n    ]\n  },\n  \npublished_projects_last_week\n: [],\n  \nreturning_users_week\n: {\n    \nlabels\n: [\n      \n1 day\n,\n      \n2 days\n,\n      \n3 days\n,\n      \n4 days\n,\n      \n5 days\n,\n      \n6 days\n,\n      \n7 days\n\n    ],\n    \nseries\n: [\n      [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    ]\n  },\n  \ntemplate\n: \nadmin/dashboard.html\n,\n  \ntitle\n: \nDashboard\n,\n  \nupdate_feed\n: [],\n  \nupdate_projects_last_week\n: [\n    {\n      \nday\n: \n2016-04-28\n,\n      \nemail_addr\n: \nemail\n,\n      \nid\n: id,\n      \nowner_id\n: id,\n      \np_name\n: \nname\n,\n      \nshort_name\n: \nname\n,\n      \nu_name\n: \nname\n\n    },\n    {\n      \nday\n: \n2016-04-27\n,\n      \nemail_addr\n: \nemail\n,\n      \nid\n: id,\n      \nowner_id\n: id,\n      \np_name\n: \nname\n,\n      \nshort_name\n: \nname\n,\n      \nu_name\n: \nname\n\n    },\n    {\n      \nday\n: \n2016-04-26\n,\n      \nemail_addr\n: \nemail\n,\n      \nid\n: id,\n      \nowner_id\n: id,\n      \np_name\n: \nname\n,\n      \nshort_name\n: \nname\n,\n      \nu_name\n: \nname\n\n    },\n  ],\n  \nwait\n: false\n}\n\n\n\n### Admin featured projects\n\n**Endpoint: /admin/featured**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you all featured projects on PYBOSSA.\n\n-   **categories**: Gives you a list of categories where projects can be\n    featured.\n-   **form**: The form fields that need to be sent for feature and\n    unfeature a project. It contains the CSRF token for validating the\n    POST/DELETE.\n-   **projects**: Featured projects grouped by categories.\n-   **template**: The Jinja2 template that could be rendered.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \ncategories\n: [\n    {\n      \ncreated\n: \n2013-06-18T11:13:44.789149\n,\n      \ndescription\n: \nArt projects\n,\n      \nid\n: 3,\n      \nname\n: \nArt\n,\n      \nshort_name\n: \nart\n\n    },\n    {\n      \ncreated\n: \n2013-06-18T11:14:54.737672\n,\n      \ndescription\n: \nHumanities projects\n,\n      \nid\n: 4,\n      \nname\n: \nHumanities\n,\n      \nshort_name\n: \nhumanities\n\n    },\n    ...\n  ],\n  \nprojects\n: {\n    \nart\n: [\n      {\n        \ncreated\n: \n2013-12-10T06:54:48.222642\n,\n        \ndescription\n: \nDescription\n,\n        \nid\n: 1069,\n        \ninfo\n: {\n          \ncontainer\n: \nuser_3738\n,\n          \nthumbnail\n: \napp_1069_thumbnail_1410772175.32.png\n\n        },\n        \nlast_activity\n: \njust now\n,\n        \nlast_activity_raw\n: null,\n        \nn_tasks\n: 13,\n        \nn_volunteers\n: 0,\n        \nname\n: \nAAAA Test\n,\n        \noverall_progress\n: 0,\n        \nowner\n: \nJohn Doe\n,\n        \nshort_name\n: \nAAAATest\n,\n        \nupdated\n: \n2014-11-05T14:55:07.564118\n\n      },\n      ...\n    ]\n    \nhumanities\n: [\n      {\n        \ncreated\n: \n2014-10-21T12:20:51.194485\n,\n        \ndescription\n: \ntest project\n,\n        \nid\n: 2144,\n        \ninfo\n: {\n          \ncontainer\n: null,\n          \nthumbnail\n: null\n        },\n        \nlast_activity\n: \n2 years ago\n,\n        \nlast_activity_raw\n: \n2014-10-21T12:31:51.560422\n,\n        \nn_tasks\n: 9,\n        \nn_volunteers\n: 2,\n        \nname\n: \nzak's test\n,\n        \noverall_progress\n: 0,\n        \nowner\n: \nJohn Doe Cousin\n,\n        \nshort_name\n: \ncousintest\n,\n        \nupdated\n: \n2014-11-05T14:55:07.564118\n\n      },\n      ...\n    ]\n  },\n  \nform\n: {\n    \ncsrf\n: \nsecret_token_here\n\n  },\n  \ntemplate\n: \n/admin/projects.html\n\n}\n\n\n\n\nAdmin un-/feature projects\n\n\nEndpoint: /admin/featured/\nint:project_id\n\n\nAllowed methods\n: \nPOST / DELETE\n\n\nPOST\n\n\nFeatures a specific project.\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nExample output\n\n\nOn Success it will give you the project information\n\n\n``` {.sourceCode .python}\n{\n  \ninfo\n: {\n    \ntask_presenter\n: \n,\n    \ncontainer\n: \nuser_3738\n,\n    \nthumbnail\n: \napp_1069_thumbnail_1410772175.32.png\n\n  },\n  \nupdated\n: \n2017-01-24T17:21:07.545983\n,\n  \ncategory_id\n: 3,\n  \ndescription\n: \nDescription\n,\n  \nshort_name\n: \nAAAATest\n,\n  \ncreated\n: \n2013-12-10T06:54:48.222642\n,\n  \nwebhook\n: null,\n  \nlong_description\n: \nAAAATest\\n\\n\n,\n  \nfeatured\n: false,\n  \nallow_anonymous_contributors\n: true,\n  \npublished\n: true,\n  \nsecret_key\n: \ndfgojdsfgsgd\n,\n  \nowner_id\n: 3738,\n  \ncontacted\n: null,\n  \nid\n: 1069,\n  \nname\n: \nAAAA Test\n\n}\n\n\n\nIf a project is already featured:\n\n``` {.sourceCode .python}\n{\n  \ncode\n: 400,\n  \ndescription\n: \nCSRF token missing or incorrect.\n,\n  \ntemplate\n: \n400.html\n\n}\n\n\n\n\nDELETE\n\n\nUnfeatures a specific project.\n\n\nTo send a valid DELETE request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nExample output\n\n\nOn Success it will give you the project information\n\n\n``` {.sourceCode .python}\n{\n  \ninfo\n: {\n    \ntask_presenter\n: \n,\n    \ncontainer\n: \nuser_3738\n,\n    \nthumbnail\n: \napp_1069_thumbnail_1410772175.32.png\n\n  },\n  \nupdated\n: \n2017-01-24T17:21:07.545983\n,\n  \ncategory_id\n: 3,\n  \ndescription\n: \nDescription\n,\n  \nshort_name\n: \nAAAATest\n,\n  \ncreated\n: \n2013-12-10T06:54:48.222642\n,\n  \nwebhook\n: null,\n  \nlong_description\n: \nAAAATest\\n\\n\n,\n  \nfeatured\n: false,\n  \nallow_anonymous_contributors\n: true,\n  \npublished\n: true,\n  \nsecret_key\n: \n2ffgjngdf6bcbc38ba52561d4\n,\n  \nowner_id\n: 3738,\n  \ncontacted\n: null,\n  \nid\n: 1069,\n  \nname\n: \nAAAA Test\n\n}\n\n\n\nIf a project is already unfeatured:\n\n``` {.sourceCode .python}\n{\n  \nstatus_code\n: 415,\n  \nerror\n: \nProject.id 1069 is not featured\n\n}\n\n\n\n\nHelp API\n\n\nEndpoint: /help/api\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the API help for your PYBOSSA\n\n\n\n\nproject_id\n: a project id for the help example text. If no\n    project exists it is null.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nproject_id\n: 1104,\n  \ntemplate\n: \nhelp/privacy.html\n,\n  \ntitle\n: \nAPI Help\n\n}\n\n\n\n### Help privacy\n\n**Endpoint: /help/privacy**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the privacy policy for your PYBOSSA\n\n-   **content**: Simplified HTML of rendered privacy policy.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \ncontent\n: \nhtml\nbody\np\nprivacy policy here\n/p\n/body\n/html\n\n  \ntemplate\n: \nhelp/privacy.html\n,\n  \ntitle\n: \nPrivacy Policy\n\n}\n\n\n\n\nHelp cookie policy\n\n\nEndpoint: /help/cookies-policy\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the cookie policy for your PYBOSSA\n\n\n\n\ncontent\n: Simplified HTML of rendered cookie policy.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \ncontent\n: \ncookie policy here\n\n  \ntemplate\n: \nhelp/cookies_policy.html\n,\n  \ntitle\n: \nHelp: Cookies Policy\n\n}\n\n\n\n### Help terms of use\n\n**Endpoint: /help/terms-of-use**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the terms of use for your PYBOSSA\n\n-   **content**: Simplified HTML of rendered terms of use.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \ncontent\n: \nhtml\nbody\np\nTerms of use text\n/p\n/body\n/html\n\n  \ntemplate\n: \nhelp/tos.html\n,\n  \ntitle\n: \nHelp: Terms of Use\n\n}\n\n\n\n\nPYBOSSA server stats\n\n\nEndpoint: /stats/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the global stats of the PYBOSSA server.\n\n\n\n\ntitle\n: the title for the endpoint.\n\n\nlocs\n: localizations for anonymous users that have contributed.\n\n\nprojects\n: statistics about total published and draft projects.\n\n\nshow_locs\n: if GEOIP is enabled to show that data.\n\n\nstats\n: Number of anonymous and authenticated users, number of\n    draft and published projects, number of tasks, taskruns and total\n    number of users.\n\n\ntasks\n: Task and Taskrun statistics.\n\n\ntasks\n: Task and Taskrun statistics.\n\n\ntop_5_projects_24_hours\n: Top 5 projects in the last 24\n    hours.\n\n\ntop_5_users_24_hours\n: Top 5 users in the last 24 hours.\n\n\nusers\n: User statistics.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nlocs\n: \n[]\n,\n  \nprojects\n: {\n    \nlabel\n: \nProjects Statistics\n,\n    \nvalues\n: [\n      {\n        \nlabel\n: \nPublished\n,\n        \nvalue\n: [\n          0,\n          534\n        ]\n      },\n      {\n        \nlabel\n: \nDraft\n,\n        \nvalue\n: [\n          0,\n          1278\n        ]\n      }\n    ]\n  },\n  \nshow_locs\n: false,\n  \nstats\n: {\n    \nn_anon\n: 27587,\n    \nn_auth\n: 11134,\n    \nn_draft_projects\n: 1278,\n    \nn_published_projects\n: 534,\n    \nn_task_runs\n: 1801222,\n    \nn_tasks\n: 553012,\n    \nn_total_projects\n: 1812,\n    \nn_total_users\n: 38721\n  },\n  \ntasks\n: {\n    \nlabel\n: \nTask and Task Run Statistics\n,\n    \nvalues\n: [\n      {\n        \nlabel\n: \nTasks\n,\n        \nvalue\n: [\n          0,\n          553012\n        ]\n      },\n      {\n        \nlabel\n: \nAnswers\n,\n        \nvalue\n: [\n          1,\n          1801222\n        ]\n      }\n    ]\n  },\n  \ntemplate\n: \n/stats/global.html\n,\n  \ntitle\n: \nGlobal Statistics\n,\n  \ntop5_projects_24_hours\n: [],\n  \ntop5_users_24_hours\n: [],\n  \nusers\n: {\n    \nlabel\n: \nUser Statistics\n,\n    \nvalues\n: [\n      {\n        \nlabel\n: \nAnonymous\n,\n        \nvalue\n: [\n          0,\n          27587\n        ]\n      },\n      {\n        \nlabel\n: \nAuthenticated\n,\n        \nvalue\n: [\n          0,\n          11134\n        ]\n      }\n    ]\n  }\n}\n\n\n\n### Project Category Featured\n\n**Endpoint: /project/category/featured/**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the list of featured projects.\n\n-   **pagination**: A pagination object for getting new featured projets\n    from this category.\n-   **active\\_cat**: Active category.\n-   **projects**: List of projects belonging to this category.\n-   **categories**: List of available categories in this server.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nactive_cat\n: {\n    \ncreated\n: null,\n    \ndescription\n: \nFeatured projects\n,\n    \nid\n: null,\n    \nname\n: \nFeatured\n,\n    \nshort_name\n: \nfeatured\n\n  },\n  \ncategories\n: [\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nFeatured projects\n,\n      \nid\n: null,\n      \nname\n: \nFeatured\n,\n      \nshort_name\n: \nfeatured\n\n    },\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nSocial projects\n,\n      \nid\n: 2,\n      \nname\n: \nSocial\n,\n      \nshort_name\n: \nsocial\n\n    },\n    {\n      \ncreated\n: \n2013-06-18T11:13:44.789149\n,\n      \ndescription\n: \nArt projects\n,\n      \nid\n: 3,\n      \nname\n: \nArt\n,\n      \nshort_name\n: \nart\n\n    },\n  ],\n  \npagination\n: {\n    \nnext\n: false,\n    \npage\n: 1,\n    \nper_page\n: 20,\n    \nprev\n: false,\n    \ntotal\n: 1\n  },\n  \nprojects\n: [\n    {\n      \ncreated\n: \n2014-02-22T15:09:23.691811\n,\n      \ndescription\n: \nImage pattern recognition\n,\n      \nid\n: 1377,\n      \ninfo\n: {\n        \ncontainer\n: \n7\n,\n        \nthumbnail\n: \n58.png\n\n      },\n      \nlast_activity\n: \n2 weeks ago\n,\n      \nlast_activity_raw\n: \n2017-01-31T09:18:28.450391\n,\n      \nn_tasks\n: 169671,\n      \nn_volunteers\n: 17499,\n      \nname\n: \nName\n,\n      \noverall_progress\n: 80,\n      \nowner\n: \nJohn Doe\n,\n      \nshort_name\n: \nname\n,\n      \nupdated\n: \n2017-01-31T09:18:28.491496\n\n    },\n  ],\n  \ntemplate\n: \n/projects/index.html\n,\n  \ntitle\n: \nProjects\n\n}\n\n\n\n\nProject Category Draft\n\n\nEndpoint: /project/category/draft/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of featured projects.\n\n\n\n\npagination\n: A pagination object for getting new draft projets\n    from this category.\n\n\nactive_cat\n: Active category.\n\n\nprojects\n: List of projects belonging to this category.\n\n\ncategories\n: List of available categories in this server.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nactive_cat\n: {\n    \ncreated\n: null,\n    \ndescription\n: \nDraft projects\n,\n    \nid\n: null,\n    \nname\n: \nDraft\n,\n    \nshort_name\n: \ndraft\n\n  },\n  \ncategories\n: [\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nDraft projects\n,\n      \nid\n: null,\n      \nname\n: \nDraft\n,\n      \nshort_name\n: \ndraft\n\n    },\n    {\n      \ncreated\n: null,\n      \ndescription\n: \nSocial projects\n,\n      \nid\n: 2,\n      \nname\n: \nSocial\n,\n      \nshort_name\n: \nsocial\n\n    },\n    {\n      \ncreated\n: \n2013-06-18T11:13:44.789149\n,\n      \ndescription\n: \nArt projects\n,\n      \nid\n: 3,\n      \nname\n: \nArt\n,\n      \nshort_name\n: \nart\n\n    },\n  ],\n  \npagination\n: {\n    \nnext\n: false,\n    \npage\n: 1,\n    \nper_page\n: 20,\n    \nprev\n: false,\n    \ntotal\n: 1\n  },\n  \nprojects\n: [\n    {\n      \ncreated\n: \n2014-02-22T15:09:23.691811\n,\n      \ndescription\n: \nDraft 1\n,\n      \nid\n: 17,\n      \ninfo\n: {\n        \ncontainer\n: \n7\n,\n        \nthumbnail\n: \n58.png\n\n      },\n      \nlast_activity\n: \n2 weeks ago\n,\n      \nlast_activity_raw\n: \n2017-01-31T09:18:28.450391\n,\n      \nn_tasks\n: 0,\n      \nn_volunteers\n: 0,\n      \nname\n: \nName\n,\n      \noverall_progress\n: 0,\n      \nowner\n: \nJohn Doe\n,\n      \nshort_name\n: \nname\n,\n      \nupdated\n: \n2017-01-31T09:18:28.491496\n\n    },\n  ],\n  \ntemplate\n: \n/projects/index.html\n,\n  \ntitle\n: \nProjects\n\n}\n\n\n\n### Project Creation\n\n**Endpoint: /project/new**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nGives you the list of required fields in the form to create a project.\n\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n-   **form**: The form fields that need to be sent for creating the\n    project. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nerrors\n: false,\n  \nform\n: {\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: null,\n    \nerrors\n: {},\n    \nlong_description\n: null,\n    \nname\n: null,\n    \nshort_name\n: null\n  },\n  \ntemplate\n: \nprojects/new.html\n,\n  \ntitle\n: \nCreate a Project\n\n}\n\n\n\n\nProject Blog list\n\n\nEndpoint: /project/\nshort_name\n/blog\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of posted blogs by the given project short name.\n\n\n\n\nblogposts\n: All the blog posts for the given project.\n\n\nproject\n: Info about the project.\n\n\n\n\nThe project and owner fields will have more information if the onwer of\nthe project does the request, providing its private information like\napi_key, password keys, etc. Otherwise it will be removed and only show\npublic info.\n\n\nExample public output\n\n\n``` {.sourceCode .python}\n{\n  \nblogposts\n: [\n    {\n      \nbody\n: \nPlease, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks.\n,\n      \ncreated\n: \n2014-05-14T14:25:04.899079\n,\n      \nid\n: 1,\n      \nproject_id\n: 1377,\n      \ntitle\n: \nWe are working on the Alpha version.\n,\n      \nuser_id\n: 3927\n    },\n  ],\n  \nn_completed_tasks\n: 137051,\n  \nn_task_runs\n: 1070561,\n  \nn_tasks\n: 169671,\n  \nn_volunteers\n: 17499,\n  \noverall_progress\n: 80,\n  \nowner\n: {\n    \ncreated\n: \n2014-02-13T15:28:08.420187\n,\n    \nfullname\n: \nJohn Doe\n,\n    \ninfo\n: {\n      \navatar\n: \navatar.png\n,\n      \ncontainer\n: \ncontainer\n\n    },\n    \nn_answers\n: 32814,\n    \nname\n: \njohndoe\n,\n    \nrank\n: 4,\n    \nregistered_ago\n: \n3 years ago\n,\n    \nscore\n: 32814\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \ncreated\n: \n2014-02-22T15:09:23.691811\n,\n    \ndescription\n: \nImage pattern recognition\n,\n    \nfeatured\n: true,\n    \nid\n: 1,\n    \ninfo\n: {\n      \ncontainer\n: \ncontainer\n,\n      \nthumbnail\n: \n58.png\n\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nDark Skies ISS\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \ndarkskies\n,\n    \nupdated\n: \n2017-01-31T09:18:28.491496\n\n  },\n  \ntemplate\n: \nprojects/blog.html\n\n}\n\n\n\n### Project Task Presenter Editor\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/tasks/taskpresentereditor**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nThis endpoint allows you to get the list of available templates for the\ncurrent project. This will only happen when the project has an empty\ntemplate, otherwise it will load the template for you.\n\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n-   **presenters**: List of available templates (in HTML format). The\n    name of them without the '.html' will be the argument for the\n    endpoint.\n-   **last\\_activit**: last activity of the project.\n-   **n\\_task\\_runs**: number of task runs.\n-   **n\\_tasks**: number of tasks.\n-   **n\\_volunteers**: number of volunteers.\n-   **owner**: information about the owner.\n-   **pro\\_features**: which pro features are enabled.\n-   **pro\\_features**: which pro features are enabled.\n-   **project**: info about the project.\n-   **status**: status of the flash message.\n-   **flash**: flash message.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n \nflash\n: \nstrong\nNote\n/strong\n You will need to upload the tasks using the\na href=\\\n/project/asdf123/tasks/import\\\n CSV importer\n/a\n or download the project bundle and run the \nstrong\ncreateTasks.py\n/strong\n script in your computer\n,\n \nlast_activity\n: null,\n \nn_completed_tasks\n: 0,\n \nn_task_runs\n: 0,\n \nn_tasks\n: 0,\n \nn_volunteers\n: 0,\n \noverall_progress\n: 0,\n \nowner\n: {\n   \napi_key\n: \nkey\n,\n   \nconfirmation_email_sent\n: false,\n   \ncreated\n: \n2016-09-15T11:30:42.660450\n,\n   \nemail_addr\n: \nprueba@prueba.com\n,\n   \nfacebook_user_id\n: null,\n   \nfullname\n: \nprueba de json\n,\n   \ngoogle_user_id\n: null,\n   \nid\n: 12030,\n   \ninfo\n: {\n     \navatar\n: \navatar.png\n,\n     \ncontainer\n: \nuser\n\n   },\n   \nn_answers\n: 5,\n   \nname\n: \npruebaadfadfa\n,\n   \nrank\n: 4411,\n   \nregistered_ago\n: \n6 months ago\n,\n   \nscore\n: 5,\n   \ntotal\n: 11134,\n   \ntwitter_user_id\n: null,\n   \nvalid_email\n: true\n },\n \npresenters\n: [\n   \nprojects/presenters/basic.html\n,\n   \nprojects/presenters/image.html\n,\n   \nprojects/presenters/sound.html\n,\n   \nprojects/presenters/video.html\n,\n   \nprojects/presenters/map.html\n,\n   \nprojects/presenters/pdf.html\n\n ],\n \npro_features\n: {\n   \nauditlog_enabled\n: false,\n   \nautoimporter_enabled\n: false,\n   \nwebhooks_enabled\n: false\n },\n \nproject\n: {\n   \nallow_anonymous_contributors\n: true,\n   \ncategory_id\n: 4,\n   \ncontacted\n: false,\n   \ncontrib_button\n: \ndraft\n,\n   \ncreated\n: \n2017-01-11T09:37:43.613007\n,\n   \ndescription\n: \nadsf\n,\n   \nfeatured\n: false,\n   \nid\n: 3,\n   \ninfo\n: {\n     \npasswd_hash\n: null,\n     \ntask_presenter\n: \n\n   },\n   \nlong_description\n: \nadsf\n,\n   \nn_blogposts\n: 0,\n   \nn_results\n: 0,\n   \nname\n: \nasdf1324\n,\n   \nowner_id\n: 12030,\n   \npublished\n: false,\n   \nsecret_key\n: \n73aee9df-be47-4e4c-8192-3a8bf0ab5161\n,\n   \nshort_name\n: \nasdf123\n,\n   \nupdated\n: \n2017-03-15T13:20:48.022328\n,\n   \nwebhook\n: \n\n },\n \nstatus\n: \ninfo\n,\n \ntemplate\n: \nprojects/task_presenter_options.html\n,\n \ntitle\n: \nProject: asdf1324 \nmiddot; Task Presenter Editor\n\n\n\n\n\n\n\n}\n\n\n\n\nIf you want to preload the template from one of the available prenters,\nyou have to pass the following argument: \n?template=basic\n for the\nbasic or \n?template=iamge\n for the image template.\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n \nerrors\n: false,\n \nflash\n: \nYour code will be \nautomagically\n rendered in                       the \npreview section\n. Click in the                       preview button!\n,\n \nform\n: {\n   \ncsrf\n: \ntoken\n,\n   \neditor\n: \n\\n    \n\\n        \nWrite here your HTML Task Presenter\n\\n    \n\\n\n\\n\n\\n(function() {\\n    // Your JavaScript code\\n    pybossa.taskLoaded(function(task, deferred){\\n        // When the task is loaded, do....\\n    });\\n\\n    pybossa.presentTask(function(task, deferred){\\n        // Present the current task to the user\\n        // Load the task data into the HTML DOM\\n    });\\n\\n    pybossa.run(&lsquo;asdf123&rsquo;);\\n})();\\n\n,\n   \nerrors\n: {},\n   \nid\n: 3\n },\n \nlast_activity\n: null,\n \nn_completed_tasks\n: 0,\n \nn_task_runs\n: 0,\n \nn_tasks\n: 0,\n \nn_volunteers\n: 0,\n \noverall_progress\n: 0,\n \nowner\n: {\n   \napi_key\n: \nkey\n,\n   \nconfirmation_email_sent\n: false,\n   \ncreated\n: \n2016-09-15T11:30:42.660450\n,\n   \nemail_addr\n: \nprueba@prueba.com\n,\n   \nfacebook_user_id\n: null,\n   \nfullname\n: \nprueba de json\n,\n   \ngoogle_user_id\n: null,\n   \nid\n: 0,\n   \ninfo\n: {\n     \navatar\n: \navatar.png\n,\n     \ncontainer\n: \nuser\n\n   },\n   \nn_answers\n: 5,\n   \nname\n: \npruebaadfadfa\n,\n   \nrank\n: 4411,\n   \nregistered_ago\n: \n6 months ago\n,\n   \nscore\n: 5,\n   \ntotal\n: 11134,\n   \ntwitter_user_id\n: null,\n   \nvalid_email\n: true\n },\n \npro_features\n: {\n   \nauditlog_enabled\n: false,\n   \nautoimporter_enabled\n: false,\n   \nwebhooks_enabled\n: false\n },\n \nproject\n: {\n   \nallow_anonymous_contributors\n: true,\n   \ncategory_id\n: 4,\n   \ncontacted\n: false,\n   \ncontrib_button\n: \ndraft\n,\n   \ncreated\n: \n2017-01-11T09:37:43.613007\n,\n   \ndescription\n: \nadsf\n,\n   \nfeatured\n: false,\n   \nid\n: 3,\n   \ninfo\n: {\n     \npasswd_hash\n: null,\n     \ntask_presenter\n: \n\n   },\n   \nlong_description\n: \nadsf\n,\n   \nn_blogposts\n: 0,\n   \nn_results\n: 0,\n   \nname\n: \nasdf1324\n,\n   \nowner_id\n: 0,\n   \npublished\n: false,\n   \nsecret_key\n: \n73aee9df-be47-4e4c-8192-3a8bf0ab5161\n,\n   \nshort_name\n: \nasdf123\n,\n   \nupdated\n: \n2017-03-15T13:20:48.022328\n,\n   \nwebhook\n: \n\n },\n \nstatus\n: \ninfo\n,\n \ntemplate\n: \nprojects/task_presenter_editor.html\n,\n \ntitle\n: \nProject: asdf1324 \n Task Presenter Editor\n\n\n\n\n }\n\nThen, you can use that template, or if you prefer you can do a POST\ndirectly without that information. As in any other request involving a\nPOST you will need the CSRFToken to validate it.\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n. You will have to POST\nthe data fields found in the previous example, as it contains the\ninformation about the fields: specifically **editor** with the\nHTML/CSS/JS that you want to provide.\n\nIf the post is successfull, you will get the following output:\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \ni class=\\\nicon-ok\\\n/i\n Task presenter added!\n,\n  \nnext\n: \n/project/asdf123/tasks/\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nProject Delete\n\n\nEndpoint: /project/\nshort_name\n/delete\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nThe GET endpoint allows you to get all the info about the project (see\nthe Project endpoint as well) as well as the csrf token. As this\nendpoint does not have any form, the csrf token is not inside the form\nfield.\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \ncsrf\n: \ntoken\n,\n  \nlast_activity\n: null,\n  \nn_tasks\n: 0,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \napi_key\n: \nkey\n,\n    \nconfirmation_email_sent\n: false,\n    \ncreated\n: \n2016-09-15T11:30:42.660450\n,\n    \nemail_addr\n: \nprueba@prueba.com\n,\n    \nfacebook_user_id\n: null,\n    \nfullname\n: \nprueba de json\n,\n    \ngoogle_user_id\n: null,\n    \nid\n: 0,\n    \ninfo\n: {\n      \navatar\n: \navatar.png\n,\n      \ncontainer\n: \n0\n\n    },\n    \nn_answers\n: 5,\n    \nname\n: \npruebaadfadfa\n,\n    \nrank\n: 4411,\n    \nregistered_ago\n: \n6 months ago\n,\n    \nscore\n: 5,\n    \ntotal\n: 11134,\n    \ntwitter_user_id\n: null,\n    \nvalid_email\n: true\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \nallow_anonymous_contributors\n: true,\n    \ncategory_id\n: 2,\n    \ncontacted\n: false,\n    \ncreated\n: \n2017-03-15T15:02:12.160810\n,\n    \ndescription\n: \nasdf\n,\n    \nfeatured\n: false,\n    \nid\n: 3,\n    \ninfo\n: {},\n    \nlong_description\n: \nasdf\n,\n    \nname\n: \nalgo\n,\n    \nowner_id\n: 12030,\n    \npublished\n: false,\n    \nsecret_key\n: \nc5a77943-f5a4-484a-86bb-d69559e80357\n,\n    \nshort_name\n: \nalgo\n,\n    \nupdated\n: \n2017-03-15T15:02:12.160823\n,\n    \nwebhook\n: null\n  },\n  \ntemplate\n: \n/projects/delete.html\n,\n  \ntitle\n: \nProject: algo \n Delete\n\n}\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nProject deleted!\n,\n  \nnext\n: \n/account/pruebaadfadfa/\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nProject update\n\n\nEndpoint: /project/\nshort_name\n/update\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for updating the\n    project. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.\n\n\nupload_form\n: the form fields that need to be sent for updating\n    the project\ns avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nform\n: {\n    \nallow_anonymous_contributors\n: false,\n    \ncategory_id\n: 2,\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: \ndescription\n,\n    \nerrors\n: {},\n    \nid\n: 3117,\n    \nlong_description\n: \nlong description\n,\n    \nname\n: \nname\n,\n    \npassword\n: null,\n    \nprotect\n: false,\n    \nshort_name\n: \nslug\n,\n    \nwebhook\n: null\n  },\n  \nlast_activity\n: null,\n  \nn_completed_tasks\n: 0,\n  \nn_task_runs\n: 0,\n  \nn_tasks\n: 2,\n  \nn_volunteers\n: 0,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \napi_key\n: \nkey\n,\n    \nconfirmation_email_sent\n: false,\n    \ncreated\n: \n2012-06-06T06:27:18.760254\n,\n    \nemail_addr\n: \nemail.com\n,\n    \nfacebook_user_id\n: null,\n    \nfullname\n: \nJohn Doe\n,\n    \ngoogle_user_id\n: null,\n    \nid\n: 0,\n    \ninfo\n: {\n      \navatar\n: \navatar.png\n,\n      \ncontainer\n: \nuser\n,\n      \ntwitter_token\n: {\n        \noauth_token\n: \ntoken\n,\n        \noauth_token_secret\n: \ntoken\n\n      }\n    },\n    \nn_answers\n: 2414,\n    \nname\n: \njohndoe\n,\n    \nrank\n: 69,\n    \nregistered_ago\n: \n4 years ago\n,\n    \nscore\n: 2414,\n    \ntotal\n: 11134,\n    \ntwitter_user_id\n: 12,\n    \nvalid_email\n: false\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: true,\n    \nautoimporter_enabled\n: true,\n    \nwebhooks_enabled\n: true\n  },\n  \nproject\n: {\n    \nallow_anonymous_contributors\n: false,\n    \ncategory_id\n: 2,\n    \ncontacted\n: false,\n    \ncontrib_button\n: \ncan_contribute\n,\n    \ncreated\n: \n2015-06-29T08:23:14.201331\n,\n    \ndescription\n: \ndescription\n,\n    \nfeatured\n: false,\n    \nid\n: 0,\n    \ninfo\n: {\n      \ncontainer\n: \nuser\n,\n      \npasswd_hash\n: null,\n      \ntask_presenter\n: \nHTML+CSS+JS,\n      \nthumbnail\n: \nthumbnail.png\n\n    },\n    \nlong_description\n: \nlong description\n,\n    \nn_blogposts\n: 0,\n    \nn_results\n: 0,\n    \nname\n: \nname\n,\n    \nowner_id\n: 0,\n    \npublished\n: true,\n    \nsecret_key\n: \nkey\n,\n    \nshort_name\n: \nslug\n,\n    \nupdated\n: \n2017-03-16T14:50:45.055331\n,\n    \nwebhook\n: null\n  },\n  \ntemplate\n: \n/projects/update.html\n,\n  \ntitle\n: \nProject: name \n Update\n,\n  \nupload_form\n: {\n    \navatar\n: null,\n    \ncsrf\n: \ntoken\n,\n    \nerrors\n: {},\n    \nid\n: null,\n    \nx1\n: 0,\n    \nx2\n: 0,\n    \ny1\n: 0,\n    \ny2\n: 0\n  }\n}\n\n\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\nAs this endpoint supports **two** different forms, you must specify\nwhich form are you targetting adding an extra key: **btn**. The options\nfor this key are:\n\n\n **Upload**: to update the **upload\\_form**.\n\nThe other one does not need this extra key.\n\n\ndiv class=\nadmonition note\n\n\nBe sure to respect the Uppercase in the first letter, otherwise it will\nfail.\n\n\n/div\n\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **form**: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nYour profile has been updated!\n,\n  \nnext\n: \n/account/pruebaadfadfa/update\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\n\nform.errors\n key:\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nPlease correct the errors\n,\n  \nform\n: {\n    \nallow_anonymous_contributors\n: false,\n    \ncategory_id\n: 2,\n    \ncsrf\n: \ntoken\n,\n    \ndescription\n: \ndescription\n,\n    \nerrors\n: {\n      \nshort_name\n: [\n        \nThis field is required.\n\n      ]\n    },\n    \nid\n: 3117,\n    \nlong_description\n: \nnew description\n,\n    \nname\n: \nnew name\n,\n    \npassword\n: null,\n    \nprotect\n: true,\n    \nshort_name\n: \n,\n    \nwebhook\n: null\n  },\n  \n\n}\n\n\n\n\ndiv class=\nadmonition note\n\n\nFor updating the avatar is very important to not set the *Content-Type*. If you\n\n:   are using jQuery, set it to False, so the file is handled properly.\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n(x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop. And don't forget to add an extra key to the form-data: 'btn'\nwith a value Upload to select this form.\n\n\n/div\n\n\n### Project reset secret key\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/resetsecretkey**\n\n*Allowed methods*: **POST**\n\nResets the secret key of a project.\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header: \nX-CSRFToken\n retrieved from the GET\nendpont **/project/\nlt;short\\_name\ngt;/update**.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nNew secret key generated\n,\n  \nnext\n: \n/project/flickrproject2/update\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n\nProject tasks browse\n\n\nEndpoint: /project/\nshort_name\n/tasks/browse/\n \nEndpoint:\n/project/\nshort_name\n/tasks/browse/\nint:page\n\n\nAllowed methods\n: \nGET\n\n\n\n\nn_completed_tasks\n: number of completed tasks\n\n\nn_tasks\n: number of tasks\n\n\nn_volunteers\n: number of volunteers\n\n\noverall_progress\n: overall progress\n\n\nowner\n: project owner\n\n\npagination\n: pagination information\n\n\npro_features\n: pro features enabled or not\n\n\nproject\n: project information\n\n\ntasks\n: tasks, paginated\n\n\ntemplate\n: the Jinja2 template that should be rendered in case of\n    text/html.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nn_completed_tasks\n: 0,\n  \nn_tasks\n: 1,\n  \nn_volunteers\n: 0,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \ncreated\n: \n2017-04-17T23:56:22.892222\n,\n    \nfullname\n: \nJohn Doe\n,\n    \ninfo\n: {},\n    \nlocale\n: null,\n    \nn_answers\n: 0,\n    \nname\n: \njohndoe\n,\n    \nrank\n: null,\n    \nregistered_ago\n: \n3 hours ago\n,\n    \nscore\n: null\n  },\n  \npagination\n: {\n    \nnext\n: false,\n    \npage\n: 1,\n    \nper_page\n: 10,\n    \nprev\n: false,\n    \ntotal\n: 1\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: false,\n    \nautoimporter_enabled\n: false,\n    \nwebhooks_enabled\n: false\n  },\n  \nproject\n: {\n    \ncreated\n: \n2017-04-17T23:56:23.416754\n,\n    \ndescription\n: \nDescription\n,\n    \nfeatured\n: false,\n    \nid\n: 1,\n    \ninfo\n: {},\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nSample Project\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \nsampleapp\n,\n    \nupdated\n: \n2017-04-17T23:56:23.589652\n\n  },\n  \ntasks\n: [\n    {\n      \nid\n: 1,\n      \nn_answers\n: 10,\n      \nn_task_runs\n: 0,\n      \npct_status\n: 0.0\n    }\n  ],\n  \ntemplate\n: \n/projects/tasks_browse.html\n,\n  \ntitle\n: \nProject: Sample Project \n Tasks\n\n}\n\n\n\n### Project tasks import\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/tasks/import**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **available\\_importers**: A list of available importers for the\n    server. To use one of the items, you have to add to the endpoint the\n    following argument: *?type=name* where name is the string that you\n    will find in the list of importers in the format:\n    *projects/tasks/name.html*.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \navailable_importers\n: [\n    \nprojects/tasks/epicollect.html\n,\n    \nprojects/tasks/csv.html\n,\n    \nprojects/tasks/s3.html\n,\n    \nprojects/tasks/twitter.html\n,\n    \nprojects/tasks/youtube.html\n,\n    \nprojects/tasks/gdocs.html\n,\n    \nprojects/tasks/dropbox.html\n,\n    \nprojects/tasks/flickr.html\n\n  ],\n  \nform\n: null,\n  \nloading_text\n: \nImporting tasks, this may take a while, wait...\n,\n  \nn_completed_tasks\n: 0,\n  \nn_tasks\n: 5,\n  \nn_volunteers\n: 0,\n  \noverall_progress\n: 0,\n  \nowner\n: {\n    \napi_key\n: \nkey\n,\n    \nconfirmation_email_sent\n: false,\n    \ncreated\n: \n2012-06-06T06:27:18.760254\n,\n    \nemail_addr\n: \njohndoe@gmail.com\n,\n    \nfacebook_user_id\n: null,\n    \nfullname\n: \nJohn Doe\n,\n    \ngoogle_user_id\n: null,\n    \nid\n: 0,\n    \ninfo\n: {\n      \navatar\n: \navatar.png\n,\n      \ncontainer\n: \nuser\n,\n      \ntwitter_token\n: {\n        \noauth_token\n: \n,\n        \noauth_token_secret\n: \n\n      }\n    },\n    \nn_answers\n: 2414,\n    \nname\n: \njohndoe\n,\n    \nrank\n: 69,\n    \nregistered_ago\n: \n4 years ago\n,\n    \nscore\n: 2414,\n    \ntotal\n: 11134,\n    \ntwitter_user_id\n: 12,\n    \nvalid_email\n: false\n  },\n  \npro_features\n: {\n    \nauditlog_enabled\n: true,\n    \nautoimporter_enabled\n: true,\n    \nwebhooks_enabled\n: true\n  },\n  \nproject\n: {\n    \nallow_anonymous_contributors\n: false,\n    \ncategory_id\n: 2,\n    \ncontacted\n: false,\n    \ncontrib_button\n: \ncan_contribute\n,\n    \ncreated\n: \n2015-06-29T08:23:14.201331\n,\n    \ndescription\n: \nold\n,\n    \nfeatured\n: false,\n    \nid\n: 3117,\n    \ninfo\n: {\n      \ncontainer\n: \nuser\n,\n      \npasswd_hash\n: null,\n      \ntask_presenter\n: \nHTML+CSS+JS\n\n      \nthumbnail\n: \navatar.png\n\n    },\n    \nlong_description\n: \nalgo\n,\n    \nn_blogposts\n: 0,\n    \nn_results\n: 0,\n    \nname\n: \nname\n,\n    \nowner_id\n: 3,\n    \npublished\n: true,\n    \nsecret_key\n: \nf\n,\n    \nshort_name\n: \nname\n,\n    \nupdated\n: \n2017-03-17T09:15:46.867215\n,\n    \nwebhook\n: null\n  },\n  \ntarget\n: \nproject.import_task\n,\n  \ntask_tmpls\n: [\n    \nprojects/tasks/gdocs-sound.html\n,\n    \nprojects/tasks/gdocs-map.html\n,\n    \nprojects/tasks/gdocs-image.html\n,\n    \nprojects/tasks/gdocs-video.html\n,\n    \nprojects/tasks/gdocs-pdf.html\n\n  ],\n  \ntemplate\n: \n/projects/task_import_options.html\n,\n  \ntitle\n: \nProject: bevan \nmiddot; Import Tasks\n\n}\n\n\n\n\nTherefore, if you want to import tasks from a CSV link, you will have to\ndo the following GET:\n\n\nGET server/project/\nshort_name\n/tasks/import?type=csv\n\n\n\nThat query will return the same output as before, but instead of the\navailable_importers, you will get the the form fields and CSRF token\nfor that importer.\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\n\n\nExample output\n\n\n``` {.sourceCode .python}\n{\n  \nflash\n: \nTasks imported\n,\n  \nnext\n: \n/project/\n/tasks/\n,\n  \nstatus\n: \nsuccess\n\n}\n\n\n\n### Project tutorial\n\n**Endpoint: /project/\nlt;short\\_name\ngt;/tutorial**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **owner**: owner information\n-   **project**: project information\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  \nowner\n: {\n    \ncreated\n: \n2014-02-13T15:28:08.420187\n,\n    \nfullname\n: \nJohn Doe\n,\n    \ninfo\n: {\n      \navatar\n: \n1410769844.15_avatar.png\n,\n      \navatar_url\n: null,\n      \ncontainer\n: \nuser_3927\n,\n      \nextra\n: null\n    },\n    \nlocale\n: null,\n    \nn_answers\n: 43565,\n    \nname\n: \njdoe\n,\n    \nrank\n: 3,\n    \nregistered_ago\n: \n3 years ago\n,\n    \nscore\n: 43565\n  },\n  \nproject\n: {\n    \ncreated\n: \n2014-02-22T15:09:23.691811\n,\n    \ndescription\n: \nImage pattern recognition\n,\n    \nfeatured\n: true,\n    \nid\n: 1377,\n    \ninfo\n: {\n      \ncontainer\n: \nuser_3927\n,\n      \nthumbnail\n: \napp_1377_thumbnail_1410772569.58.png\n,\n      \nthumbnail_url\n: null\n    },\n    \nlast_activity\n: null,\n    \nlast_activity_raw\n: null,\n    \nn_tasks\n: null,\n    \nn_volunteers\n: null,\n    \nname\n: \nmyproject\n,\n    \noverall_progress\n: null,\n    \nowner\n: null,\n    \nshort_name\n: \njohndoeproject\n,\n    \nupdated\n: \n2017-03-02T21:00:33.965587\n\n  },\n  \ntemplate\n: \n/projects/tutorial.html\n,\n  \ntitle\n: \nProject: myproject\n\n}", 
            "title": "Api"
        }, 
        {
            "location": "/api/#restful-api", 
            "text": "The RESTful API is located at:  http://{pybossa-site-url}/api  It expects and returns JSON.  Some requests will need an  API-KEY  to authenticate   authorize the\noperation. You can get your API-KEY in your  profile  account.  The returned objects will have a  links  and  link  fields, not\nincluded in the model in order to support  Hypermedia as the Engine of\nApplication State  (also known as\nHATEOAS), so you can know which are the relations between objects.  All objects will return a field  link  which will be the absolute URL\nfor that specific object within the API. If the object has some parents,\nyou will find the relations in the  links  list. For example, for a\nTask Run you will get something like this:  ``` {.sourceCode .javascript}\n{ info : 65, user_id : null, links : [\n     ,\n     \n], task_id : 5894, created :  2012-07-07T17:23:45.714184 , finish_time :  2012-07-07T17:23:45.714210 , calibration : null, project_id : 90, user_ip :  X.X.X.X , link :  , timeout : null, id : 8969\n}  \nThe object link will have a tag **rel** equal to **self**, while the\nparent objects will be tagged with **parent**. The **title** field is\nused to specify the type of the object: task, taskrun or project.\n\nProjects will not have a **links** field, because these objects do not\nhave parents.\n\nTasks will have only one parent: the associated project.\n\nTask Runs will have only two parents: the associated task and associated\nproject.\n\nRate Limiting\n-------------\n\nRate Limiting has been enabled for all the API endpoints (since PYBOSSA\nv2.0.1). The rate limiting gives any user, using the IP, **a window of\n15 minutes to do at most 300 requests per endpoint**.\n\nThis new feature includes in the headers the following values to\nthrottle your requests without problems:\n\n-   **X-RateLimit-Limit**: the rate limit ceiling for that given request\n-   **X-RateLimit-Remaining**: the number of requests left for the 15\n    minute window\n-   **X-RateLimit-Reset**: the remaining window before the rate limit\n    resets in UTC epoch seconds\n\nWe recommend to use the Python package **requests** for interacting with\nPYBOSSA, as it is really simple to check those values:\n\n``` {.sourceCode .python}\nimport requests\nimport time\n\nres = requests.get('http://SERVER/api/project')\nif int(res.headers['X-RateLimit-Remaining'])   10:\n    time.sleep(300) # Sleep for 5 minutes\nelse:\n    pass # Do your stuff", 
            "title": "RESTful API"
        }, 
        {
            "location": "/api/#list", 
            "text": "List domain objects:  GET http://{pybossa-site-url}/api/{domain-object}  The API is context aware in the sense that if you ve an API-KEY and\nyou re authenticating the calls, then, the server will send you first\nyour own related data: projects, tasks, and task runs. You can get\naccess to all the projects, tasks, and task runs (the whole data base)\nusing the parameter:  all=1 .  For example, if an anonymous user access the generic api endpoints like:  GET http://{pybossa-site-url}/api/project  It will return all the projects from the DB, ordering them by ID. If you\naccess it like authenticating yourself:  GET http://{pybossa-site-url}/api/project?api_key=YOURKEY  Then, you will get your own list of projects. In other words, the\nprojects that you own. If you don t have a project, but you want to\nexplore the API then you can use the  all=1  argument:  GET http://{pybossa-site-url}/api/project?api_key=YOURKEY all=1  This call will return all the projects from the DB ordering by ID.  For example, you can get a list of your Projects like this:  GET http://{pybossa-site-url}/api/project\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY all=1  Or a list of available Categories:  GET http://{pybossa-site-url}/api/category  Or a list of Tasks:  GET http://{pybossa-site-url}/api/task\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY all=1  For a list of TaskRuns use:  GET http://{pybossa-site-url}/api/taskrun\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY all=1  Finally, you can get a list of users by doing:  GET http://{pybossa-site-url}/api/user", 
            "title": "List"
        }, 
        {
            "location": "/api/#order-by", 
            "text": "Any query can be ordered by an attribute of the domain object that you\nare querying. For example you can get a list of tasks ordered by ID:  GET http://{pybossa-site-url}/api/task?orderby=id  If you want, you can order them in descending order:  GET http://{pybossa-site-url}/api/task?orderby=id desc=true  Check all the attritbutes that you can use to order by in the  Domain\nObject section .  \n\nPlease, notice that in order to keep users privacy, only their locale and\n\n:   nickname will be shared by default. Optionally, users can disable\n    privacy mode in their settings. By doing so, also their fullname and\n    account creation date will be visible for everyone through the API.  \n\nBy default PYBOSSA limits the list of items to 20. If you want to get more\n\n:   items, use the keyword **limit=N** with **N** being a number to get\n    that amount. There is a maximum of 100 to the **limit** keyword, so\n    if you try to get more items at once it won't work.  \n\n**DEPRECATED (see next Note for a better and faster solution)**\n\n:   You can use the keyword **offset=N** in any **GET** query to skip\n    that many rows before beginning to get rows. If both **offset** and\n    **limit** appear, then **offset** rows are skipped before starting\n    to count the **limit** rows that are returned.  \n\nYou can paginate the results of any GET query using the last ID of the\n\n:   domain object that you have received and the parameter:\n    **last\\_id**. For example, to get the next 20 items after the last\n    project ID that you've received you will write the query like this:\n    GET /api/project?last\\_id={{last\\_id}}.", 
            "title": "Order by"
        }, 
        {
            "location": "/api/#related-data", 
            "text": "For Tasks, TaskRuns and Results you can get the associated data using\nthe argument:  related=True .  This flag will allow you to get in one call all the TaskRuns and Result\nfor a given task. You can do the same for a TaskRun getting the Task and\nassociated Result, and for a Result getting all the task_runs and\nassociated Task.  Projects do not have this feature, as it will be too expensive for the\nAPI.", 
            "title": "Related data"
        }, 
        {
            "location": "/api/#get", 
            "text": "Get a specific domain object by id (by default any GET action will\nreturn only 20 objects, you can get more or less objects using the limit  option). Returns domain object.:  GET http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]  \n\nSome GET actions may require to authenticate  &  authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.  If the object is not found you will get a JSON object like this:  ``` {.sourceCode .js}\n{\n     status :  failed ,\n     action :  GET ,\n     target :  project ,\n     exception_msg :  404 Not Found ,\n     status_code : 404,\n     exception_cls :  NotFound \n}  \nAny other error will return the same object but with the proper status\ncode and error message.\n\nSearch\n------\n\nGet a list of domain objects by its fields. Returns a list of domain\nobjects matching the query:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?domain-object-field=value]\n\nMultiple fields can be used separated by the ** ** symbol:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value field2=value2]\n\nIt is possible to limit the number of returned objects:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value limit=20]\n\nIt is possible to access first level JSON keys within the **info** field\nof Projects, Tasks, Task Runs and Results:\n\n    GET http://{pybossa-site-url}/api/{domain-object}[?field1=value info=foo::bar limit=20]\n\nTo search within the first level (nested keys are not supported), you\nhave to use the following format:\n\n    info=key::value\n\nFor adding more keys:\n\n    info=key1::value1|key2::value2|keyN::valueN\n\nThese parameters will be ANDs, so, it will return objects that have\nthose keys with and **and** operator.\n\nFull text search\n----------------\n\nIt is also possible to use full text search queries within those first\nlevel keys (as seen before). For searching like that all you have to do\nis adding the following argument:\n\n    info=key1::value1 fulltextsearch=1\n\nThat will return every object in the DB that has a key equal to key1 and\ncontains in the value the word value1.\n\nAnother option could be the following:\n\n    info=key1::value1|key2:word1%26word2 fulltextsearch=1\n\nThis second query will return objects that has the words word1 and\nword2. It's important to escape the   operator with %26 to use the and\noperator.\n\nWhen you use the fulltextsearch argument, the API will return the\nobjects enriched with the following two fields:  -   **headline**: The matched words of the key1::value1 found, with       lt;b gt; lt;/b gt; items to highlight them.  -   **rank**: The ranking returned by the database. Ranking attempts      to measure how relevant documents are to a particular query, so      that when there are many matches the most relevant ones can be      shown first.\n\nHere you have an example of the expected output for an api call like\nthis:\n\n    /api/task?project_id=1 info=name::ipsum%26bravo fulltextsearch=1 \n\n``` {.sourceCode .python}\n[\n  {\n     info : {\n       url :  https://domain.com/img.png ,\n       name :  Lore ipsum delta bravo ,\n    },\n     n_answers : 1,\n     quorum : 0,\n     links : [\n       link rel='parent' title='project' href='http://localhost:5000/api/project/1'/ \n    ],\n     calibration : 0,\n     headline :  Lore  b ipsum /b  delta  b bravo /b ,\n     created :  2016-05-10T11:20:45.005725 ,\n     rank : 0.05,\n     state :  completed ,\n     link :  link rel='self' title='task' href='http://localhost:5001/api/task/1'/ ,\n     project_id : 1,\n     id : 1,\n     priority_0 : 0\n  },\n]  \n\nWhen you use the fulltextsearch API the results are always sorted by\nrank, showing first the most relevant ones to your query.  \n\nWe use PostgreSQL ts\\_rank\\_cd with the following configuration:\nts\\_rank\\_cd(textsearch, query, 4). For more details check the official\ndocumentation of PostgreSQL.  \n\nBy default PYBOSSA uses English for the searches. You can customize this\nbehavior using any of the supported languages by PostgreSQL changing the\nsettings\\_local.py config variable: *FULLTEXTSEARCH\\_LANGUAGE* =\n'spanish'.  \n\nBy default all GET queries return a maximum of 20 objects unless the\n\n:   **limit** keyword is used to get more: limit=50. However, a maximum\n    amount of 100 objects can be retrieved at once.  \n\nIf the search does not find anything, the server will return an empty JSON\n\n:   list \\[\\]", 
            "title": "Get"
        }, 
        {
            "location": "/api/#create", 
            "text": "Create a domain object. Returns created domain object.:  POST http://{pybossa-site-url}/api/{domain-object}[?api_key=API-KEY]  \n\nSome POST actions may require to authenticate  &  authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.  If an error occurs, the action will return a JSON object like this:  ``` {.sourceCode .js}\n{\n     status :  failed ,\n     action :  POST ,\n     target :  project ,\n     exception_msg :  type object  Project  has no attribute  short_ame ,\n     status_code : 415,\n     exception_cls :  AttributeError \n}  \nWhere **target** will refer to a Project, Task or TaskRun object.\n\nUpdate\n------\n\nUpdate a domain object:\n\n    PUT http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY] div class= admonition note \n\nSome PUT actions may require to authenticate   authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**. /div \n\nIf an error occurs, the action will return a JSON object like this:\n\n``` {.sourceCode .js}\n{\n     status :  failed ,\n     action :  PUT ,\n     target :  project ,\n     exception_msg :  type object 'Project' has no attribute 'short_ame' ,\n     status_code : 415,\n     exception_cls :  AttributeError \n}  Where  target  will refer to a project, Task or TaskRun object.", 
            "title": "Create"
        }, 
        {
            "location": "/api/#delete", 
            "text": "Delete a domain object:  DELETE http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]  \n\nSome DELETE actions may require to authenticate  &  authorize the request. Use the\n\n:   ?api\\_key argument to pass the **API-KEY**.  If an error occurs, the action will return a JSON object like this:  ``` {.sourceCode .js}\n{\n     status :  failed ,\n     action :  DELETE ,\n     target :  project ,\n     exception_msg :  type object  Project  has no attribute  short_ame ,\n     status_code : 415,\n     exception_cls :  AttributeError \n}  \nWhere **target** will refer to a Project, Task or TaskRun object.\n\nFavorites\n---------\n\nAuthenticated users can mark a task as a favorite. This is useful for\nusers when they want to see all the tasks they have done to remember\nthem. For example, a user can mark as a favorite a picture that's\nbeautiful and that he/she has marked as favorited.\n\nFor serving this purpose PYBOSSA provides the following api endpoint:\n\n    GET /api/favorites\n\nIf the user is authenticated it will return all the tasks the user has\nmarked as favorited.\n\nTo add a task as a favorite, a POST should be done with a payload of\n{'task\\_id': Task.id}:\n\n    POST /api/favorites\n\nFor removing one task from the favorites, do a DELETE:\n\n    DEL /api/favorites/task.id\n\nBe sure to have always the user authenticated, otherwise the user will\nnot be able to see it.\n\nRequesting a new task for current user\n--------------------------------------\n\nYou can request a new task for the current user (anonymous or\nauthenticated) by:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask\n\nThis will return a domain Task object in JSON format if there is a task\navailable for the user, otherwise it will return **None**.\n\nYou can also use **limit** to get more than 1 task for the user like\nthis:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?limit=100\n\nThat query will return 100 tasks for the user. div class= admonition note \n\nThat's the maximum of tasks that a user can get at once. If you pass an argument of 200,\n\n:   PYBOSSA will convert it to 100. /div \n\nYou can also, use **offset** to get the next tasks, if you want,\nallowing you to preload:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?offset=1\n\nThat query will return the next task for the user, once it solves the\nprevious task.\n\nBoth arguments, limit and offset can be used together:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?limit=2offset=2\n\nThat will load the next two tasks for the user.\n\nAlso you can request the tasks to be sorted by a Task attribute (like\nID, created, etc.) using the following arguments: **orderby** and\n**desc** to sort them in descending order:\n\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?orderby=priority_0 desc=true\n\nThat query will return the tasks order by priority in descending order,\nin other words, it will return first the tasks with higher priority.\n\nRequesting the user's oAuth tokens\n----------------------------------\n\nA user who has registered or signed in with any of the third parties\nsupported by PYBOSSA (currently Twitter, Facebook and Google) can\nrequest his own oAuth tokens by doing:\n\n    GET http://{pybossa-site-url}/api/token?api_key=API-KEY\n\nAdditionally, the user can specify any of the tokens if only its\nretrieval is desired:\n\n    GET http://{pybossa-site-url}/api/token/{provider}?api_key=API-KEY\n\nWhere 'provider' will be any of the third parties supported, i.e.\n'twitter', 'facebook' or 'google'.\n\nUsing your own user database\n----------------------------\n\nSince version v2.3.0 PYBOSSA supports external User IDs. This means that\nyou can easily use your own database of users without having to\nregistering them in the PYBOSSA server. As a benefit, you will be able\nto track your own users within the PYBOSSA server providing a very\nsimple and easy experience for them.\n\nA typical case for this would be for example a native phone app\n(Android, iOS or Windows).\n\nUsually phone apps have their own user base. With this in mind, you can\nadd a crowdsourcing feature to your phone app by just using PYBOSSA in\nthe following way.\n\nFirst, create a project. When you create a project in PYBOSSA the system\nwill create for you a *secret key*. This secret key will be used by your\nphone app to authenticate all the requests and avoid other users to send\ndata to your project via external user API. div class= admonition note \n\nWe highly recommend using SSL on your server to secure all the process.\nYou can use Let's Encrypt certificates for free. Check their\n[documentation.](https://certbot.eff.org/) /div \n\nNow your phone app will have to authenticate to the server to get tasks\nand post task runs.\n\nTo do it, all you have to do is to create an HTTP Request with an\nAuthorization Header like this:\n\n    HEADERS Authorization: project.secret_key\n    GET http://{pybossa-site-url}/api/auth/project/short_name/token\n\nThat request will return a JWT token for you. With that token, you will\nbe able to start requesting tasks for your user base passing again an\nauthorization header. Imagine a user from your database is identified\nlike this: '1xa':\n\n    HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n    GET http://{pybossa-site-url}/api/{project.id}/newtask?external_uid=1xa\n\nThat will return a task for the user ID 1xa that belongs to your\ndatabase but not to PYBOSSA. Then, once the user has completed the task\nyou will be able to submit it like this:\n\n    HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n    POST http://{pybossa-site-url}/api/taskrun div class= admonition note \n\nThe TaskRun object needs to have the external\\_uid field filled with\n1xa. /div \n\nAs simple as that!\n\nDisqus Single Sign On (SSO)\n---------------------------\n\nIf the PYBOSSA server is configured with Disqus SSO keys (see disqus),\nthen you can get the authentication parameters in this endpoint:\n*api/disqus/sso*\n\nThe endpoint will return a JSON object with two keys: *api\\_key* and\n*remote\\_auth\\_s3*. Use those values to authenticate the user in Disqus.\nCheck their official [documentation]().\n\nUser api endpoint ----------------\n\nWhile all the other endpoints behave the same, this one is a bit special\nas we deal with private information like emails.\n\n### Anonymous users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Update an existing user via a PUT\n3.  Delete an existing user via a DEL\n\nRead action will only return user name and locale for that user.\n\n### Authenticated users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Update an existing user via a PUT different than the same user\n3.  Delete an existing user via a DEL\n\nRead action will only return user name and locale for that user. If the\nuser access its own page, then all the information will be available to\nhim/her.\n\n### Admin users\n\nThe following actions cannot be done:\n\n1.  Create a new user via a POST\n2.  Delete an existing user via a DEL\n\nRead action can be done on any user. The admins will have access to the\nUser IDs. This will be helpful in case that you want to give, for\nexample badges, for users when using our webhooks solution. Each user\nhas in the info field a new field named **extra** where that information\n(or anything else) could be stored.\n\nCommand line Example Usage of the API\n-------------------------------------\n\nCreate a Project object:\n\n``` {.sourceCode .bash}\ncurl -X POST -H  Content-Type:application/json  -s -d '{ name : myproject ,  info :{ xyz :1}}' 'http://localhost:5000/api/project?api_key=API-KEY'", 
            "title": "Delete"
        }, 
        {
            "location": "/api/#pybossa-endpoints", 
            "text": "The following endpoints of PYBOSSA server can be requested setting the\nheader  Content-Type  to  application/json  so you can retrieve the data\nusing JavaScript.  \n\nIf a key has the value **null** is because, that view is not populating\nthat specific field. However, that value should be retrieved in a\ndifferent one. Please, see all the documentation.", 
            "title": "PYBOSSA endpoints"
        }, 
        {
            "location": "/api/#account-index", 
            "text": "Endpoint: /account/page/ int:page  Allowed methods :  GET  GET  It returns a JSON object with the following information:   accounts : this key holds the list of accounts for the given\n    page.  pagination : this key holds the pagination information.  top_users : this key holds the top users (including the user if\n    authenticated) with their rank and scores.  update_feed : the latest actions in the server (users created,\n    contributions, new tasks, etc.).  template : the Jinja2 template that should be rendered in case of\n    text/html.  title : the title for the endpoint.   Example output  ``` {.sourceCode .python}\n{\n   accounts : [\n    {\n       created :  2015-06-10T15:02:38.411497 ,\n       fullname :  Scifabric ,\n       info : {\n         avatar :  avatar.png ,\n         container :  user_234234dd3 \n      },\n       locale : null,\n       name :  Scifabric ,\n       rank : null,\n       registered_ago :  1 year ago ,\n       score : null,\n       task_runs : 3\n    },\n  ],\n   pagination : {\n     next : true,\n     page : 3,\n     per_page : 24,\n     prev : true,\n     total : 11121\n  },\n   template :  account/index.html ,\n   title :  Community ,\n   top_users : [\n    {\n       created :  2014-08-17T18:28:56.738119 ,\n       fullname :  Buzz Bot ,\n       info : {\n         avatar :  avatar.png ,\n         container :  user_55 \n      },\n       locale : null,\n       name :  buzzbot ,\n       rank : 1,\n       registered_ago : null,\n       score : 54247,\n       task_runs : null\n    },\n  ],\n   total : 11121,\n   update_feed : []\n}  \n### Account registration\n\n**Endpoint: /account/register**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **form**: The form fields that need to be sent for creating an\n    account. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title of the page.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   form : {\n     confirm : null,\n     csrf :  token, \n     email_addr : null,\n     errors : {},\n     fullname : null,\n     name : null,\n     password : null\n  },\n   template :  account/register.html ,\n   title :  Register \n}  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   next : URL that you JavaScript can follow as a redirect. It is\n    not mandatory.   Example output  ``` {.sourceCode .python}\n{\n     next : /about \n}  \nIf there's an error in the form fields, you will get them in the\n**form.errors** key:\n\n``` {.sourceCode .python}\n{\n   form : {\n     confirm :  daniel ,\n     csrf :  token ,\n     email_addr :  daniel ,\n     errors : {\n       email_addr : [\n         Invalid email address. \n      ],\n       name : [\n         The user name is already taken \n      ]\n    },\n     fullname :  daniel ,\n     name :  daniel ,\n     password :  daniel \n  },\n   template :  account/register.html ,\n   title :  Register \n}  If email confirmation is required for registering you will get this\naccount validation result when all input data is correct. Note: Keep in\nmind that account is not created fully until the user confirmed his\nemail.  ``` {.sourceCode .python}\n{\n   status :  sent ,\n   template :  account/account_validation.html ,\n   title :  Account validation \n}  \n### Account sign in\n\n**Endpoint: /account/signin**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **auth**: list of supported authentication methods using different\n    social networks like Google, Facebook and Twitter.\n-   **form**: the form fields that need to be sent for signing a user.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   auth : {\n     facebook : true,\n     google : true,\n     twitter : true\n  },\n   form : {\n     csrf :  token ,\n     email : null,\n     errors : {},\n     password : null\n  },\n   next : null,\n   template :  account/signin.html ,\n   title :  Sign in \n}  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.   Example output  ``` {.sourceCode .python}\n{\n   auth : {\n     facebook : true,\n     google : true,\n     twitter : true\n  },\n   flash :  Please correct the errors ,\n   form : {\n     csrf :  token ,\n     email :  prueba@prueba.com ,\n     errors : {\n       password : [\n         You must provide a password \n      ]\n    },\n     password :  \n  },\n   next : null,\n   status :  error ,\n   template :  account/signin.html ,\n   title :  Sign in \n}  \nIf the login is successful, then, you will get something like this:\n\n``` {.sourceCode .python}\n{\n   flash :  Welcome back John Doe ,\n   next :  / ,\n   status :  success \n}", 
            "title": "Account index"
        }, 
        {
            "location": "/api/#account-sign-out", 
            "text": "Endpoint: /account/signout  Allowed methods :  GET  It returns a JSON object with the following information:   next : suggested redirection after the sign out.  message : message displaying success for sign out.", 
            "title": "Account sign out"
        }, 
        {
            "location": "/api/#account-recover-password", 
            "text": "Endpoint: /account/forgot-password  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for creating an\n    account. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.   Example output  ``` {.sourceCode .python}\n{\n   form : {\n     csrf :  token, \n     email_addr : null\n  },\n   template :  account/password_forgot.html \n}  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **form**: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash : [\n     We don't have this email in our records. You may have signed up with a different email or used Twitter, Facebook, or Google to sign-in \n  ],\n   form : {\n     csrf :  1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31 ,\n     email_addr :  algo@algo.com ,\n     errors : {}\n  },\n   template :  /account/password_forgot.html \n}  If there s an error in the form fields, you will get them in the form.errors  key:  ``` {.sourceCode .python}\n{\n   flash :  Something went wrong, please correct the errors on the form ,\n   form : {\n     csrf :  1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4 ,\n     email_addr :  algoom ,\n     errors : {\n       email_addr : [\n         Invalid email address. \n      ]\n    }\n  },\n   template :  /account/password_forgot.html \n}  \n### Account name\n\n\\*\\*Endpoint: /account/ lt;name gt;\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **projects\\_contrib**: a list of projects the user has contributed\n    too.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n-   **user**: User information, including fullname, rank etc.\n\n**Example output**\n\nIf you are not logged in or requesting details of another user you will\nonly get public viewable information. If you are logged in you will also\nget private information in the user field. Sample output of public\ninformation:\n\n``` {.sourceCode .python}\n{\n     projects_contrib : [\n        {\n             description :  this is a project ,\n             info : {\n                 container :  123 ,\n                 thumbnail :  thumbnailx \n            },\n             n_tasks : 4,\n             n_volunteers : 0,\n             name :  test12334 ,\n             overall_progress : 0,\n             short_name :  test12334 \n        }\n    ],\n     projects_created : [\n        {\n             description :  Youtube 1 ,\n             info : {\n                 container :  345 ,\n                 thumbnail :  thumbnaily \n            },\n             n_tasks : 15,\n             n_volunteers : 0,\n             name :  JohnDoe Youtube 1 ,\n             overall_progress : 0,\n             short_name :  johnyoutube1 \n        },\n    ]\n     template :  /account/public_profile.html ,\n     title :  John  middot; User Profile ,\n     user : {\n         fullname :  Joen Doe ,\n         info : {\n             container :  user_4953 \n        },\n         n_answers : 56,\n         name :  JohnDoe ,\n         rank : 1813,\n         score : 56\n    }\n}  Example of logged in user:  ``` {.sourceCode .python}\n{\n     \n     user : {\n         api_key :  aa3ee485-896d-488a-83f7-88a29bf45171 ,\n         confirmation_email_sent : false,\n         created :  2014-08-11T08:59:32.079599 ,\n         email_addr :  johndoe@johndoe.com ,\n         facebook_user_id : null,\n         fullname :  John Doe ,\n         google_user_id : null,\n         id : 4953,\n         info : {\n             container :  user_4953 \n        },\n         n_answers : 56,\n         name :  JohnDoe ,\n         rank : 1813,\n         registered_ago :  2 years ago ,\n         score : 56,\n         total : 10046,\n         twitter_user_id : null,\n         valid_email : true\n    }\n}  \n### Account profile\n\n\\*\\*Endpoint: /account/profile\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIf logged in you will get the same information as on\n/account/ lt;name gt; (see above). If you are not logged in you will get\nthe following example output\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   next :  /account/signin ,\n   status :  not_signed_in \n}", 
            "title": "Account recover password"
        }, 
        {
            "location": "/api/#account-projects", 
            "text": "Endpoint: /account/ name /projects  Allowed methods :  GET  GET  The user needs to be logged in. It returns a JSON object with the\nfollowing information:   projects_draft : a list of draft projects of the user.  projects_published : a list of published projects of the user.  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output  ``` {.sourceCode .python}\n{\n   projects_draft : [\n    {\n       description :  This should be the Youtube Project ,\n       id : 3169,\n       info : {\n         task_presenter :  \n      },\n       n_tasks : 0,\n       n_volunteers : 0,\n       name :  Youtube_Test1 ,\n       overall_progress : 0,\n       owner_id : 4953,\n       short_name :  youtube_test1 \n    },\n     \n  ],\n   projects_published : [\n    {\n       description :  Youtube 1 ,\n       id : 3206,\n       info : {\n         results :  ,\n         task_presenter :  .. \n         tutorial :  \n      },\n       n_tasks : 15,\n       n_volunteers : 0,\n       name :  Youtube 1 ,\n       overall_progress : 0,\n       owner_id : 4953,\n       short_name :  youtube1 \n    },\n     \n  ],\n   template :  account/projects.html ,\n   title :  Projects \n}  \n### Account update profile\n\n**Endpoint: /account/ lt;name gt;/update**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **form**: the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n-   **password\\_form**: the form fields that need to be sent for\n    updating the account's password. It contains the csrf token for\n    validating the post, as well as an errors field in case that\n    something is wrong.\n-   **upload\\_form**: the form fields that need to be sent for updating\n    the account's avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash : null,\n   form : {\n     ckan_api : null,\n     csrf :  token ,\n     email_addr :  email@emai.com ,\n     errors : {},\n     fullname :  John Doe ,\n     id : 0,\n     locale :  en ,\n     name :  johndoe ,\n     privacy_mode : true,\n     subscribed : true\n  },\n   password_form : {\n     confirm : null,\n     csrf :  token ,\n     current_password : null,\n     errors : {},\n     new_password : null\n  },\n   show_passwd_form : true,\n   template :  /account/update.html ,\n   title :  Update your profile: John Doe ,\n   upload_form : {\n     avatar : null,\n     csrf :  token ,\n     errors : {},\n     id : null,\n     x1 : 0,\n     x2 : 0,\n     y1 : 0,\n     y2 : 0\n  }\n}  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  As this endpoint supports  three  different forms, you must specify\nwhich form are you targetting adding an extra key:  btn . The options\nfor this key are:   Profile : to update the  form .  Upload : to update the\n     upload_form .  Password : to update the  password_form .\n     External : to update the  form  but only the external services.   \n\nBe sure to respect the Uppercase in the first letter, otherwise it will\nfail.  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.   Example output  ``` {.sourceCode .python}\n{\n   flash :  Your profile has been updated! ,\n   next :  /account/pruebaadfadfa/update ,\n   status :  success \n}  \nIf there's an error in the form fields, you will get them in the\n**form.errors** key:\n\n``` {.sourceCode .python}\n{\n   flash :  Please correct the errors ,\n   form : {\n     ckan_api : null,\n     csrf :  token ,\n     email_addr :  pruebaprueba.com ,\n     errors : {\n       email_addr : [\n         Invalid email address. \n      ]\n    },\n     fullname :  prueba de json ,\n     id : 0,\n     locale :  es ,\n     name :  pruebaadfadfa ,\n     privacy_mode : true,\n     subscribed : true\n  },\n   password_form : {\n     confirm :  ,\n     csrf :  token ,\n     current_password :  ,\n     errors : {},\n     new_password :  \n  },\n   show_passwd_form : true,\n   template :  /account/update.html ,\n   title :  Update your profile: John Doe ,\n   upload_form : {\n     avatar :  ,\n     csrf :  token ,\n     errors : {},\n     id : 0,\n     x1 : 0,\n     x2 : 0,\n     y1 : 0,\n     y2 : 0\n  }\n}  \n\nFor updating the avatar is very important to not set the *Content-Type*. If you\n\n:   are using jQuery, set it to False, so the file is handled properly.\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n(x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop.", 
            "title": "Account projects"
        }, 
        {
            "location": "/api/#account-reset-password", 
            "text": "Endpoint: /account/reset-password  Allowed methods :  GET/POST  GET  Required arguments :  key  a string required to validate the link for\nupdating the password of the user. This key is sent to the user via\nemail after requesting to reset the password.  It returns a JSON object with the following information:   form : the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.   Example output  ``` {.sourceCode .python}\n{\n   form : {\n     confirm : null,\n     csrf :  token ,\n     current_password : null,\n     errors : {},\n     new_password : null\n  },\n   template :  /account/password_reset.html  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **status**: A status message, indicating if something went wrong.\n-   **next**: Suggested URL to redirect the user.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    u'status': u'success',\n    u'flash': u'You reset your password successfully!',\n    u'next': u'/'\n}", 
            "title": "Account reset password"
        }, 
        {
            "location": "/api/#account-reset-api-key", 
            "text": "Endpoint: /account/ user /resetapikey  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   csrf : The CSRF token for validating the post.   Example output  ``` {.sourceCode .python}\n{\n     form :\n        {\n             csrf :  token ,\n        }\n}  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **status**: A status message, indicating if something went wrong.\n-   **next**: Suggested URL to redirect the user.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n    u'status': u'success',\n    u'flash': u'New API-KEY generated',\n    u'next': u'/account/ user '\n}", 
            "title": "Account reset API Key"
        }, 
        {
            "location": "/api/#account-subscribe-to-newsletter", 
            "text": "**Endpoint: /account/newsletter  Allowed methods :  GET  GET  It returns a JSON object with the following information:   template : The template that Jinja2 will render.  title : The title of the endpoint.  next : The next URL.   Example output  ``` {.sourceCode .python}\n{\n     template :  account/newsletter.html ,\n     title :  Subscribe to our Newsletter ,\n     next :  / \n}  \nIf you want to subscribe a user, then you have to call the same endpoint\nwith the following argument: *subscribe=true*\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n     flash :  You are subscribed to our newsletter ,\n     status :  success ,\n     next :  / \n}", 
            "title": "Account subscribe to newsletter"
        }, 
        {
            "location": "/api/#account-confirm-email", 
            "text": "Endpoint: /account/confirm-email  Allowed methods :  GET  GET  If account validation is enabled, then, using this endpoint the user\nwill receive an email to validate its account. It returns a JSON object\nwith the following information:   flash : A message stating that an email has been sent.  status : The status of the call.  next : The next url.   Example output  ``` {.sourceCode .python}\n{\n     flash :  Ane email has been sent to validate your e-mail address. ,\n     status :  info ,\n     next :  /account/ / \n}  \n### Home\n\n**Endpoint: /**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **top\\_projects**: A list of the most active projects.\n-   **categories\\_projects**: A dictionary with all the published\n    categories and its associated projects.\n-   **categories**: All the available categories.\n-   **template**: Jinja2 template.\n-   **top\\_users**: List of top contributors.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   categories : [\n    {\n       created : null,\n       description : null,\n       id : null,\n       name :  Featured ,\n       short_name :  featured \n    },\n    {\n       description :  Economic projects ,\n       id : 6,\n       name :  Economics ,\n       short_name :  economics \n    },\n  ],\n   categories_projects : {\n     economics : [\n      {\n         description :  Description ,\n         info : {\n           container :  user ,\n           thumbnail :  415602833.png \n        },\n         n_tasks : 18,\n         n_volunteers : 26,\n         name :  Man made objects identity ,\n         overall_progress : 0,\n         short_name :  manmadeobjectsidentity \n      },\n    ],\n  },\n   template :  /home/index.html ,\n   top_projects : [\n    {\n       description :  Image pattern recognition ,\n       info : {\n         container :  user ,\n         thumbnail :  772569.58.png \n      },\n       n_tasks : null,\n       n_volunteers : 17499,\n       name :  Name ,\n       overall_progress : null,\n       short_name :  name \n    },\n  ],\n   top_users : [\n    {\n       created :  2014-08-17T18:28:56.738119 ,\n       fullname :  John Doe ,\n       info : {\n         avatar :  1410771tar.png ,\n         container :  05 \n      },\n       n_answers : null,\n       name :  johndoe ,\n       rank : 1,\n       registered_ago : null,\n       score : 54247\n    },\n  ]\n}", 
            "title": "Account confirm email"
        }, 
        {
            "location": "/api/#project-shortname", 
            "text": "Endpoint: /project/ short_name /  Allowed methods :  GET  GET  Shows project information and owner information.  If you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template.  title : the title for the endpoint.   Example output  for logged in user JohnDoe:  ``` {.sourceCode .python}\n{\n   last_activity :  2015-01-21T12:01:41.209270 ,\n   n_completed_tasks : 0,\n   n_task_runs : 3,\n   n_tasks : 8,\n   n_volunteers : 1,\n   overall_progress : 0,\n   owner : {\n     api_key :  akjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1 ,\n     confirmation_email_sent : false,\n     created :  2014-08-11T08:59:32.079599 ,\n     email_addr :  johndoe@johndoe.com ,\n     facebook_user_id : null,\n     fullname :  John Doe ,\n     google_user_id : null,\n     id : 1234,\n     info : {\n       container :  user_1234 \n    },\n     n_answers : 56,\n     name :  JohnDoe ,\n     rank : 1813,\n     registered_ago :  2 years ago ,\n     score : 56,\n     total : 11093,\n     twitter_user_id : null,\n     valid_email : true\n  },\n   pro_features : {\n     auditlog_enabled : true,\n     autoimporter_enabled : true,\n     webhooks_enabled : true\n  },\n   project : {\n     allow_anonymous_contributors : true,\n     category_id : 2,\n     contacted : true,\n     contrib_button :  can_contribute ,\n     created :  2015-01-21T11:59:36.519541 ,\n     description :  flickr678 ,\n     featured : false,\n     id : 4567,\n     info : {\n       task_presenter :   ....  \n    },\n     long_description :  flickr678\\r\\n ,\n     n_blogposts : 0,\n     n_results : 0,\n     name :  flickr678 ,\n     owner_id : 9876,\n     published : true,\n     secret_key :  veryverysecretkey ,\n     short_name :  flickr678 ,\n     updated :  2016-04-13T08:07:38.897626 ,\n     webhook : null\n  },\n   template :  /projects/project.html ,\n   title :  Project: flickr678 \n}  \nAnonymous and other user output:\n\n``` {.sourceCode .python}\n{\n   last_activity :  2015-01-21T12:01:41.209270 ,\n   n_completed_tasks : 0,\n   n_task_runs : 3,\n   n_tasks : 8,\n   n_volunteers : 1,\n   overall_progress : 0,\n   owner : {\n     created :  2014-08-11T08:59:32.079599 ,\n     fullname :  John Doe ,\n     info : {\n       avatar : null,\n       container :  user_4953 \n    },\n     n_answers : 56,\n     name :  JohnDoe ,\n     rank : 1813,\n     registered_ago :  2 years ago ,\n     score : 56\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     webhooks_enabled : false\n  },\n   project : {\n     created :  2015-01-21T11:59:36.519541 ,\n     description :  flickr678 ,\n     id : 4567,\n     info : {\n       container : null,\n       thumbnail : null\n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  flickr678 ,\n     overall_progress : null,\n     owner : null,\n     short_name :  flickr678 ,\n     updated :  2016-04-13T08:07:38.897626 \n  },\n   template :  /projects/project.html ,\n   title :  Project: flickr678 \n}", 
            "title": "Project shortname"
        }, 
        {
            "location": "/api/#project-settings", 
            "text": "Endpoint: /project/ short_name /settings  Allowed methods :  GET  GET  Shows project information and owner information. Only works for\nauthenticated users for their own projects (or admins). Anonymous users\nwill get a 302 to login page. Logged in users with access rights will\nget a 403 when it s not their own project.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template.  title : the title for the endpoint.   The example output matches  /project/ short_name /", 
            "title": "Project settings"
        }, 
        {
            "location": "/api/#project-results", 
            "text": "Endpoint: /project/ short_name /results  Allowed methods :  GET  GET  Shows information about a project results template. If the logged in\nuser is the owner of the project you will get more detailed owner\ninformation and project information.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_results : Number of results  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template for results  title : the title for the endpoint.   Example output  for anonymous user or when you are not the project owner:  ``` {.sourceCode .python}\n{\n   last_activity :  2015-01-21T12:01:41.209270 ,\n   n_completed_tasks : 0,\n   n_results : 0,\n   n_task_runs : 3,\n   n_tasks : 8,\n   n_volunteers : 1,\n   overall_progress : 0,\n   owner : {\n     created :  2014-08-11T08:59:32.079599 ,\n     fullname :  John ,\n     info : {\n       avatar : null,\n       container :  user_4953 \n    },\n     n_answers : 56,\n     name :  JohnDoe ,\n     rank : 1813,\n     registered_ago :  2 years ago ,\n     score : 56\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     webhooks_enabled : false\n  },\n   project : {\n     created :  2015-01-21T11:59:36.519541 ,\n     description :  flickr678 ,\n     featured : false,\n     id : 2417,\n     info : {\n       container : null,\n       thumbnail : null\n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  flickr678 ,\n     overall_progress : null,\n     owner : null,\n     short_name :  flickr678 ,\n     updated :  2016-04-13T08:07:38.897626 \n  },\n   template :  /projects/results.html ,\n   title :  Project: flickr678 \n}  \n### Project stats\n\n**Endpoint: /project/ lt;short\\_name gt;/stats**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows project statistics if available.\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n-   **avg\\_contrib\\_time**: Average contribution time (NOT existing when\n    no statistics there!).\n-   **projectStats**: Project statistics (NOT existing when no\n    statistics there!).\n-   **userStats**: User statistics (NOT existing when no statistics\n    there!).\n-   **n\\_completed\\_tasks**: Number of completed tasks.\n-   **n\\_tasks**: Number of tasks.\n-   **n\\_volunteers**: Number of volunteers.\n-   **overall\\_progress**: Progress (0..100).\n-   **owner**: Owner user information\n-   **pro\\_features**: Enabled pro features for the project.\n-   **project**: Project information\n-   **template**: Jinja2 template.\n-   **title**: the title for the endpoint.\n\n**Example output** Statistics are existing in this output:\n\n``` {.sourceCode .python}\n{\n   avg_contrib_time : 0,\n   n_completed_tasks : 2,\n   n_tasks : 2,\n   n_volunteers : 59,\n   overall_progress : 100,\n   owner : {\n     created :  2012-06-06T06:27:18.760254 ,\n     fullname :  Daniel Lombra\u00f1a Gonz\u00e1lez ,\n     info : {\n       avatar :  1422360933.8_avatar.png ,\n       container :  user_3 \n    },\n     n_answers : 2998,\n     name :  teleyinex ,\n     rank : 66,\n     registered_ago :  4 years ago ,\n     score : 2998\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     better_stats_enabled : true,\n     webhooks_enabled : false\n  },\n   project : {\n     created :  2013-01-10T19:58:55.454015 ,\n     description :  Facial expressions that convey feelings ,\n     featured : true,\n     id : 253,\n     info : {\n       container :  user_3 ,\n       thumbnail :  project_253_thumbnail_1460620575.png \n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  The Face We Make ,\n     overall_progress : null,\n     owner : null,\n     short_name :  thefacewemake ,\n     updated :  2016-04-14T07:56:16.114006 \n  },\n   projectStats :  {\\ userAuthStats\\ : {\\ top5\\ : [], \\ values\\ : [], \\ label\\ : \\ Authenticated Users\\ } ... ,\n   template :  /projects/stats.html ,\n   title :  Project: The Face We Make  middot; Statistics ,\n   userStats : {\n     anonymous : {\n       pct_taskruns : 0,\n       taskruns : 0,\n       top5 : [],\n       users : 0\n    },\n     authenticated : {\n       pct_taskruns : 0,\n       taskruns : 0,\n       top5 : [],\n       users : 0\n    },\n     geo : false\n  }\n}", 
            "title": "Project results"
        }, 
        {
            "location": "/api/#project-tasks", 
            "text": "Endpoint: /project/ short_name /tasks  Allowed methods :  GET  GET  Shows project tasks.  If you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.   autoimporter_enabled : If autoimporter is enabled.  last_activity : Last activity.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Progress (0..100).  owner : Owner user information  pro_features : Enabled pro features for the project.  project : Project information.  template : Jinja2 template.  title : the title for the endpoint.   Example output  for another project where you are not the owner:  ``` {.sourceCode .python}\n{\n   autoimporter_enabled : true,\n   last_activity :  2017-03-02T21:00:33.627277 ,\n   n_completed_tasks : 184839,\n   n_task_runs : 1282945,\n   n_tasks : 193090,\n   n_volunteers : 20016,\n   overall_progress : 95,\n   owner : {\n     created :  2014-02-13T15:28:08.420187 ,\n     fullname :  John Smith ,\n     info : {\n       avatar :  1410769844.15_avatar.png ,\n       container :  user_3927 ,\n       extra : null\n    },\n     locale : null,\n     n_answers : 43565,\n     name :  pmisson ,\n     rank : 3,\n     registered_ago :  3 years ago ,\n     score : 43565\n  },\n   pro_features : {\n     auditlog_enabled : true,\n     autoimporter_enabled : true,\n     webhooks_enabled : true\n  },\n   project : {\n     created :  2014-02-22T15:09:23.691811 ,\n     description :  Image pattern recognition ,\n     featured : true,\n     id : 1377,\n     info : {\n       container :  user_3927 ,\n       thumbnail :  app_1377_thumbnail_1410772569.58.png \n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  Cool Project ,\n     overall_progress : null,\n     owner : null,\n     short_name :  coolproject ,\n     updated :  2017-03-02T21:00:33.965587 \n  },\n   template :  /projects/tasks.html ,\n   title :  Project: Cool project \n}  \n### Project task id\n\n**Endpoint: /project/ lt;short\\_name gt;/task/ lt;int:task\\_id gt;**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows a project task based on id.\n\nIf you are not the owner of the project or anonymous then you will get\nonly public available information for the owner and the project itself.\n\n-   **owner**: Owner user information\n-   **project**: Project information.\n-   **template**: Jinja2 template of the task HTML template.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\nfor another project where you are not the owner:\n\n``` {.sourceCode .python}\n{\n   owner : {\n     created :  2014-08-11T08:59:32.079599 ,\n     fullname :  John Doe ,\n     info : {\n       avatar :  1458638093.9_avatar.png ,\n       container :  user_4953 ,\n       extra : null\n    },\n     locale : null,\n     n_answers : 257,\n     name :  JohnD ,\n     rank : 840,\n     registered_ago :  2 years ago ,\n     score : 257\n  },\n   project : {\n     created :  2015-01-21T11:59:36.519541 ,\n     description :  flickr678 ,\n     featured : false,\n     id : 2417,\n     info : {\n       container : null,\n       thumbnail : null\n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  flickr678 ,\n     overall_progress : null,\n     owner : null,\n     short_name :  flickr678 ,\n     updated :  2017-03-22T13:03:55.496660 \n  },\n   template :  /projects/presenter.html ,\n   title :  Project: flickr678  middot; Contribute \n}", 
            "title": "Project tasks"
        }, 
        {
            "location": "/api/#leaderboard", 
            "text": "Endpoint: /leaderboard/  Allowed methods :  GET  GET  Shows you the top 20 contributors rank in a sorted leaderboard. If you\nare logged in you will also get the rank of yourself even when you are\nnot visible on the top public leaderboard.   template : Jinja2 template.  title : the title for the endpoint.  top_users : Sorted list of leaderboard top users.   Example output  for logged in user JohnDoe (normally not visible in public leaderboard):  ``` {.sourceCode .python}\n{\n     template :  /stats/index.html ,\n     title :  Community Leaderboard ,\n     top_users : [\n        {\n             created :  2014-08-17T18:28:56.738119 ,\n             fullname :  Buzz Bot ,\n             info : {\n                 avatar :  1410771548.09_avatar.png ,\n                 container :  user_5305 \n            },\n             n_answers : null,\n             name :  buzzbot ,\n             rank : 1,\n             registered_ago : null,\n             score : 54259\n        },\n          ,\n        {\n             created :  2014-08-11T08:59:32.079599 ,\n             fullname :  JohnDoe ,\n             info : {\n                 avatar : null,\n                 container :  user_4953 \n            },\n             n_answers : null,\n             name :  JohnDoe ,\n             rank : 1813,\n             registered_ago : null,\n             score : 56\n        }\n    ]\n}  \n### Announcements\n\n**Endpoint: /announcements/**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nShows you PYBOSSA wide announcements\n\n-   **announcements**: Announcements\n-   **template**: the rendered Announcements tamplate (currently empty)\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n     announcements : [\n        {\n             body :  test123 ,\n             created :  2017-05-31T15:23:44.858735 ,\n             id : 5,\n             title :  title123 ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-05-31T15:23:28.477516 ,\n             id : 4,\n             title :  blogpost title ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-06-01T23:42:45.042010 ,\n             id : 7,\n             title :  blogpost title ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-06-01T23:45:11.612801 ,\n             id : 8,\n             title :  blogpost title ,\n             user_id : 4953\n        }\n    ],\n     template :  \n}", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/api/#admin-announcement", 
            "text": "Endpoint: /admin/announcement  GET  Shows you PYBOSSA wide announcements   announcements : Announcements  csrf : csrf token  template : the rendered Announcements tamplate (currently empty)  title : title of rendered endpoint   Example output  ``` {.sourceCode .python}\n{\n     announcements : [\n        {\n             body :  test123 ,\n             created :  2017-05-31T15:23:44.858735 ,\n             id : 5,\n             title :  title123 ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-05-31T15:23:28.477516 ,\n             id : 4,\n             title :  blogpost title ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-06-01T23:42:45.042010 ,\n             id : 7,\n             title :  blogpost title ,\n             user_id : 4953\n        },\n        {\n             body :  new body ,\n             created :  2017-06-01T23:45:11.612801 ,\n             id : 8,\n             title :  blogpost title ,\n             user_id : 4953\n        }\n    ],\n   csrf :  1496394861.12##1bfcbb386bae5d1625c023a23b08865b4176579d ,\n   template :  ,\n   title :  Manage global Announcements \n}  \n### Admin announcement new\n\n**Endpoint: /admin/announcement/new**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nCreates a new PYBOSSA wide announcement\n\n-   **form**: form input\n-   **template**: the rendered Announcements tamplate (currently empty)\n-   **title**: title of rendered endpoint\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   form : {\n     body : null,\n     csrf :  1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a ,\n     errors : {},\n     title : null\n  },\n   template :  ,\n   title :  Write a new post \n}  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken . On success you will\nget a 200 http code and following output:  Example output  ``` {.sourceCode .python}\n{\n   flash :   Annnouncement created! ,\n   next :  /admin/announcement ,\n   status :  success \n}  \n### Admin announcement update\n\n**Endpoint: /admin/announcement/ lt;id gt;/update**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nUpdates a PYBOSSA announcement\n\n-   **form**: form input\n-   **template**: the rendered Announcements tamplate (currently empty)\n-   **title**: title of rendered endpoint\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   form : {\n     body :  test6 ,\n     csrf :  1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6 ,\n     errors : {},\n     id : 4,\n     title :  test6 \n  },\n   template :  ,\n   title :  Edit a post \n}  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken . On success you will\nget a 200 http code and following output:  Example output  ``` {.sourceCode .python}\n{\n   flash :   Announcement updated! ,\n   next :  /admin/announcement ,\n   status :  success \n}  \n### Admin announcement delete\n\n**Endpoint: /admin/announcement/ lt;id gt;/delete**\n\n*Allowed methods*: **POST**\n\nDeletes a PYBOSSA announcement\n\n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken . You can get the token\nfrom /admin/announcement On success you will get a 200 http code and\nfollowing output:\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  i class=\\ icon-ok\\ /i  Announcement deleted! ,\n   next :  /admin/announcement ,\n   status :  success \n}", 
            "title": "Admin announcement"
        }, 
        {
            "location": "/api/#admin-users", 
            "text": "Endpoint: /admin/users  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : A form for searching for users.  found : A list of found users according to a search.  template : Jinja2 template.  users : List of admin users.   Example output  ``` {.sourceCode .python}\n{\n   form : {\n     csrf :  token ,\n     errors : {},\n     user : null\n  },\n   found : [],\n   template :  /admin/users.html ,\n   title :  Manage Admin Users ,\n   users : [\n    {\n       admin : true,\n       api_key :  key ,\n       category : null,\n       ckan_api : null,\n       confirmation_email_sent : false,\n       created :  date ,\n       email_addr :  email ,\n       facebook_user_id : null,\n       flags : null,\n       fullname :  John Doe ,\n       google_user_id : null,\n       id : 1,\n       info : {\n         avatar :  avatar.png ,\n         container :  user_1 \n      },\n       locale :  en ,\n       name :  johndoe ,\n       newsletter_prompted : false,\n       passwd_hash :  hash ,\n       privacy_mode : true,\n       pro : false,\n       subscribed : true,\n       twitter_user_id : null,\n       valid_email : true\n    },\n  ]\n}  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\nIt returns a JSON object with the following information:\n\n-   **form**: A form with the submitted search.\n-   **found**: A list of found users according to a search.\n-   **template**: Jinja2 template.\n-   **users**: List of admin users.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   form : {\n     csrf :  token ,\n     errors : {},\n     user : 'janedoe',\n  },\n   found : [\n        {\n           admin : false,\n           api_key :  key ,\n           category : null,\n           ckan_api : null,\n           confirmation_email_sent : false,\n           created :  date ,\n           email_addr :  email ,\n           facebook_user_id : null,\n           flags : null,\n           fullname :  janedoe ,\n           google_user_id : null,\n           id : 80,\n           info : {},\n           locale :  en ,\n           name :  janedoe ,\n           newsletter_prompted : false,\n           passwd_hash :  hash ,\n           privacy_mode : true,\n           pro : false,\n           subscribed : true,\n           twitter_user_id : null,\n           valid_email : true\n        },\n  ],\n   template :  /admin/users.html ,\n   title :  Manage Admin Users ,\n   users : [\n    {\n       admin : true,\n       api_key :  key ,\n       category : null,\n       ckan_api : null,\n       confirmation_email_sent : false,\n       created :  date ,\n       email_addr :  email ,\n       facebook_user_id : null,\n       flags : null,\n       fullname :  John Doe ,\n       google_user_id : null,\n       id : 1,\n       info : {\n         avatar :  avatar.png ,\n         container :  user_1 \n      },\n       locale :  en ,\n       name :  johndoe ,\n       newsletter_prompted : false,\n       passwd_hash :  hash ,\n       privacy_mode : true,\n       pro : false,\n       subscribed : true,\n       twitter_user_id : null,\n       valid_email : true\n    },\n  ]\n  }", 
            "title": "Admin users"
        }, 
        {
            "location": "/api/#admin-users-add", 
            "text": "Endpoint: /admin/users/add/ int:user_id  Allowed methods :  GET  GET  It adds a user to the admin group. It returns a JSON object with the\nfollowing information:   next :  /admin/users ,   Example output  ``` {.sourceCode .python}\n{\n   next :  /admin/users ,\n}   div class= admonition note \n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group. /div \n\n### Admin users del\n\n**Endpoint: /admin/users/del/ lt;int:user\\_id gt;**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nIt removes a user from the admin group. It returns a JSON object with\nthe following information:\n\n-   **next**: '/admin/users',\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   next : '/admin/users',\n}  \n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.", 
            "title": "Admin users add"
        }, 
        {
            "location": "/api/#admin-categories", 
            "text": "Endpoint: /admin/categories  Allowed methods :  GET/POST  GET  It lists all the available categories. It returns a JSON object with the\nfollowing information:   categories : A list of categories.  form : A form with the CSRF key to add a new category.  n_projects_per_category : A dictionary with the number of\n    projects per category.   Example output  ``` {.sourceCode .python}\n{\n   categories : [\n    {\n       created : null,\n       description :  Social projects ,\n       id : 2,\n       name :  Social ,\n       short_name :  social \n    },\n    {\n       created :  2013-06-18T11:13:44.789149 ,\n       description :  Art projects ,\n       id : 3,\n       name :  Art ,\n       short_name :  art \n    },\n  ],\n   form : {\n     csrf :  token ,\n     description : null,\n     errors : {},\n     id : null,\n     name : null\n  },\n   n_projects_per_category : {\n     art : 41,\n     social : 182\n  },\n   template :  admin/categories.html ,\n   title :  Categories \n}  \n**POST**\n\nIt returns the same output as before, but if the form is valid, it will\nreturn the new created Category. Use the CSRFToken for submitting the\ndata.\n\n-   **categories**: A list of categories.\n-   **form**: A form with the CSRF key to add a new category.\n-   **n\\_projects\\_per\\_category**: A dictionary with the number of\n    projects per category.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   categories : [\n    {\n       created : null,\n       description :  Social projects ,\n       id : 2,\n       name :  Social ,\n       short_name :  social \n    },\n    {\n       created :  2013-06-18T11:13:44.789149 ,\n       description :  Art projects ,\n       id : 3,\n       name :  Art ,\n       short_name :  art \n    },\n    {\n       created :  now ,\n       description :  new ,\n       id : 4,\n       name :  new ,\n       short_name :  new \n    },\n\n  ],\n   form : {\n     csrf :  token ,\n     description :  new ,\n     errors : {},\n     name :  new \n  },\n   n_projects_per_category : {\n     art : 41,\n     social : 182,\n     new : 0\n  },\n   template :  admin/categories.html ,\n   title :  Categories \n}", 
            "title": "Admin categories"
        }, 
        {
            "location": "/api/#admin-categories-delete", 
            "text": "Endpoint: /admin/categories/del/ int:id  Allowed methods :  GET/POST  GET  It shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.   category : The category to be deleted.  form : A form with the CSRF key to add a new category.   Example output  ``` {.sourceCode .python}\n{\n   category : {\n     created :  2017-01-24T13:08:09.873071 ,\n     description :  new ,\n     id : 9,\n     name :  new ,\n     short_name :  new \n  },\n   form : {\n     csrf :  token ,\n  },\n   template :  admin/del_category.html ,\n   title :  Delete Category \n}  \n**POST**\n\nIt shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.\n\n-   **flash**: A human readable message about the action.\n-   **next**: The next URL\n-   **status**: The status of the POST.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  Category deleted ,\n   next :  /admin/categories ,\n   status :  success \n}", 
            "title": "Admin categories delete"
        }, 
        {
            "location": "/api/#admin-categories-update", 
            "text": "Endpoint: /admin/categories/update/ int:id  Allowed methods :  GET/POST  GET  It shows the category that will be updated. It gives you the CSRF token\nto do a POST and update it.   category : The category to be deleted.  form : A form with the CSRF key to add a new category.   Example output  ``` {.sourceCode .python}\n{\n   category : {\n     created :  2017-01-24T13:08:09.873071 ,\n     description :  new ,\n     id : 9,\n     name :  new ,\n     short_name :  new \n  },\n   form : {\n     csrf :  token ,\n     description :  new ,\n     errors : {},\n     id : 9,\n     name :  new \n  },\n   template :  admin/update_category.html ,\n   title :  Update Category \n}  \n**POST**\n\nIt updates the category. Use the CSRF token and form fields from the\nprevious action to update it.\n\n-   **flash**: A human readable message about the action.\n-   **next**: The next URL\n-   **status**: The status of the POST.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  Category updated ,\n   next :  /admin/categories ,\n   status :  success \n}", 
            "title": "Admin categories update"
        }, 
        {
            "location": "/api/#admin-dashboard", 
            "text": "**Endpoint: /admin/dashboard/  Allowed methods :  GET  GET  It shows the server statistics. You can use the argument  ?refresh=1  to\nupdate the data, as this data is only updated every 24 hours.   active_anon_last_week : Active number of anonymous users in\n    the server.  published_projects_last_week : Published projects from the\n    last week.  new_tasks_week : Number of new tasks created on the last week.  update_feed : Activity feed of actions in the server.  draft_projects_last_week : List of new draft projects created\n    in the last week.  update_projects_last_week : List of updated projects in the\n    last week.  new_users_week : Number of new registered users in the last\n    week.  new_task_runs_week : Number of new task runs in the last week.  returning_users_week : Number of returning users per number of\n    days in a row in the last week.  active_users_last_week : Number of active users in the last\n    week.  wait : This will be False if there s data, otherwise it will be\n    True.   Example output  ``` {.sourceCode .python}\n{\n   active_anon_last_week : {\n     labels : [\n       2016-04-28 \n    ],\n     series : [\n      [\n        0\n      ]\n    ]\n  },\n   active_users_last_week : {\n     labels : [\n       2016-04-28 \n    ],\n     series : [\n      [\n        1\n      ]\n    ]\n  },\n   draft_projects_last_week : [\n    {\n       day :  2016-04-27 ,\n       email_addr :  email ,\n       id : id,\n       owner_id : id,\n       p_name :  name ,\n       short_name :  name ,\n       u_name :  name \n    },\n    {\n       day :  2016-04-26 ,\n       email_addr :  email ,\n       id : id,\n       owner_id : id,\n       p_name :  name ,\n       short_name :  name ,\n       u_name :  name \n    }\n  ],\n   new_task_runs_week : {\n     labels : [\n       2016-04-28 \n    ],\n     series : [\n      [\n        4\n      ]\n    ]\n  },\n   new_tasks_week : {\n     labels : [\n       2016-04-26 ,\n       2016-04-28 \n    ],\n     series : [\n      [\n        57,\n        4\n      ]\n    ]\n  },\n   new_users_week : {\n     labels : [\n       2016-04-27 \n    ],\n     series : [\n      [\n        1\n      ]\n    ]\n  },\n   published_projects_last_week : [],\n   returning_users_week : {\n     labels : [\n       1 day ,\n       2 days ,\n       3 days ,\n       4 days ,\n       5 days ,\n       6 days ,\n       7 days \n    ],\n     series : [\n      [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    ]\n  },\n   template :  admin/dashboard.html ,\n   title :  Dashboard ,\n   update_feed : [],\n   update_projects_last_week : [\n    {\n       day :  2016-04-28 ,\n       email_addr :  email ,\n       id : id,\n       owner_id : id,\n       p_name :  name ,\n       short_name :  name ,\n       u_name :  name \n    },\n    {\n       day :  2016-04-27 ,\n       email_addr :  email ,\n       id : id,\n       owner_id : id,\n       p_name :  name ,\n       short_name :  name ,\n       u_name :  name \n    },\n    {\n       day :  2016-04-26 ,\n       email_addr :  email ,\n       id : id,\n       owner_id : id,\n       p_name :  name ,\n       short_name :  name ,\n       u_name :  name \n    },\n  ],\n   wait : false\n}  \n### Admin featured projects\n\n**Endpoint: /admin/featured**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you all featured projects on PYBOSSA.\n\n-   **categories**: Gives you a list of categories where projects can be\n    featured.\n-   **form**: The form fields that need to be sent for feature and\n    unfeature a project. It contains the CSRF token for validating the\n    POST/DELETE.\n-   **projects**: Featured projects grouped by categories.\n-   **template**: The Jinja2 template that could be rendered.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   categories : [\n    {\n       created :  2013-06-18T11:13:44.789149 ,\n       description :  Art projects ,\n       id : 3,\n       name :  Art ,\n       short_name :  art \n    },\n    {\n       created :  2013-06-18T11:14:54.737672 ,\n       description :  Humanities projects ,\n       id : 4,\n       name :  Humanities ,\n       short_name :  humanities \n    },\n    ...\n  ],\n   projects : {\n     art : [\n      {\n         created :  2013-12-10T06:54:48.222642 ,\n         description :  Description ,\n         id : 1069,\n         info : {\n           container :  user_3738 ,\n           thumbnail :  app_1069_thumbnail_1410772175.32.png \n        },\n         last_activity :  just now ,\n         last_activity_raw : null,\n         n_tasks : 13,\n         n_volunteers : 0,\n         name :  AAAA Test ,\n         overall_progress : 0,\n         owner :  John Doe ,\n         short_name :  AAAATest ,\n         updated :  2014-11-05T14:55:07.564118 \n      },\n      ...\n    ]\n     humanities : [\n      {\n         created :  2014-10-21T12:20:51.194485 ,\n         description :  test project ,\n         id : 2144,\n         info : {\n           container : null,\n           thumbnail : null\n        },\n         last_activity :  2 years ago ,\n         last_activity_raw :  2014-10-21T12:31:51.560422 ,\n         n_tasks : 9,\n         n_volunteers : 2,\n         name :  zak's test ,\n         overall_progress : 0,\n         owner :  John Doe Cousin ,\n         short_name :  cousintest ,\n         updated :  2014-11-05T14:55:07.564118 \n      },\n      ...\n    ]\n  },\n   form : {\n     csrf :  secret_token_here \n  },\n   template :  /admin/projects.html \n}", 
            "title": "Admin dashboard"
        }, 
        {
            "location": "/api/#admin-un-feature-projects", 
            "text": "Endpoint: /admin/featured/ int:project_id  Allowed methods :  POST / DELETE  POST  Features a specific project.  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  Example output  On Success it will give you the project information  ``` {.sourceCode .python}\n{\n   info : {\n     task_presenter :  ,\n     container :  user_3738 ,\n     thumbnail :  app_1069_thumbnail_1410772175.32.png \n  },\n   updated :  2017-01-24T17:21:07.545983 ,\n   category_id : 3,\n   description :  Description ,\n   short_name :  AAAATest ,\n   created :  2013-12-10T06:54:48.222642 ,\n   webhook : null,\n   long_description :  AAAATest\\n\\n ,\n   featured : false,\n   allow_anonymous_contributors : true,\n   published : true,\n   secret_key :  dfgojdsfgsgd ,\n   owner_id : 3738,\n   contacted : null,\n   id : 1069,\n   name :  AAAA Test \n}  \nIf a project is already featured:\n\n``` {.sourceCode .python}\n{\n   code : 400,\n   description :  CSRF token missing or incorrect. ,\n   template :  400.html \n}  DELETE  Unfeatures a specific project.  To send a valid DELETE request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  Example output  On Success it will give you the project information  ``` {.sourceCode .python}\n{\n   info : {\n     task_presenter :  ,\n     container :  user_3738 ,\n     thumbnail :  app_1069_thumbnail_1410772175.32.png \n  },\n   updated :  2017-01-24T17:21:07.545983 ,\n   category_id : 3,\n   description :  Description ,\n   short_name :  AAAATest ,\n   created :  2013-12-10T06:54:48.222642 ,\n   webhook : null,\n   long_description :  AAAATest\\n\\n ,\n   featured : false,\n   allow_anonymous_contributors : true,\n   published : true,\n   secret_key :  2ffgjngdf6bcbc38ba52561d4 ,\n   owner_id : 3738,\n   contacted : null,\n   id : 1069,\n   name :  AAAA Test \n}  \nIf a project is already unfeatured:\n\n``` {.sourceCode .python}\n{\n   status_code : 415,\n   error :  Project.id 1069 is not featured \n}", 
            "title": "Admin un-/feature projects"
        }, 
        {
            "location": "/api/#help-api", 
            "text": "Endpoint: /help/api  Allowed methods :  GET  GET  Gives you the API help for your PYBOSSA   project_id : a project id for the help example text. If no\n    project exists it is null.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  ``` {.sourceCode .python}\n{\n   project_id : 1104,\n   template :  help/privacy.html ,\n   title :  API Help \n}  \n### Help privacy\n\n**Endpoint: /help/privacy**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the privacy policy for your PYBOSSA\n\n-   **content**: Simplified HTML of rendered privacy policy.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   content :  html body p privacy policy here /p /body /html \n   template :  help/privacy.html ,\n   title :  Privacy Policy \n}", 
            "title": "Help API"
        }, 
        {
            "location": "/api/#help-cookie-policy", 
            "text": "Endpoint: /help/cookies-policy  Allowed methods :  GET  GET  Gives you the cookie policy for your PYBOSSA   content : Simplified HTML of rendered cookie policy.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  ``` {.sourceCode .python}\n{\n   content :  cookie policy here \n   template :  help/cookies_policy.html ,\n   title :  Help: Cookies Policy \n}  \n### Help terms of use\n\n**Endpoint: /help/terms-of-use**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the terms of use for your PYBOSSA\n\n-   **content**: Simplified HTML of rendered terms of use.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   content :  html body p Terms of use text /p /body /html \n   template :  help/tos.html ,\n   title :  Help: Terms of Use \n}", 
            "title": "Help cookie policy"
        }, 
        {
            "location": "/api/#pybossa-server-stats", 
            "text": "Endpoint: /stats/  Allowed methods :  GET  GET  Gives you the global stats of the PYBOSSA server.   title : the title for the endpoint.  locs : localizations for anonymous users that have contributed.  projects : statistics about total published and draft projects.  show_locs : if GEOIP is enabled to show that data.  stats : Number of anonymous and authenticated users, number of\n    draft and published projects, number of tasks, taskruns and total\n    number of users.  tasks : Task and Taskrun statistics.  tasks : Task and Taskrun statistics.  top_5_projects_24_hours : Top 5 projects in the last 24\n    hours.  top_5_users_24_hours : Top 5 users in the last 24 hours.  users : User statistics.   Example output  ``` {.sourceCode .python}\n{\n   locs :  [] ,\n   projects : {\n     label :  Projects Statistics ,\n     values : [\n      {\n         label :  Published ,\n         value : [\n          0,\n          534\n        ]\n      },\n      {\n         label :  Draft ,\n         value : [\n          0,\n          1278\n        ]\n      }\n    ]\n  },\n   show_locs : false,\n   stats : {\n     n_anon : 27587,\n     n_auth : 11134,\n     n_draft_projects : 1278,\n     n_published_projects : 534,\n     n_task_runs : 1801222,\n     n_tasks : 553012,\n     n_total_projects : 1812,\n     n_total_users : 38721\n  },\n   tasks : {\n     label :  Task and Task Run Statistics ,\n     values : [\n      {\n         label :  Tasks ,\n         value : [\n          0,\n          553012\n        ]\n      },\n      {\n         label :  Answers ,\n         value : [\n          1,\n          1801222\n        ]\n      }\n    ]\n  },\n   template :  /stats/global.html ,\n   title :  Global Statistics ,\n   top5_projects_24_hours : [],\n   top5_users_24_hours : [],\n   users : {\n     label :  User Statistics ,\n     values : [\n      {\n         label :  Anonymous ,\n         value : [\n          0,\n          27587\n        ]\n      },\n      {\n         label :  Authenticated ,\n         value : [\n          0,\n          11134\n        ]\n      }\n    ]\n  }\n}  \n### Project Category Featured\n\n**Endpoint: /project/category/featured/**\n\n*Allowed methods*: **GET**\n\n**GET**\n\nGives you the list of featured projects.\n\n-   **pagination**: A pagination object for getting new featured projets\n    from this category.\n-   **active\\_cat**: Active category.\n-   **projects**: List of projects belonging to this category.\n-   **categories**: List of available categories in this server.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   active_cat : {\n     created : null,\n     description :  Featured projects ,\n     id : null,\n     name :  Featured ,\n     short_name :  featured \n  },\n   categories : [\n    {\n       created : null,\n       description :  Featured projects ,\n       id : null,\n       name :  Featured ,\n       short_name :  featured \n    },\n    {\n       created : null,\n       description :  Social projects ,\n       id : 2,\n       name :  Social ,\n       short_name :  social \n    },\n    {\n       created :  2013-06-18T11:13:44.789149 ,\n       description :  Art projects ,\n       id : 3,\n       name :  Art ,\n       short_name :  art \n    },\n  ],\n   pagination : {\n     next : false,\n     page : 1,\n     per_page : 20,\n     prev : false,\n     total : 1\n  },\n   projects : [\n    {\n       created :  2014-02-22T15:09:23.691811 ,\n       description :  Image pattern recognition ,\n       id : 1377,\n       info : {\n         container :  7 ,\n         thumbnail :  58.png \n      },\n       last_activity :  2 weeks ago ,\n       last_activity_raw :  2017-01-31T09:18:28.450391 ,\n       n_tasks : 169671,\n       n_volunteers : 17499,\n       name :  Name ,\n       overall_progress : 80,\n       owner :  John Doe ,\n       short_name :  name ,\n       updated :  2017-01-31T09:18:28.491496 \n    },\n  ],\n   template :  /projects/index.html ,\n   title :  Projects \n}", 
            "title": "PYBOSSA server stats"
        }, 
        {
            "location": "/api/#project-category-draft", 
            "text": "Endpoint: /project/category/draft/  Allowed methods :  GET  GET  Gives you the list of featured projects.   pagination : A pagination object for getting new draft projets\n    from this category.  active_cat : Active category.  projects : List of projects belonging to this category.  categories : List of available categories in this server.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  ``` {.sourceCode .python}\n{\n   active_cat : {\n     created : null,\n     description :  Draft projects ,\n     id : null,\n     name :  Draft ,\n     short_name :  draft \n  },\n   categories : [\n    {\n       created : null,\n       description :  Draft projects ,\n       id : null,\n       name :  Draft ,\n       short_name :  draft \n    },\n    {\n       created : null,\n       description :  Social projects ,\n       id : 2,\n       name :  Social ,\n       short_name :  social \n    },\n    {\n       created :  2013-06-18T11:13:44.789149 ,\n       description :  Art projects ,\n       id : 3,\n       name :  Art ,\n       short_name :  art \n    },\n  ],\n   pagination : {\n     next : false,\n     page : 1,\n     per_page : 20,\n     prev : false,\n     total : 1\n  },\n   projects : [\n    {\n       created :  2014-02-22T15:09:23.691811 ,\n       description :  Draft 1 ,\n       id : 17,\n       info : {\n         container :  7 ,\n         thumbnail :  58.png \n      },\n       last_activity :  2 weeks ago ,\n       last_activity_raw :  2017-01-31T09:18:28.450391 ,\n       n_tasks : 0,\n       n_volunteers : 0,\n       name :  Name ,\n       overall_progress : 0,\n       owner :  John Doe ,\n       short_name :  name ,\n       updated :  2017-01-31T09:18:28.491496 \n    },\n  ],\n   template :  /projects/index.html ,\n   title :  Projects \n}  \n### Project Creation\n\n**Endpoint: /project/new**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nGives you the list of required fields in the form to create a project.\n\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n-   **form**: The form fields that need to be sent for creating the\n    project. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   errors : false,\n   form : {\n     csrf :  token ,\n     description : null,\n     errors : {},\n     long_description : null,\n     name : null,\n     short_name : null\n  },\n   template :  projects/new.html ,\n   title :  Create a Project \n}", 
            "title": "Project Category Draft"
        }, 
        {
            "location": "/api/#project-blog-list", 
            "text": "Endpoint: /project/ short_name /blog  Allowed methods :  GET  GET  Gives you the list of posted blogs by the given project short name.   blogposts : All the blog posts for the given project.  project : Info about the project.   The project and owner fields will have more information if the onwer of\nthe project does the request, providing its private information like\napi_key, password keys, etc. Otherwise it will be removed and only show\npublic info.  Example public output  ``` {.sourceCode .python}\n{\n   blogposts : [\n    {\n       body :  Please, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks. ,\n       created :  2014-05-14T14:25:04.899079 ,\n       id : 1,\n       project_id : 1377,\n       title :  We are working on the Alpha version. ,\n       user_id : 3927\n    },\n  ],\n   n_completed_tasks : 137051,\n   n_task_runs : 1070561,\n   n_tasks : 169671,\n   n_volunteers : 17499,\n   overall_progress : 80,\n   owner : {\n     created :  2014-02-13T15:28:08.420187 ,\n     fullname :  John Doe ,\n     info : {\n       avatar :  avatar.png ,\n       container :  container \n    },\n     n_answers : 32814,\n     name :  johndoe ,\n     rank : 4,\n     registered_ago :  3 years ago ,\n     score : 32814\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     webhooks_enabled : false\n  },\n   project : {\n     created :  2014-02-22T15:09:23.691811 ,\n     description :  Image pattern recognition ,\n     featured : true,\n     id : 1,\n     info : {\n       container :  container ,\n       thumbnail :  58.png \n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  Dark Skies ISS ,\n     overall_progress : null,\n     owner : null,\n     short_name :  darkskies ,\n     updated :  2017-01-31T09:18:28.491496 \n  },\n   template :  projects/blog.html \n}  \n### Project Task Presenter Editor\n\n**Endpoint: /project/ lt;short\\_name gt;/tasks/taskpresentereditor**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nThis endpoint allows you to get the list of available templates for the\ncurrent project. This will only happen when the project has an empty\ntemplate, otherwise it will load the template for you.\n\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: the title for the endpoint.\n-   **presenters**: List of available templates (in HTML format). The\n    name of them without the '.html' will be the argument for the\n    endpoint.\n-   **last\\_activit**: last activity of the project.\n-   **n\\_task\\_runs**: number of task runs.\n-   **n\\_tasks**: number of tasks.\n-   **n\\_volunteers**: number of volunteers.\n-   **owner**: information about the owner.\n-   **pro\\_features**: which pro features are enabled.\n-   **pro\\_features**: which pro features are enabled.\n-   **project**: info about the project.\n-   **status**: status of the flash message.\n-   **flash**: flash message.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n  flash :  strong Note /strong  You will need to upload the tasks using the a href=\\ /project/asdf123/tasks/import\\  CSV importer /a  or download the project bundle and run the  strong createTasks.py /strong  script in your computer ,\n  last_activity : null,\n  n_completed_tasks : 0,\n  n_task_runs : 0,\n  n_tasks : 0,\n  n_volunteers : 0,\n  overall_progress : 0,\n  owner : {\n    api_key :  key ,\n    confirmation_email_sent : false,\n    created :  2016-09-15T11:30:42.660450 ,\n    email_addr :  prueba@prueba.com ,\n    facebook_user_id : null,\n    fullname :  prueba de json ,\n    google_user_id : null,\n    id : 12030,\n    info : {\n      avatar :  avatar.png ,\n      container :  user \n   },\n    n_answers : 5,\n    name :  pruebaadfadfa ,\n    rank : 4411,\n    registered_ago :  6 months ago ,\n    score : 5,\n    total : 11134,\n    twitter_user_id : null,\n    valid_email : true\n },\n  presenters : [\n    projects/presenters/basic.html ,\n    projects/presenters/image.html ,\n    projects/presenters/sound.html ,\n    projects/presenters/video.html ,\n    projects/presenters/map.html ,\n    projects/presenters/pdf.html \n ],\n  pro_features : {\n    auditlog_enabled : false,\n    autoimporter_enabled : false,\n    webhooks_enabled : false\n },\n  project : {\n    allow_anonymous_contributors : true,\n    category_id : 4,\n    contacted : false,\n    contrib_button :  draft ,\n    created :  2017-01-11T09:37:43.613007 ,\n    description :  adsf ,\n    featured : false,\n    id : 3,\n    info : {\n      passwd_hash : null,\n      task_presenter :  \n   },\n    long_description :  adsf ,\n    n_blogposts : 0,\n    n_results : 0,\n    name :  asdf1324 ,\n    owner_id : 12030,\n    published : false,\n    secret_key :  73aee9df-be47-4e4c-8192-3a8bf0ab5161 ,\n    short_name :  asdf123 ,\n    updated :  2017-03-15T13:20:48.022328 ,\n    webhook :  \n },\n  status :  info ,\n  template :  projects/task_presenter_options.html ,\n  title :  Project: asdf1324  middot; Task Presenter Editor    }   If you want to preload the template from one of the available prenters,\nyou have to pass the following argument:  ?template=basic  for the\nbasic or  ?template=iamge  for the image template.  Example output  ``` {.sourceCode .python}\n{\n  errors : false,\n  flash :  Your code will be  automagically  rendered in                       the  preview section . Click in the                       preview button! ,\n  form : {\n    csrf :  token ,\n    editor :  \\n     \\n", 
            "title": "Project Blog list"
        }, 
        {
            "location": "/api/#project-delete", 
            "text": "Endpoint: /project/ short_name /delete  Allowed methods :  GET/POST  GET  The GET endpoint allows you to get all the info about the project (see\nthe Project endpoint as well) as well as the csrf token. As this\nendpoint does not have any form, the csrf token is not inside the form\nfield.  Example output  ``` {.sourceCode .python}\n{\n   csrf :  token ,\n   last_activity : null,\n   n_tasks : 0,\n   overall_progress : 0,\n   owner : {\n     api_key :  key ,\n     confirmation_email_sent : false,\n     created :  2016-09-15T11:30:42.660450 ,\n     email_addr :  prueba@prueba.com ,\n     facebook_user_id : null,\n     fullname :  prueba de json ,\n     google_user_id : null,\n     id : 0,\n     info : {\n       avatar :  avatar.png ,\n       container :  0 \n    },\n     n_answers : 5,\n     name :  pruebaadfadfa ,\n     rank : 4411,\n     registered_ago :  6 months ago ,\n     score : 5,\n     total : 11134,\n     twitter_user_id : null,\n     valid_email : true\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     webhooks_enabled : false\n  },\n   project : {\n     allow_anonymous_contributors : true,\n     category_id : 2,\n     contacted : false,\n     created :  2017-03-15T15:02:12.160810 ,\n     description :  asdf ,\n     featured : false,\n     id : 3,\n     info : {},\n     long_description :  asdf ,\n     name :  algo ,\n     owner_id : 12030,\n     published : false,\n     secret_key :  c5a77943-f5a4-484a-86bb-d69559e80357 ,\n     short_name :  algo ,\n     updated :  2017-03-15T15:02:12.160823 ,\n     webhook : null\n  },\n   template :  /projects/delete.html ,\n   title :  Project: algo   Delete \n}  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  Project deleted! ,\n   next :  /account/pruebaadfadfa/ ,\n   status :  success \n}", 
            "title": "Project Delete"
        }, 
        {
            "location": "/api/#project-update", 
            "text": "Endpoint: /project/ short_name /update  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for updating the\n    project. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.  upload_form : the form fields that need to be sent for updating\n    the project s avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output  ``` {.sourceCode .python}\n{\n   form : {\n     allow_anonymous_contributors : false,\n     category_id : 2,\n     csrf :  token ,\n     description :  description ,\n     errors : {},\n     id : 3117,\n     long_description :  long description ,\n     name :  name ,\n     password : null,\n     protect : false,\n     short_name :  slug ,\n     webhook : null\n  },\n   last_activity : null,\n   n_completed_tasks : 0,\n   n_task_runs : 0,\n   n_tasks : 2,\n   n_volunteers : 0,\n   overall_progress : 0,\n   owner : {\n     api_key :  key ,\n     confirmation_email_sent : false,\n     created :  2012-06-06T06:27:18.760254 ,\n     email_addr :  email.com ,\n     facebook_user_id : null,\n     fullname :  John Doe ,\n     google_user_id : null,\n     id : 0,\n     info : {\n       avatar :  avatar.png ,\n       container :  user ,\n       twitter_token : {\n         oauth_token :  token ,\n         oauth_token_secret :  token \n      }\n    },\n     n_answers : 2414,\n     name :  johndoe ,\n     rank : 69,\n     registered_ago :  4 years ago ,\n     score : 2414,\n     total : 11134,\n     twitter_user_id : 12,\n     valid_email : false\n  },\n   pro_features : {\n     auditlog_enabled : true,\n     autoimporter_enabled : true,\n     webhooks_enabled : true\n  },\n   project : {\n     allow_anonymous_contributors : false,\n     category_id : 2,\n     contacted : false,\n     contrib_button :  can_contribute ,\n     created :  2015-06-29T08:23:14.201331 ,\n     description :  description ,\n     featured : false,\n     id : 0,\n     info : {\n       container :  user ,\n       passwd_hash : null,\n       task_presenter :  HTML+CSS+JS,\n       thumbnail :  thumbnail.png \n    },\n     long_description :  long description ,\n     n_blogposts : 0,\n     n_results : 0,\n     name :  name ,\n     owner_id : 0,\n     published : true,\n     secret_key :  key ,\n     short_name :  slug ,\n     updated :  2017-03-16T14:50:45.055331 ,\n     webhook : null\n  },\n   template :  /projects/update.html ,\n   title :  Project: name   Update ,\n   upload_form : {\n     avatar : null,\n     csrf :  token ,\n     errors : {},\n     id : null,\n     x1 : 0,\n     x2 : 0,\n     y1 : 0,\n     y2 : 0\n  }\n}  \n**POST**\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken .\n\nAs this endpoint supports **two** different forms, you must specify\nwhich form are you targetting adding an extra key: **btn**. The options\nfor this key are:  **Upload**: to update the **upload\\_form**.\n\nThe other one does not need this extra key. div class= admonition note \n\nBe sure to respect the Uppercase in the first letter, otherwise it will\nfail. /div \n\nIt returns a JSON object with the following information:\n\n-   **flash**: A success message, or error indicating if the request was\n    succesful.\n-   **form**: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  Your profile has been updated! ,\n   next :  /account/pruebaadfadfa/update ,\n   status :  success \n}  If there s an error in the form fields, you will get them in the form.errors  key:  ``` {.sourceCode .python}\n{\n   flash :  Please correct the errors ,\n   form : {\n     allow_anonymous_contributors : false,\n     category_id : 2,\n     csrf :  token ,\n     description :  description ,\n     errors : {\n       short_name : [\n         This field is required. \n      ]\n    },\n     id : 3117,\n     long_description :  new description ,\n     name :  new name ,\n     password : null,\n     protect : true,\n     short_name :  ,\n     webhook : null\n  },\n   \n}   div class= admonition note \n\nFor updating the avatar is very important to not set the *Content-Type*. If you\n\n:   are using jQuery, set it to False, so the file is handled properly.\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n(x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop. And don't forget to add an extra key to the form-data: 'btn'\nwith a value Upload to select this form. /div \n\n### Project reset secret key\n\n**Endpoint: /project/ lt;short\\_name gt;/resetsecretkey**\n\n*Allowed methods*: **POST**\n\nResets the secret key of a project.\n\nTo send a valid POST request you need to pass the *csrf token* in the\nheaders. Use the following header:  X-CSRFToken  retrieved from the GET\nendpont **/project/ lt;short\\_name gt;/update**.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   flash :  New secret key generated ,\n   next :  /project/flickrproject2/update ,\n   status :  success \n}", 
            "title": "Project update"
        }, 
        {
            "location": "/api/#project-tasks-browse", 
            "text": "Endpoint: /project/ short_name /tasks/browse/   Endpoint:\n/project/ short_name /tasks/browse/ int:page  Allowed methods :  GET   n_completed_tasks : number of completed tasks  n_tasks : number of tasks  n_volunteers : number of volunteers  overall_progress : overall progress  owner : project owner  pagination : pagination information  pro_features : pro features enabled or not  project : project information  tasks : tasks, paginated  template : the Jinja2 template that should be rendered in case of\n    text/html.  title : the title for the endpoint.   Example output  ``` {.sourceCode .python}\n{\n   n_completed_tasks : 0,\n   n_tasks : 1,\n   n_volunteers : 0,\n   overall_progress : 0,\n   owner : {\n     created :  2017-04-17T23:56:22.892222 ,\n     fullname :  John Doe ,\n     info : {},\n     locale : null,\n     n_answers : 0,\n     name :  johndoe ,\n     rank : null,\n     registered_ago :  3 hours ago ,\n     score : null\n  },\n   pagination : {\n     next : false,\n     page : 1,\n     per_page : 10,\n     prev : false,\n     total : 1\n  },\n   pro_features : {\n     auditlog_enabled : false,\n     autoimporter_enabled : false,\n     webhooks_enabled : false\n  },\n   project : {\n     created :  2017-04-17T23:56:23.416754 ,\n     description :  Description ,\n     featured : false,\n     id : 1,\n     info : {},\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  Sample Project ,\n     overall_progress : null,\n     owner : null,\n     short_name :  sampleapp ,\n     updated :  2017-04-17T23:56:23.589652 \n  },\n   tasks : [\n    {\n       id : 1,\n       n_answers : 10,\n       n_task_runs : 0,\n       pct_status : 0.0\n    }\n  ],\n   template :  /projects/tasks_browse.html ,\n   title :  Project: Sample Project   Tasks \n}  \n### Project tasks import\n\n**Endpoint: /project/ lt;short\\_name gt;/tasks/import**\n\n*Allowed methods*: **GET/POST**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **available\\_importers**: A list of available importers for the\n    server. To use one of the items, you have to add to the endpoint the\n    following argument: *?type=name* where name is the string that you\n    will find in the list of importers in the format:\n    *projects/tasks/name.html*.\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   available_importers : [\n     projects/tasks/epicollect.html ,\n     projects/tasks/csv.html ,\n     projects/tasks/s3.html ,\n     projects/tasks/twitter.html ,\n     projects/tasks/youtube.html ,\n     projects/tasks/gdocs.html ,\n     projects/tasks/dropbox.html ,\n     projects/tasks/flickr.html \n  ],\n   form : null,\n   loading_text :  Importing tasks, this may take a while, wait... ,\n   n_completed_tasks : 0,\n   n_tasks : 5,\n   n_volunteers : 0,\n   overall_progress : 0,\n   owner : {\n     api_key :  key ,\n     confirmation_email_sent : false,\n     created :  2012-06-06T06:27:18.760254 ,\n     email_addr :  johndoe@gmail.com ,\n     facebook_user_id : null,\n     fullname :  John Doe ,\n     google_user_id : null,\n     id : 0,\n     info : {\n       avatar :  avatar.png ,\n       container :  user ,\n       twitter_token : {\n         oauth_token :  ,\n         oauth_token_secret :  \n      }\n    },\n     n_answers : 2414,\n     name :  johndoe ,\n     rank : 69,\n     registered_ago :  4 years ago ,\n     score : 2414,\n     total : 11134,\n     twitter_user_id : 12,\n     valid_email : false\n  },\n   pro_features : {\n     auditlog_enabled : true,\n     autoimporter_enabled : true,\n     webhooks_enabled : true\n  },\n   project : {\n     allow_anonymous_contributors : false,\n     category_id : 2,\n     contacted : false,\n     contrib_button :  can_contribute ,\n     created :  2015-06-29T08:23:14.201331 ,\n     description :  old ,\n     featured : false,\n     id : 3117,\n     info : {\n       container :  user ,\n       passwd_hash : null,\n       task_presenter :  HTML+CSS+JS \n       thumbnail :  avatar.png \n    },\n     long_description :  algo ,\n     n_blogposts : 0,\n     n_results : 0,\n     name :  name ,\n     owner_id : 3,\n     published : true,\n     secret_key :  f ,\n     short_name :  name ,\n     updated :  2017-03-17T09:15:46.867215 ,\n     webhook : null\n  },\n   target :  project.import_task ,\n   task_tmpls : [\n     projects/tasks/gdocs-sound.html ,\n     projects/tasks/gdocs-map.html ,\n     projects/tasks/gdocs-image.html ,\n     projects/tasks/gdocs-video.html ,\n     projects/tasks/gdocs-pdf.html \n  ],\n   template :  /projects/task_import_options.html ,\n   title :  Project: bevan  middot; Import Tasks \n}  Therefore, if you want to import tasks from a CSV link, you will have to\ndo the following GET:  GET server/project/ short_name /tasks/import?type=csv  That query will return the same output as before, but instead of the\navailable_importers, you will get the the form fields and CSRF token\nfor that importer.  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.   Example output  ``` {.sourceCode .python}\n{\n   flash :  Tasks imported ,\n   next :  /project/ /tasks/ ,\n   status :  success \n}  \n### Project tutorial\n\n**Endpoint: /project/ lt;short\\_name gt;/tutorial**\n\n**GET**\n\nIt returns a JSON object with the following information:\n\n-   **owner**: owner information\n-   **project**: project information\n-   **template**: The Jinja2 template that could be rendered.\n-   **title**: The title for the view.\n\n**Example output**\n\n``` {.sourceCode .python}\n{\n   owner : {\n     created :  2014-02-13T15:28:08.420187 ,\n     fullname :  John Doe ,\n     info : {\n       avatar :  1410769844.15_avatar.png ,\n       avatar_url : null,\n       container :  user_3927 ,\n       extra : null\n    },\n     locale : null,\n     n_answers : 43565,\n     name :  jdoe ,\n     rank : 3,\n     registered_ago :  3 years ago ,\n     score : 43565\n  },\n   project : {\n     created :  2014-02-22T15:09:23.691811 ,\n     description :  Image pattern recognition ,\n     featured : true,\n     id : 1377,\n     info : {\n       container :  user_3927 ,\n       thumbnail :  app_1377_thumbnail_1410772569.58.png ,\n       thumbnail_url : null\n    },\n     last_activity : null,\n     last_activity_raw : null,\n     n_tasks : null,\n     n_volunteers : null,\n     name :  myproject ,\n     overall_progress : null,\n     owner : null,\n     short_name :  johndoeproject ,\n     updated :  2017-03-02T21:00:33.965587 \n  },\n   template :  /projects/tutorial.html ,\n   title :  Project: myproject \n}", 
            "title": "Project tasks browse"
        }, 
        {
            "location": "/build_with_pybossa/", 
            "text": "Build with PYBOSSA\n\n\nThis section covers how to you can write and manage your own PYBOSSA\nproject.\n\n\nWe suggest starting by taking a quick look at the overview as this will\nintroduce you to a few pieces of terminology and help you understand how\nthings fit together.", 
            "title": "Build with pybossa"
        }, 
        {
            "location": "/build_with_pybossa/#build-with-pybossa", 
            "text": "This section covers how to you can write and manage your own PYBOSSA\nproject.  We suggest starting by taking a quick look at the overview as this will\nintroduce you to a few pieces of terminology and help you understand how\nthings fit together.", 
            "title": "Build with PYBOSSA"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to the PYBOSSA development\n\n\nThus you have decided that this project is interesting and you want to\nhelp us: \nTHANKS!\n\n\nIf you want to help us you can do it by:\n\n\n\n\n\n\nProposing new features in the \nIssues\n    page\n,\n\n\nSubmitting new bugs/issues in the \nIssues\n    page\n, or\n\n\nFixing bugs and sending us actual code patches.\n\n\n\n\n\n\nThe project is using the popular \nGithub\nWorkflow\n. The basic\nideas of this work flow are the following:\n\n\n\n\n\n\nThe master branch is always deployable, so never ever code there!\n\n\nCreate a branch with a meaningful name and work on it as much as\n    you want.\n\n\nWhen you are ready, issue a git pull request and we will merge it.\n\n\n\n\n\n\nPlease, read carefully the Github workflow and let us know if need help\ncollaborating with us. If you like the framework and you want to\ncontribute, this section explain how you could contribute to the\nproject.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-the-pybossa-development", 
            "text": "Thus you have decided that this project is interesting and you want to\nhelp us:  THANKS!  If you want to help us you can do it by:    Proposing new features in the  Issues\n    page ,  Submitting new bugs/issues in the  Issues\n    page , or  Fixing bugs and sending us actual code patches.    The project is using the popular  Github\nWorkflow . The basic\nideas of this work flow are the following:    The master branch is always deployable, so never ever code there!  Create a branch with a meaningful name and work on it as much as\n    you want.  When you are ready, issue a git pull request and we will merge it.    Please, read carefully the Github workflow and let us know if need help\ncollaborating with us. If you like the framework and you want to\ncontribute, this section explain how you could contribute to the\nproject.", 
            "title": "Contributing to the PYBOSSA development"
        }, 
        {
            "location": "/customizing/", 
            "text": "Configuring PYBOSSA\n\n\nThe PYBOSSA\n\nsettings_local.py.tmpl\n\nfile has all the available configuration options for your server. This\nsection, explains each of them and how you should/could use them in your\nserver.\n\n\nDebug mode\n\n\nThe\n\nDEBUG\n\nmode is disabled by default in the configuration file, as this should be\nonly used when you are running the server for development purposes. You\nshould not enable this option, unless you need to do some debugging in\nthe PYBOSSA server\n\n\n\n\nFor further details about the DEBUG mode in the PYBOSSA server, please,\n\n:   check the official\n    [documentation](https://help.disqus.com/customer/portal/articles/236206).\n\n\n\n\n\nDebug Toolbar\n\n\nPYBOSSA includes a flag to enable a debug toolbar that can give your\nmore insights about the performance of PYBOSSA. We strongly recommend to\nkeep the toolbar disabled in production environments, as it will slow\ndown considerably all the execution of the code. However, if you are\ntesting the server, feel free to enable it adding the following variable\nto the settings file:\n\n\nENABLE_DEBUG_TOOLBAR = True\n\n\n\nHost and Port\n\n\nThe\n\nHOST\n\nand\n\nPORT\n\nconfig variables can be used to force the server to listen in specific\naddresses of your server, as well as at a given port. Usually, you will\nonly need to uncomment the\n\nHOST\n\nvariable in order to listen in all the net interfaces.\n\n\nSecuring the server\n\n\nPYBOSSA uses the \nFlask\nSessions\n feature that\nsigns the cookies cryptographically for storing information. This\nimproves the security of the server, as the user could look at the\ncontents of the cookie but not modify it, unless they know the\n\nSECRET\n\nand\n\nSECRET_KEY\n.\n\n\nTherefore, \nit is very important that you create a new SECRET and\nSECRET_KEY keys for your server and keep them private\n. Please, check\nthe \nFlask Sessions\n\ndocumentation for instructions about how to create good secret keys.\n\n\nDatabase username and password\n\n\nPYBOSSA uses the \nSQLAlchemy\n SQL toolkit to\naccess the DB. In the settings file, you only need to modify the name of\nthe user, password and database name so it fits your needs in the field\n\nSQLALCHEMY_DATABASE_URI\n:\n\n\n'postgresql://username:userpassword@localhost/databasename'\n\n\n\nLoad balance SQL Queries\n\n\nIf you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to\nuse the slave node for load balancing queries between the master and\nslave node.\n\n\nFor enabling this mode, all you have to do is adding to the\nsettings_local.py config file the following:\n\n\n``` {.sourceCode .python}\nSQLALCHEMY_BINDS = {\n    \nslave\n: \npostgresql://user:password@server/pybossadb\n\n}\n\n\n\nIt's dangerous, so better sign this\n-----------------------------------\n\nPYBOSSA uses the It's dangerous Python library that allows you to send\nsome data to untrusted environments, but signing it. Basically, it uses\na key that the server only knows and uses it for signing the data.\n\nThis library is used to send the recovery password e-mails to your\nPYBOSSA users, sending a link with a signed key that will be verified in\nthe server. Thus, **it is very important you create a secure and private\nkey for the it's dangerous module in your configuration file**, just\nmodify the\n[ITSDANGEROUSKEY](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L35).\n\nCORS configuration\n------------------\n\nBy default PYBOSSA has the api endpoints configured with\n**Access-Control-Allow-Origin:**\\*. However, you can change it to\nwhatever you want via the config file. Take a look into the official\ndocumentation for Flask-CORS for all the available options.\n\nModifying the Brand name\n------------------------\n\nYou can configure your project with a different name, instead of the\ndefault one: PYBOSSA. You only need to change the string\n[BRAND](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L38)\nto the name of your organization or project.\n\nAdding a Logo\n-------------\n\nBy default, PYBOSSA does not provide a logo for the server side, so you\nwill have to copy your logo into the folder:\n**pybossa/pybossa/static/img**. If the logo name is, **my\\_brand.png**\nthe\n[LOGO](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L40)\nvariable should be updated with the name of the file.\n\nMultiple languages\n------------------\n\nBy default PYBOSSA only speaks English, however the default theme comes\nwith a few translations (Spanish, French, Italian, Japanese, Greek and\nGerman).\n\nYou can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:\n\n``` {.sourceCode .bash}\n$ cd pybossa \n ln -s themes/default/translations\n\n\n\n\nThis will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme. If you use\nyour own theme, the best thing is to do your own translation, (see\ntranslating), as you might want to name things differently on the\ntemplates.\n\n\nYou can disable/enable different languages in your config file\n\nsettings_local.py\n. For example, to remove French you can add this\nconfiguration to the settings file:\n\n\n``` {.sourceCode .python}\nLOCALES = [(\nen\n, \nEnglish\n), (\nes\n, u\nEspa\u00f1ol\n),\n           (\nit\n, \nItaliano\n), (\nja\n, u\n\u65e5\u672c\u8a9e\n)]\n\n\n\nAlso, you can always specify a different default locale using the\nfollowing snippet in the same settings file\n\n``` {.sourceCode .python}\nDEFAULT_LOCALE = 'es'\n\n\n\n\n\n\nPYBOSSA tries to first match the user preferred language from their\n\n:   browser. This will work for anonymous users, while registered ones\n    can specify the language they want using their user preferences.\n\n\n\n\n\n\n\nAs an alternative way to allow anonymous users to *force* a different\n\n:   language, PYBOSSA looks for a cookie named **language** where it\n    expects the key of any of the supported langes in the LOCALES list.\n    You can use JavaScript to set it up.\n\n\n\n\n\nCreating your own theme\n\n\nPYBOSSA supports themes. By default, it provides its own theme that you\ncan use or if you prefer, copy it and create your own. The default theme\nfor PYBOSSA is available in the \nrepository\npybossa-default-theme\n.\n\n\nIn order to create your theme, all you have to do is to fork the default\ntheme to your own account, and then start modifying it. A theme has a\nvery simple structure:\n\n\n\n\ninfo.json: this file includes some information about the author,\n    license and name.\n\n\nstatic: this folder has all the CSS, JavaScript, images, etc. In\n    other words, the static content.\n\n\ntemplates: this folder has the templates for PYBOSSA.\n\n\n\n\nTherefore, if you want to change the look and feel (i.e. colors of the\ntop bar) all you have to do is to modify the styles.css file of the\nstatic folder. Or if you prefer, create your own.\n\n\nHowever, if you want to modify the structure, let\ns say you want to\nchange the order of the elements of the navigation bar: the first\nelement should be the About link, then you will have to modify the files\nincluded in the templates folder.\n\n\nAs you can see, you will be able to give a full personality to your own\nPYBOSSA server without problems.\n\n\n\n\nYou can specify a different amount of projects per page if you want. Change\n\n:   the default value in your settings\\_local.py file of APPS\\_PER\\_PAGE\n    to the number that you want. By default it gives you access to 20.\n\n\n\n\n\nUsing SASS and minifying JavaScript\n\n\nPYBOSSA supports SASS thanks to Flask-Assets. If you want to compile\nSASS or SCSS just add to your theme static folder a new one named: sass.\nThen, you can request the compiled version from the templates like this:\n\n\n``` {.sourceCode .html}\n{% assets filters=\nlibsass\n, output=\ncss/gen/yourcss.min.css\n,\n          \nsass/yourcss.scss\n%}\n    \n\n{% endassets %}\n\n\n\nThe same can be done for Javascript using the filter minjs:\n\n``` {.sourceCode .html}\n{% assets filters=\njsmin\n, output=\ngen/packed.js\n,\n          \ncommon/jquery.js\n, \nsite/base.js\n, \nsite/widgets.js\n %}\n    \nscript type=\ntext/javascript\n src=\n{{ ASSET_URL }}\n/script\n\n{% endassets %}\n\n\n\n\nResults page\n\n\nPYBOSSA allows you to present a results page for your server. Add a file\nnamed _results.html to the home directory in the templates folder and\nyou\nll be able to show results about your project from one place:\n\n\n\n\nhttp://server/results\n\n\n\n\nAdding your Contact Information\n\n\nBy default, PYBOSSA provides an e-mail and a Twitter handle to contact\nthe PYBOSSA infrastructure. If you want, you can change it to your own\ne-mail and Twitter account. You can do it, modifying the following\nvariables in the \nsettings_local.py\n file:\n\n\n\n\nCONTACT_EMAIL\n = \n\n\nCONTACT_TWITTER\n = \nyourtwitterhandle\n\n\n\n\nTerms of Use\n\n\nYou can change and modify the\n\nTERMSOFUSE\n\nfor your server, by overriding the provided URL that we use by default.\nYou can also modify the license used for the data, just change the\n\nDATAUSE\n link to the open license that you want to use.\n\n\nAdding Help page\n\n\nBy default PYBOSSA provides a help endpoint where you can have your FAQ\nor similar information for your users. However, it\ns empty, as each\nproject is unique. For adding that information, create in the theme\nfolder: templates/help/ a file named \n_index.html\n and write your\ninformation in there. This will render the information under:\n\nhttp://youserver.com/help/\n\n\nEnabling Twitter, Facebook and Google authentication\n\n\nPYBOSSA supports third party authentication services like Twitter,\nFacebook and Google.\n\n\nTwitter\n\n\nIf you want to enable Twitter, you will need to create an application in\n\nTwitter\n and copy and paste the \nConsumer\nkey and secret\n into the next variables:\n\nTWITTER_CONSUMER_KEY\n\nand\n\nTWITTER_CONSUMER_SECRET\n\nand uncomment them.\n\n\n\n\nThis will also enable the Twitter task importer.\n\n\n\n\n\nFacebook\n\n\nIf you want to enable Facebook, you will need to create an application\nin \nFacebook\n and copy and paste\nthe \napp ID/API Key and secret\n into the next variables:\n\nFACEBOOK_APP_ID\n\nand\n\nFACEBOOK_APP_SECRET\n\nand uncomment them.\n\n\nGoogle\n\n\nIf you want to enable Google, you will need to create an application in\n\nGoogle\n and copy and paste the\n\nClient ID and secret\n into the next variables:\n\nGOOGLE_CLIENT_ID\n\nand\n\nGOOGLE_CLIENT_SECRET\n\nand uncomment them.\n\n\nReceiving e-mails with errors\n\n\nIf you want to receive an e-mail when an error occurs in the PYBOSSA\nserver (webhooks, background jobs, etc.), uncomment the\n\nADMINS\n\nconfig variable and add a list of e-mails.\n\n\nBackground jobs error notifications\n\n\nYou can change the default behavior for receiving emails regarding\nfailed background jobs. The two config variables are the following:\n\n\n\n\nFAILED_JOBS_MAILS\n = 7 (days)\n\n\nFAILED_JOBS_RETRIES\n = 3 (times)\n\n\n\n\nFAILED_JOBS_MAILS instructs the system to send you a reminder after 7\ndays, if you have not solved the issue with the background job.\n\n\nFAILED_JOBS_RETRIES instructs the system to retry the job N times. By\ndefault is 3.\n\n\nEnabling Logging\n\n\nPYBOSSA can log errors to a\n\nfile\n\nor to a\n\nSentry\n\nserver. If none of the above configurations are used, you will get the\nerrors in the log file of the web server that you are using (i.e. in\nnginx the errors will be in /var/log/nginx/error.log*).\n\n\nMail Setup\n\n\nPYBOSSA needs a mail server in order to validate new accounts, send\ne-mails for recovering passwords, etc. , so it is very important you\nconfigure a server. Please, check the section \nMail\nsetup\n\nin the config file for configuring it.\n\n\nGlobal Announcements for the users\n\n\nSometimes you will need to send a message to all your users while they\nare browsing the server. For example, an scheduled shutdown for\ninstalling new hardware.\n\n\nPYBOSSA provides a general solution for these announcements via the\n\nsettings_local.py.tmpl\n\nconfiguration file. The announcement feature allows you to send messages\nto the following type of users:\n\n\n\n\n\n\nAuthenticated users\n, basically all the registered users in the\n    server.\n\n\nAdmin users\n, all the users that are admins/root in the server.\n\n\nProject owners\n, all the users that have created one or more\n    projects in the server.\n\n\n\n\n\n\nTherefore, let\ns say that you want to warn all your admins that a new\nconfiguration will be deployed in your system. In this case, all you\nhave to do is to modify the \nANNOUNCEMENT\n variable to display the\nmessage for the given type of users:\n\n\n``` {.sourceCode .python}\nANNOUNCEMENT = {\nroot\n: \nYour secret message\n}\n\n\n\nThere is an example of the **ANNOUNCEMENT** variable in the\n[settings\\_local.py.tmpl](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl)\nfile, so you can easily adapt it for your own server. Basically, the\nannouncement variable has a **key** and an associated **message**. The\nsupported keys are:\n\n\n -   **admin**: for admin users\n\n -   **user**: for all the registered users (even admins)\n\n -   **owner**: for all registered users that have one or more projects\n\n\ndiv class=\nadmonition note\n\n\nYou can use a mix of messages at the same time without problems, so for\nexample you can display a message for Admins and Owners at the same\ntime.\n\n\n/div\n\n\nCache\n-----\n\nBy default PYBOSSA uses Redis to cache a lot of data in order to serve\nit as fast as possible. PYBOSSA comes with a default set of timeouts for\ndifferent views that you can change or modify to your own taste. All you\nhave to do is modify the following variables in your settings file:\n\n    # Project cache\n    APP_TIMEOUT = 15 * 60\n    REGISTERED_USERS_TIMEOUT = 15 * 60\n    ANON_USERS_TIMEOUT = 5 * 60 * 60\n    STATS_FRONTPAGE_TIMEOUT = 12 * 60 * 60\n    STATS_APP_TIMEOUT = 12 * 60 * 60\n    STATS_DRAFT_TIMEOUT = 24 * 60 * 60\n    N_APPS_PER_CATEGORY_TIMEOUT = 60 * 60\n    BROWSE_TASKS_TIMEOUT = 3 * 60 * 60\n    # Category cache\n    CATEGORY_TIMEOUT = 24 * 60 * 60\n    # User cache\n    USER_TIMEOUT = 15 * 60\n    USER_TOP_TIMEOUT = 24 * 60 * 60\n    USER_TOTAL_TIMEOUT = 24 * 60 * 60\n\n\ndiv class=\nadmonition note\n\n\nEvery value is in seconds, so bear in mind to multiply it by 60 in order to\n\n:   have minutes in the configuration values.\n\n\n/div\n\n\n### Disabling the Cache\n\nIf you want to disable the cache, you only have to export the following\nenv variable:\n\n    PYBOSSA_REDIS_CACHE_DISABLED='1'\n\nRate limit for the API\n----------------------\n\nBy default PYBOSSA limits the usage of the API with the following\nvalues:\n\n    LIMIT = 300\n    PER = 15 * 60\n\nThose values mean that when a user sends a request to an API endpoint, a\nwindow of 15 minutes is open, and during those 15 minutes the number of\nallowed requests to the same endpoint is 300. By adding these values to\nyour settings\\_local.py file, you can adapt it to your own needs.\n\n\ndiv class=\nadmonition note\n\n\nPlease, be sure about what you are doing by modifying these values. This is\n\n:   the recommended configuration, so do not modify it unless you are\n    sure.\n\n\n/div\n\n\nConfiguring upload method\n-------------------------\n\nPYBOSSA by default allows you to upload avatars for users, icons for\nprojects, etc. using the local file system of your server. While this is\nnice for small setups, when you need to add more nodes to serve the same\ncontent, this feature could become a problem. For this reason, PYBOSSA\nalso supports cloud solutions to save the files and serve them from\nthere properly.\n\n#### Local Uploader\n\nThe local uploader is configured by default. We recommend to have a\nseparate folder for the assets, outside the pybossa folder. In any case,\nfor enabling this method use the following the config settings:\n\n    UPLOAD_METHOD = 'local'\n    UPLOAD_FOLDER = '/absolute/path/to/your/folder/to/store/assets/'\n\n#### Rackspace Cloud Files\n\nPYBOSSA comes with support for Rackspace CloudFiles service, allowing\nyou to grow horizontally the services. Suportting cloud based system is\nas simple as having an account in Rackspace, and setting up the\nfollowing config variables:\n\n    UPLOAD_METHOD = 'rackspace'\n    RACKSPACE_USERNAME = 'username'\n    RACKSPACE_API_KEY = 'api_key'\n    RACKSPACE_REGION = 'region'\n\nOnce the server is started, it will authenticate against Rackspace and\nsince that moment, your PYBOSSA server will save files in the cloud.\n\nCustomizing the Layout and Front Page text\n------------------------------------------\n\nPYBOSSA allows you to override two items:\n\n\n -   **Front Page Text**\n\n -   **Footer**\n\nIf you want to override those items, you have to create a folder named\n**custom** and place it in the **template** dir. Then for overriding:\n\n\n -   **The Front Page Text**: create a file named\n\n     **front\\_page\\_text.html** and write there some HTML.\n\n -   **The Footer**: create a file named **\\_footer.html**, and write\n\n     some HTML.\n\nTracking the server with Google Analytics\n-----------------------------------------\n\nPYBOSSA provides an easy way to integrate Google Analytics with your\nPYBOSSA server. In order to enable it you only have to create a file\nwith the name: **\\_ga.html** in the **pybossa/template** folder with the\nGoogle Tracking code. PYBOSSA will be including your Google Analytics\ntracking code in every page since that moment.\n\nThe file **\\_ga.html** should contain something like this:\n\n    \nscript type=\ntext/javascript\n\n      var _gaq = _gaq || [];\n      _gaq.push(['_setAccount', 'UA-XXXXXXXX-X']);\n      _gaq.push(['_trackPageview']);\n\n      (function() {\n        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n      })();\n    \n/script\n\n\nAdding a Search box: Google Custom Search\n-----------------------------------------\n\nPYBOSSA provides a simple way to search within the server pages: Google\nCustom Search. In order to enable it you will have to apply for a Google\nCustom Search API key and then follow the next steps:\n\n\n -   Copy the Google Custom Search **script** code\n\n -   Create a new file called **\\_gcs.html** in the templates folder\n\n -   Paste the previous snippet of code (be sure to delete the\n\n     \nlt;gcs:search\ngt;\nlt;/gcse:search\ngt; line from it.\n\n -   Copy the **\\_gcs\\_form.html.template** as **\\_gcs\\_form.html** and\n\n     add your key in the input field **cx** (you will find a text like\n\n     XXXXX:YYYY where you should paste your key)\n\nThe **\\_gcs.html** file will have something like this:\n\n    \nscript\n\n      (function() {\n        var cx = 'XXXXX:YYYY';\n        var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +\n            '//www.google.com/cse/cse.js?cx=' + cx;\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n      })();\n    \n/script\n\n\nAnd the **\\_gcs\\_form.html** will be like this:\n\n    \nform class=\nnavbar-form\n style=\npadding-top:20px;\n action=\n/search\n\n          \ninput type=\nhidden\n name=\ncx\n value=\npartner-pub-XXXXX:YYYYY\n/\n\n          \ninput type=\nhidden\n name=\ncof\n value=\nFORID:10\n /\n\n          \ninput type=\nhidden\n name=\nie\n value=\nISO-8859-1\n /\n\n          \ndiv class=\ninput-append\n\n          \ninput type=\ntext\n name=\nq\n size=\n21\n class=\ninput-small\n placeholder=\nSearch\n  /\n\n          \nspan class=\nadd-on\ni class=\nicon-search\n style=\ncolor:black\n/i\n/span\n\n          \n/div\n\n    \n/form\n\n\nAfter these steps, your site will be indexed by Google and Google Custom\nSearch will be working, providing for your users a search tool.\n\nAdding web maps for project statistics\n--------------------------------------\n\nPYBOSSA creates for each project a statistics page, where the creators\nof the project and the volunteers can check the top 5 anonymous and\nauthenticated users, an estimation of time about when all the tasks will\nbe completed, etc.\n\nOne interesting feature of the statistics page is that it can generate a\nweb map showing the location of the anonymous volunteers that have been\nparticipating in the project. By default the maps are disabled, because\nyou will need to download the GeoLiteCity DAT file database that will be\nuse for generating the maps.\n\n[GeoLite](http://dev.maxmind.com/geoip/geolite) is a free\ngeolocatication database from MaxMind that they release under a\n[Creative Commons Attribution-ShareAlike 3.0 Uported\nLicense](http://creativecommons.org/licenses/by-sa/3.0/). You can\ndownload the required file: GeoLite City from this\n[page](http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz).\nOnce you have downloaded the file, all you have to do is to uncompress\nit and place it in the folder **/dat** of the pybossa root folder.\n\nAfter copying the file, all you have to do to start creating the maps is\nto restart the server.\n\nUsing your own Terms of Use\n---------------------------\n\nPYBOSSA has a default Terms of Service page that you can customize it to\nfit your institutional needs. In the case that you do not want to use\nthe default one, please, create a **\\_tos.html** file in the **custom**\nfolder. You can re-use the template **help/\\_tos.html** and adapt it (it\nis located in the **template/help** folder.\n\nUsing your own Cookies Policy\n-----------------------------\n\nPYBOSSA has a default cookies policy page, but you can customize it to\nfit your institutional needs. In the case that you do not want to use\nthe default one, please, create a **\\_cookies\\_policy.html** file in the\n**custom** folder. You can re-use the template\n**help/\\_cookies\\_policy.html** and adapt it (it is located in the\n**template/help** folder.\n\nUsing your own Privacy Policy\n-----------------------------\n\nPYBOSSA has a blank privacy policy page. We recommend you to add one, so\nyour users know how you are using their data. To add it, just create a\nfile named **\\_privacy\\_policy.html** file in the **custom** folder.\n\nExporting data to a CKAN server\n-------------------------------\n\n[CKAN](http://ckan.org) is a powerful data management system that makes\ndata accessible \u2013 by providing tools to streamline publishing, sharing,\nfinding and using data. [CKAN](http://ckan.org) is aimed at data\npublishers (national and regional governments, companies and\norganizations) wanting to make their data open and available.\n\nPYBOSSA can export project's data to a [CKAN](http://ckan.org) server.\nIn order to use this feature, you will need to add the following config\nvariables to the settings\\_loca.py file:\n\n``` {.sourceCode .python\n # CKAN URL for API calls\n CKAN_NAME = \nDemo CKAN server\n\n CKAN_URL = \nhttp://demo.ckan.org\n}\n\n\n\n\nAs \nCKAN\n is open source, you can install your own\n\nCKAN\n server and configure it to host the data\ngenerated by your PYBOSSA projects quite easily, making it the data\nrepository for your own projects. Another alternative is to use the \nthe\nData hub\n service that it is actually a free CKAN\nservice for hosting your data.\n\n\nEnforce Privacy mode\n\n\nSome projects need sometimes a way to protect their contributors due to\nthe nature of the project. In this cases, where privacy is really\nimportant, PYBOSSA allows you to \nlock\n all the public pages related\nto the users and statistics about the site and projects. Specifically,\nby enabling this mode only administrators will be able to see the\nfollowing pages:\n\n\n\n\n\n\nhttp://server/stats\n\n\nhttp://server/account/\n\n\nhttp://server/account/user/\n\n\nhttp://server/project/stats\n\n\n\n\n\n\nAnonymous and authenticated will see a warning message like this:\n\n\n\n\nAdditionally, the footer and front page top users will be removed with\nlinks to all these pages. If your project needs this type of protection\nyou can enable it by changing the following config variable in your\n\nsettings_local.py\n file from:\n\n\n``` {.sourceCode .python}\nENFORCE_PRIVACY = False\n\n\n\nTo:\n\n``` {.sourceCode .python}\nENFORCE_PRIVACY = True\n\n\n\n\n\n\nThis feature is disabled by default.\n\n\n\n\n\nAdding your own templates\n\n\nPYBOSSA supports different types of templates that you can offer for\nevery project. By default, PYBOSSA comes with the following templates:\n\n\n\n\n\n\nBasic\n: the most basic template. It only has the basic\n    structure to develop your project.\n\n\nImage\n: this template is for image pattern recognition.\n\n\nSound\n: similar to the image template, but for sound clips\n    hosted in SoundCloud.\n\n\nVideo\n: similar to the imaage template, but for video clips\n    hostes in Vimeo.\n\n\nMap\n: this template is for geocoding prorjects.\n\n\nPDF\n: this template is for transcribing documents.\n\n\n\n\n\n\nIf you want to add your own template, or remove one, just create in the\nsettings_local.py file a variable named \nPRESENTERS\n and add remove\nthe ones you want:\n\n\nPRESENTERS = [\"basic\", \"image\", \"sound\", \"video\", \"map\", \"pdf\", \"yourtemplate\"]\n\n\n\nYourtemplate\n should be a template that you have to save in the theme\nfolder: \n/templates/projects/snippets/\n with the same name. Check the\nother templates to use them as a base layer for your template.\n\n\nAfter adding the template, the server will start offering this new\ntemplate to your users.\n\n\nIn addition to the project templates themselves, you can add some test\ntasks for those projects so that the users can import them to their\nprojects and start \nplaying\n with them, or taking their format as a\nstarting point to create their own. These tasks can be imported from\nGoogle Docs spreadsheets, and you can add them, remove them, or modify\nthe URLs of the spreadsheets changing the value of the variable\n\nTEMPLATE_TASKS\n in settings_local.py:\n\n\nTEMPLATE_TASKS = {\n\n\n:   \nimage\n:\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE\nusp=sharing\n,\n    \nsound\n:\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc\nusp=sharing\n,\n    \nvideo\n:\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc\nusp=sharing\n,\n    \nmap\n:\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc\nusp=sharing\n,\n    \npdf\n:\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE\nusp=sharing\n}\n\n\nSetting an expiration time for project passwords\n\n\nPYBOSSA allows the owner of a project to set a password so that only\npeople (both anonymous or authenticated) that know it can contribute. By\nentering this password, the user will have access to the project for a\ntime specified by:\n\n\nPASSWD_COOKIE_TIMEOUT = 60 * 30\n\n\n\nWhich defaults to 30 minutes.\n\n\nValidation of new user accounts\n\n\nWhenever a new user wants to sign up, PYBOSSA allows you to add some\nextra security to the process by making the users have to validate a\nreal email account.\n\n\nHowever, if you don\nt need this feature, it can be disabled (as it is by\ndefault) with this configuration parameter:\n\n\nACCOUNT_CONFIRMATION_DISABLED = True\n\n\n\nSending weekly email stats to project owners\n\n\nProject owners that have the pro flag set to True can receive every week\nan update with the latest statistics about their projects in their email\nbox.\n\n\nBy default this email is sent every Sunday. You can modify it in the\nsettings file by changing it to another day:\n\n\nWEEKLY_UPDATE_STATS = \nTuesday\n\n\nNewsletters with Mailchimp\n\n\nPYBOSSA can show a subscription page to users when they create an\naccount. By default is disabled, but if you want to enable it the system\nwill show the page to registered users only once, to check if they want\nto be subscribed or not.\n\n\nIn order to support newsletters, you\nll have to create an account in\nMailchimp and get an API_KEY as well as a LIST_ID to add the users.\nOnce you\nve those two items you can enable the newsletter subscription\nas simple as this, add to your settings_local.py file the following\nvalues:\n\n\nMAILCHIMP_API_KEY = \"your-key\"\nMAILCHIMP_LIST_ID = \"your-list-id\"\n\n\n\nRestart the server, and you will be done. Now in your Mailchimp account\nyou will be able to create campaigns, and communicate with your\nregistered and interested users.\n\n\nEnabling the Flickr Task importer\n\n\nPYBOSSA has several different types of built-in importers. Users can use\nthem to import tasks for their projects directly from the Web interface.\nHowever, using the Flickr one requires an API key and shared secret from\nFlickr in order to communicate with the service.\n\n\nOnce you have an API key, you\nll have to add it to your\nsettings_local.py file:\n\n\nFLICKR_API_KEY = \"your-key\"\nFLICKR_SHARED_SECRET = \"your-secret\"\n\n\n\nFor more information on how to get a Flickr API key and shared secret,\nplease refer to \nhere\n.\n\n\nEnabling the Dropbox Task importer\n\n\nPYBOSSA also offers the Dropbox importer, which allows to import\ndirectly all kind of files from a Dropbox account. In order to use it,\nyou\nll need to register your PYBOSSA server as a Dropbox app, as\nexplained\n\nhere\n.\n\n\nDon\nt worry about the Javascript snippet part, we\nve already handled\nthat for you. Instead, get the App key you will be given and add it to\nyour settings_local.py:\n\n\nDROPBOX_APP_KEY = 'your-key'\n\n\n\nEnabling the Twitter Task importer\n\n\nIf you already have enabled the Twitter authentication, then the Twitter\ntask importer will be enabled too. Otherwise, you will need to create an\napplication in \nTwitter\n and copy and paste\nthe \nConsumer key and secret\n into the next variables:\n\nTWITTER_CONSUMER_KEY\n\nand\n\nTWITTER_CONSUMER_SECRET\n\nand uncomment them.\n\n\n\n\nThis will also enable PYBOSSA's Twitter login.\n\n\n\n\n\nEnabling the Youtube Task importer\n\n\nThe Youtube task importer needs a Youtube server key which you need to\ncreate in the \nGoogle API\nConsole\n in YouTube Data API.\n\n\nOnce you have an API key, you\nll have to add it to your\nsettings_local.py file:\n\n\nYOUTUBE_API_SERVER_KEY = \"your-key\"\n\n\n\nFor more information on how to get a Youtube server key, please refer to\n\nhere\n.\n\n\nEnabling Server Sent Events\n\n\nSince PYBOSSA v1.1.0, PYBOSSA supports Server Sent Events (SSE) in some\nviews. This feature is really powerfull, however it brings some issues\nwith it: it need to run PYBOSSA in asynchronous mode.\n\n\nAs this is not a necessity, by default PYBOSSA has this feature\ndisabled. PYBOSSA uses SSE to notify users about specific actions (i.e.\nthe result of a webhook in real time).\n\n\nIf you want to enable it, you will have to add to your\nsettings_local.py:\n\n\nSSE = True\n\n\n\nAlso, you will need to configure uwsgi and nginx to support SSE events.\nThis is not trivial, as there are several different scenarios, libraries\nand options, so instead of recommending one solution, we invite you to\nread the \nuwsgi documentation about\nit\n, so you can\ntake a decission based on your own infrastructure and preferences.\n\n\nLatest news from PYBOSSA\n\n\nSince version v1.2.1 PYBOSSA gets the latest news of its new releases,\nas well as anything related to what it\ns produced by SciFabric regarding\nthe crowdsourcing world. You can add more items if you want, by just\nadding to your settings_local.py file new ATOM URLs:\n\n\nNEWS_URL = ['http:/http:///atomurl1', 'http://atomurl2', ...]\n\n\n\nEnabling pro user features\n\n\nSince version v1.2.2 PYBOSSA allows making available to all the users\ncertain features that were before reserved to pro users.\n\n\nJust locate them in the settings_local.py file. By default, they look\nlike:\n\n\nPRO_FEATURES = {\n    'auditlog':              True,\n    'webhooks':              True,\n    'updated_exports':       True,\n    'notify_blog_updates':   True,\n    'project_weekly_report': True,\n    'autoimporter':          True,\n    'better_stats':          True\n}\n\n\n\nBy choosing \nTrue\n on each of them, you are making that specific feature\navailable only to pro users. On the other hand, selecting \nFalse\n makes\nthem available to regular users as well.\n\n\nStrict Slashes\n\n\nBy default PYBOSSA distinguish between two types of URLs for its\nendpoints: with and without a traling slash. In other words, if an\nendpoint is not declared within the code as accepting both options,\naccessing the same endpoint with a trailing slash will return a 404.\n\n\nFor example, the about endpoint:\n\n\nGET /about\n\n\n\nWill return the page, but with the default configuration it will return\na 404 if you add a trailing slash to it:\n\n\nGET /about/\n\n\n\nTo disable this behavior, just use the STRICT_SLASHES option and set it\nto False. That option willensure that both endpoints works with and\nwithout the trailing slash.\n\n\nDisqus Single Sign On (SSO)\n\n\nPYBOSSA supports Disqus SSO, however it is disabled by default. You need\nto register a Disqus application (see their\n\ndocumentation\n)\nand then update your settings_local.py file with the following two\nkeys:\n\n\nDISQUS_SECRET_KEY\nDISQUS_PUBLIC_KEY\n\n\n\nThen, this will enable you to use a new Jinja2 filter for authenticating\nPYBOSSA users directly in their Disqus server. The filter is\n\ndisqus_sso\n. You can use it like this:\n\n\n{% if current_user.is_authenticated() %}\n{{ current_user | disqus_sso | safe }}\n{% else %}\n{{ None | disqus_sso | safe }}\n{% endif %}\n\n\n\nAlso, if you are building a Single Page Application, you can use our API\nendpoint: \napi/disqus/sso\n to get the credentials and authenticate the\nusers within your javascript. Check the endpoint information disqus-api.\n\n\nBackground jobs timeout\n\n\nBy default PYBOSSA timeout for every job is 10 minutes. In principle it\nshould be fine, but each project and server is unique, so if you start\nseeing to many jobs failing because the job timed out, then, increase\nthe value using this config variables:\n\n\nMINUTE = 60\nTIMEOUT = 20 * 60\n\n\n\nWeb Push notifications\n\n\n\n\nYou need to have HTTPS enabled for your site, otherwise you will need to\nuse a subdomain from onesignal.com in order to support this feature. If\nyou cannot use HTTPS we recommend to not enable it.\n\n\n\n\n\nPYBOSSA can send web push notifications to Google Chrome, Mozilla\nFirefox and Safari browsers.\n\n\nFor supporting this feature, PYBOSSA uses the Onesignal.com service. You\nwill need an account and create an app for your PYBOSSA server. Then\nfollow their documentation to download the WebPush SDK and configure\nyour PYBOSSA theme.\n\n\nFor more info regarding Onesignal, check their\n\ndocumentation.\n\n\n\n\nYou can host the SDK files in the static folder of your theme. However\nyou will need to modify your web server (Apache or Nginx) to serve those\nfiles as from the root of your server. If this is not done properly, it\nwill not work.\n\n\n\n\n\nAfter you have created the app in Onesignal get the API KEY and APP ID.\nThen copy them and put it in your settings_local.py file:\n\n\nONESIGNAL_APP_ID = 'app-id'\nONESIGNAL_API_KEY = 'app-key'\n\n\n\nRestart the server, and add one background worker for the \nwebpush\n\nqueue. This queue will handle the creation of the apps, as well as\nsending the push notifications.\n\n\nThen you will need to update your PYBOSSA theme in order to allow your\nusers to subscribe. As this could vary a lot from one project to\nanother, we do not provide a template but some guidelines:\n\n\n\n\n\n\nUse the JS SDK to subscribe a user to a given project using the\n    \ntags\n option of Onesignal.\n\n\nPYBOSSA sends notifications using those tags thanks to the\n    \nfilters\n option that allows us to segment traffic. PYBOSSA is\n    especting the project.id as the tag key for segmenting.\n\n\nThe JS SDK allows you to subscribe/unsubscribe a user to a give\n    project (not only the whole server) with special methods for\n    adding tags and deleting them. This works independently if the\n    user is authenticated or not.\n\n\n\n\n\n\nFor more info regarding Onesignal JS SDK, check their\n\ndocumentation.", 
            "title": "Customizing"
        }, 
        {
            "location": "/customizing/#configuring-pybossa", 
            "text": "The PYBOSSA settings_local.py.tmpl \nfile has all the available configuration options for your server. This\nsection, explains each of them and how you should/could use them in your\nserver.", 
            "title": "Configuring PYBOSSA"
        }, 
        {
            "location": "/customizing/#debug-mode", 
            "text": "The DEBUG \nmode is disabled by default in the configuration file, as this should be\nonly used when you are running the server for development purposes. You\nshould not enable this option, unless you need to do some debugging in\nthe PYBOSSA server  \n\nFor further details about the DEBUG mode in the PYBOSSA server, please,\n\n:   check the official\n    [documentation](https://help.disqus.com/customer/portal/articles/236206).", 
            "title": "Debug mode"
        }, 
        {
            "location": "/customizing/#debug-toolbar", 
            "text": "PYBOSSA includes a flag to enable a debug toolbar that can give your\nmore insights about the performance of PYBOSSA. We strongly recommend to\nkeep the toolbar disabled in production environments, as it will slow\ndown considerably all the execution of the code. However, if you are\ntesting the server, feel free to enable it adding the following variable\nto the settings file:  ENABLE_DEBUG_TOOLBAR = True", 
            "title": "Debug Toolbar"
        }, 
        {
            "location": "/customizing/#host-and-port", 
            "text": "The HOST \nand PORT \nconfig variables can be used to force the server to listen in specific\naddresses of your server, as well as at a given port. Usually, you will\nonly need to uncomment the HOST \nvariable in order to listen in all the net interfaces.", 
            "title": "Host and Port"
        }, 
        {
            "location": "/customizing/#securing-the-server", 
            "text": "PYBOSSA uses the  Flask\nSessions  feature that\nsigns the cookies cryptographically for storing information. This\nimproves the security of the server, as the user could look at the\ncontents of the cookie but not modify it, unless they know the SECRET \nand SECRET_KEY .  Therefore,  it is very important that you create a new SECRET and\nSECRET_KEY keys for your server and keep them private . Please, check\nthe  Flask Sessions \ndocumentation for instructions about how to create good secret keys.", 
            "title": "Securing the server"
        }, 
        {
            "location": "/customizing/#database-username-and-password", 
            "text": "PYBOSSA uses the  SQLAlchemy  SQL toolkit to\naccess the DB. In the settings file, you only need to modify the name of\nthe user, password and database name so it fits your needs in the field SQLALCHEMY_DATABASE_URI :  'postgresql://username:userpassword@localhost/databasename'", 
            "title": "Database username and password"
        }, 
        {
            "location": "/customizing/#load-balance-sql-queries", 
            "text": "If you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to\nuse the slave node for load balancing queries between the master and\nslave node.  For enabling this mode, all you have to do is adding to the\nsettings_local.py config file the following:  ``` {.sourceCode .python}\nSQLALCHEMY_BINDS = {\n     slave :  postgresql://user:password@server/pybossadb \n}  \nIt's dangerous, so better sign this\n-----------------------------------\n\nPYBOSSA uses the It's dangerous Python library that allows you to send\nsome data to untrusted environments, but signing it. Basically, it uses\na key that the server only knows and uses it for signing the data.\n\nThis library is used to send the recovery password e-mails to your\nPYBOSSA users, sending a link with a signed key that will be verified in\nthe server. Thus, **it is very important you create a secure and private\nkey for the it's dangerous module in your configuration file**, just\nmodify the\n[ITSDANGEROUSKEY](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L35).\n\nCORS configuration\n------------------\n\nBy default PYBOSSA has the api endpoints configured with\n**Access-Control-Allow-Origin:**\\*. However, you can change it to\nwhatever you want via the config file. Take a look into the official\ndocumentation for Flask-CORS for all the available options.\n\nModifying the Brand name\n------------------------\n\nYou can configure your project with a different name, instead of the\ndefault one: PYBOSSA. You only need to change the string\n[BRAND](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L38)\nto the name of your organization or project.\n\nAdding a Logo\n-------------\n\nBy default, PYBOSSA does not provide a logo for the server side, so you\nwill have to copy your logo into the folder:\n**pybossa/pybossa/static/img**. If the logo name is, **my\\_brand.png**\nthe\n[LOGO](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl#L40)\nvariable should be updated with the name of the file.\n\nMultiple languages\n------------------\n\nBy default PYBOSSA only speaks English, however the default theme comes\nwith a few translations (Spanish, French, Italian, Japanese, Greek and\nGerman).\n\nYou can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:\n\n``` {.sourceCode .bash}\n$ cd pybossa   ln -s themes/default/translations  This will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme. If you use\nyour own theme, the best thing is to do your own translation, (see\ntranslating), as you might want to name things differently on the\ntemplates.  You can disable/enable different languages in your config file settings_local.py . For example, to remove French you can add this\nconfiguration to the settings file:  ``` {.sourceCode .python}\nLOCALES = [( en ,  English ), ( es , u Espa\u00f1ol ),\n           ( it ,  Italiano ), ( ja , u \u65e5\u672c\u8a9e )]  \nAlso, you can always specify a different default locale using the\nfollowing snippet in the same settings file\n\n``` {.sourceCode .python}\nDEFAULT_LOCALE = 'es'  \n\nPYBOSSA tries to first match the user preferred language from their\n\n:   browser. This will work for anonymous users, while registered ones\n    can specify the language they want using their user preferences.  \n\nAs an alternative way to allow anonymous users to *force* a different\n\n:   language, PYBOSSA looks for a cookie named **language** where it\n    expects the key of any of the supported langes in the LOCALES list.\n    You can use JavaScript to set it up.", 
            "title": "Load balance SQL Queries"
        }, 
        {
            "location": "/customizing/#creating-your-own-theme", 
            "text": "PYBOSSA supports themes. By default, it provides its own theme that you\ncan use or if you prefer, copy it and create your own. The default theme\nfor PYBOSSA is available in the  repository\npybossa-default-theme .  In order to create your theme, all you have to do is to fork the default\ntheme to your own account, and then start modifying it. A theme has a\nvery simple structure:   info.json: this file includes some information about the author,\n    license and name.  static: this folder has all the CSS, JavaScript, images, etc. In\n    other words, the static content.  templates: this folder has the templates for PYBOSSA.   Therefore, if you want to change the look and feel (i.e. colors of the\ntop bar) all you have to do is to modify the styles.css file of the\nstatic folder. Or if you prefer, create your own.  However, if you want to modify the structure, let s say you want to\nchange the order of the elements of the navigation bar: the first\nelement should be the About link, then you will have to modify the files\nincluded in the templates folder.  As you can see, you will be able to give a full personality to your own\nPYBOSSA server without problems.  \n\nYou can specify a different amount of projects per page if you want. Change\n\n:   the default value in your settings\\_local.py file of APPS\\_PER\\_PAGE\n    to the number that you want. By default it gives you access to 20.", 
            "title": "Creating your own theme"
        }, 
        {
            "location": "/customizing/#using-sass-and-minifying-javascript", 
            "text": "PYBOSSA supports SASS thanks to Flask-Assets. If you want to compile\nSASS or SCSS just add to your theme static folder a new one named: sass.\nThen, you can request the compiled version from the templates like this:  ``` {.sourceCode .html}\n{% assets filters= libsass , output= css/gen/yourcss.min.css ,\n           sass/yourcss.scss %}\n     \n{% endassets %}  \nThe same can be done for Javascript using the filter minjs:\n\n``` {.sourceCode .html}\n{% assets filters= jsmin , output= gen/packed.js ,\n           common/jquery.js ,  site/base.js ,  site/widgets.js  %}\n     script type= text/javascript  src= {{ ASSET_URL }} /script \n{% endassets %}", 
            "title": "Using SASS and minifying JavaScript"
        }, 
        {
            "location": "/customizing/#results-page", 
            "text": "PYBOSSA allows you to present a results page for your server. Add a file\nnamed _results.html to the home directory in the templates folder and\nyou ll be able to show results about your project from one place:   http://server/results", 
            "title": "Results page"
        }, 
        {
            "location": "/customizing/#adding-your-contact-information", 
            "text": "By default, PYBOSSA provides an e-mail and a Twitter handle to contact\nthe PYBOSSA infrastructure. If you want, you can change it to your own\ne-mail and Twitter account. You can do it, modifying the following\nvariables in the  settings_local.py  file:   CONTACT_EMAIL  =   CONTACT_TWITTER  =  yourtwitterhandle", 
            "title": "Adding your Contact Information"
        }, 
        {
            "location": "/customizing/#terms-of-use", 
            "text": "You can change and modify the TERMSOFUSE \nfor your server, by overriding the provided URL that we use by default.\nYou can also modify the license used for the data, just change the DATAUSE  link to the open license that you want to use.", 
            "title": "Terms of Use"
        }, 
        {
            "location": "/customizing/#adding-help-page", 
            "text": "By default PYBOSSA provides a help endpoint where you can have your FAQ\nor similar information for your users. However, it s empty, as each\nproject is unique. For adding that information, create in the theme\nfolder: templates/help/ a file named  _index.html  and write your\ninformation in there. This will render the information under: http://youserver.com/help/", 
            "title": "Adding Help page"
        }, 
        {
            "location": "/customizing/#enabling-twitter-facebook-and-google-authentication", 
            "text": "PYBOSSA supports third party authentication services like Twitter,\nFacebook and Google.", 
            "title": "Enabling Twitter, Facebook and Google authentication"
        }, 
        {
            "location": "/customizing/#twitter", 
            "text": "If you want to enable Twitter, you will need to create an application in Twitter  and copy and paste the  Consumer\nkey and secret  into the next variables: TWITTER_CONSUMER_KEY \nand TWITTER_CONSUMER_SECRET \nand uncomment them.  \n\nThis will also enable the Twitter task importer.", 
            "title": "Twitter"
        }, 
        {
            "location": "/customizing/#facebook", 
            "text": "If you want to enable Facebook, you will need to create an application\nin  Facebook  and copy and paste\nthe  app ID/API Key and secret  into the next variables: FACEBOOK_APP_ID \nand FACEBOOK_APP_SECRET \nand uncomment them.", 
            "title": "Facebook"
        }, 
        {
            "location": "/customizing/#google", 
            "text": "If you want to enable Google, you will need to create an application in Google  and copy and paste the Client ID and secret  into the next variables: GOOGLE_CLIENT_ID \nand GOOGLE_CLIENT_SECRET \nand uncomment them.", 
            "title": "Google"
        }, 
        {
            "location": "/customizing/#receiving-e-mails-with-errors", 
            "text": "If you want to receive an e-mail when an error occurs in the PYBOSSA\nserver (webhooks, background jobs, etc.), uncomment the ADMINS \nconfig variable and add a list of e-mails.", 
            "title": "Receiving e-mails with errors"
        }, 
        {
            "location": "/customizing/#background-jobs-error-notifications", 
            "text": "You can change the default behavior for receiving emails regarding\nfailed background jobs. The two config variables are the following:   FAILED_JOBS_MAILS  = 7 (days)  FAILED_JOBS_RETRIES  = 3 (times)   FAILED_JOBS_MAILS instructs the system to send you a reminder after 7\ndays, if you have not solved the issue with the background job.  FAILED_JOBS_RETRIES instructs the system to retry the job N times. By\ndefault is 3.", 
            "title": "Background jobs error notifications"
        }, 
        {
            "location": "/customizing/#enabling-logging", 
            "text": "PYBOSSA can log errors to a file \nor to a Sentry \nserver. If none of the above configurations are used, you will get the\nerrors in the log file of the web server that you are using (i.e. in\nnginx the errors will be in /var/log/nginx/error.log*).", 
            "title": "Enabling Logging"
        }, 
        {
            "location": "/customizing/#mail-setup", 
            "text": "PYBOSSA needs a mail server in order to validate new accounts, send\ne-mails for recovering passwords, etc. , so it is very important you\nconfigure a server. Please, check the section  Mail\nsetup \nin the config file for configuring it.", 
            "title": "Mail Setup"
        }, 
        {
            "location": "/customizing/#global-announcements-for-the-users", 
            "text": "Sometimes you will need to send a message to all your users while they\nare browsing the server. For example, an scheduled shutdown for\ninstalling new hardware.  PYBOSSA provides a general solution for these announcements via the settings_local.py.tmpl \nconfiguration file. The announcement feature allows you to send messages\nto the following type of users:    Authenticated users , basically all the registered users in the\n    server.  Admin users , all the users that are admins/root in the server.  Project owners , all the users that have created one or more\n    projects in the server.    Therefore, let s say that you want to warn all your admins that a new\nconfiguration will be deployed in your system. In this case, all you\nhave to do is to modify the  ANNOUNCEMENT  variable to display the\nmessage for the given type of users:  ``` {.sourceCode .python}\nANNOUNCEMENT = { root :  Your secret message }  \nThere is an example of the **ANNOUNCEMENT** variable in the\n[settings\\_local.py.tmpl](https://github.com/Scifabric/pybossa/blob/master/settings_local.py.tmpl)\nfile, so you can easily adapt it for your own server. Basically, the\nannouncement variable has a **key** and an associated **message**. The\nsupported keys are:  -   **admin**: for admin users  -   **user**: for all the registered users (even admins)  -   **owner**: for all registered users that have one or more projects div class= admonition note \n\nYou can use a mix of messages at the same time without problems, so for\nexample you can display a message for Admins and Owners at the same\ntime. /div \n\nCache\n-----\n\nBy default PYBOSSA uses Redis to cache a lot of data in order to serve\nit as fast as possible. PYBOSSA comes with a default set of timeouts for\ndifferent views that you can change or modify to your own taste. All you\nhave to do is modify the following variables in your settings file:\n\n    # Project cache\n    APP_TIMEOUT = 15 * 60\n    REGISTERED_USERS_TIMEOUT = 15 * 60\n    ANON_USERS_TIMEOUT = 5 * 60 * 60\n    STATS_FRONTPAGE_TIMEOUT = 12 * 60 * 60\n    STATS_APP_TIMEOUT = 12 * 60 * 60\n    STATS_DRAFT_TIMEOUT = 24 * 60 * 60\n    N_APPS_PER_CATEGORY_TIMEOUT = 60 * 60\n    BROWSE_TASKS_TIMEOUT = 3 * 60 * 60\n    # Category cache\n    CATEGORY_TIMEOUT = 24 * 60 * 60\n    # User cache\n    USER_TIMEOUT = 15 * 60\n    USER_TOP_TIMEOUT = 24 * 60 * 60\n    USER_TOTAL_TIMEOUT = 24 * 60 * 60 div class= admonition note \n\nEvery value is in seconds, so bear in mind to multiply it by 60 in order to\n\n:   have minutes in the configuration values. /div \n\n### Disabling the Cache\n\nIf you want to disable the cache, you only have to export the following\nenv variable:\n\n    PYBOSSA_REDIS_CACHE_DISABLED='1'\n\nRate limit for the API\n----------------------\n\nBy default PYBOSSA limits the usage of the API with the following\nvalues:\n\n    LIMIT = 300\n    PER = 15 * 60\n\nThose values mean that when a user sends a request to an API endpoint, a\nwindow of 15 minutes is open, and during those 15 minutes the number of\nallowed requests to the same endpoint is 300. By adding these values to\nyour settings\\_local.py file, you can adapt it to your own needs. div class= admonition note \n\nPlease, be sure about what you are doing by modifying these values. This is\n\n:   the recommended configuration, so do not modify it unless you are\n    sure. /div \n\nConfiguring upload method\n-------------------------\n\nPYBOSSA by default allows you to upload avatars for users, icons for\nprojects, etc. using the local file system of your server. While this is\nnice for small setups, when you need to add more nodes to serve the same\ncontent, this feature could become a problem. For this reason, PYBOSSA\nalso supports cloud solutions to save the files and serve them from\nthere properly.\n\n#### Local Uploader\n\nThe local uploader is configured by default. We recommend to have a\nseparate folder for the assets, outside the pybossa folder. In any case,\nfor enabling this method use the following the config settings:\n\n    UPLOAD_METHOD = 'local'\n    UPLOAD_FOLDER = '/absolute/path/to/your/folder/to/store/assets/'\n\n#### Rackspace Cloud Files\n\nPYBOSSA comes with support for Rackspace CloudFiles service, allowing\nyou to grow horizontally the services. Suportting cloud based system is\nas simple as having an account in Rackspace, and setting up the\nfollowing config variables:\n\n    UPLOAD_METHOD = 'rackspace'\n    RACKSPACE_USERNAME = 'username'\n    RACKSPACE_API_KEY = 'api_key'\n    RACKSPACE_REGION = 'region'\n\nOnce the server is started, it will authenticate against Rackspace and\nsince that moment, your PYBOSSA server will save files in the cloud.\n\nCustomizing the Layout and Front Page text\n------------------------------------------\n\nPYBOSSA allows you to override two items:  -   **Front Page Text**  -   **Footer**\n\nIf you want to override those items, you have to create a folder named\n**custom** and place it in the **template** dir. Then for overriding:  -   **The Front Page Text**: create a file named      **front\\_page\\_text.html** and write there some HTML.  -   **The Footer**: create a file named **\\_footer.html**, and write      some HTML.\n\nTracking the server with Google Analytics\n-----------------------------------------\n\nPYBOSSA provides an easy way to integrate Google Analytics with your\nPYBOSSA server. In order to enable it you only have to create a file\nwith the name: **\\_ga.html** in the **pybossa/template** folder with the\nGoogle Tracking code. PYBOSSA will be including your Google Analytics\ntracking code in every page since that moment.\n\nThe file **\\_ga.html** should contain something like this:\n\n     script type= text/javascript \n      var _gaq = _gaq || [];\n      _gaq.push(['_setAccount', 'UA-XXXXXXXX-X']);\n      _gaq.push(['_trackPageview']);\n\n      (function() {\n        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n      })();\n     /script \n\nAdding a Search box: Google Custom Search\n-----------------------------------------\n\nPYBOSSA provides a simple way to search within the server pages: Google\nCustom Search. In order to enable it you will have to apply for a Google\nCustom Search API key and then follow the next steps:  -   Copy the Google Custom Search **script** code  -   Create a new file called **\\_gcs.html** in the templates folder  -   Paste the previous snippet of code (be sure to delete the       lt;gcs:search gt; lt;/gcse:search gt; line from it.  -   Copy the **\\_gcs\\_form.html.template** as **\\_gcs\\_form.html** and      add your key in the input field **cx** (you will find a text like      XXXXX:YYYY where you should paste your key)\n\nThe **\\_gcs.html** file will have something like this:\n\n     script \n      (function() {\n        var cx = 'XXXXX:YYYY';\n        var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;\n        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +\n            '//www.google.com/cse/cse.js?cx=' + cx;\n        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);\n      })();\n     /script \n\nAnd the **\\_gcs\\_form.html** will be like this:\n\n     form class= navbar-form  style= padding-top:20px;  action= /search \n           input type= hidden  name= cx  value= partner-pub-XXXXX:YYYYY / \n           input type= hidden  name= cof  value= FORID:10  / \n           input type= hidden  name= ie  value= ISO-8859-1  / \n           div class= input-append \n           input type= text  name= q  size= 21  class= input-small  placeholder= Search   / \n           span class= add-on i class= icon-search  style= color:black /i /span \n           /div \n     /form \n\nAfter these steps, your site will be indexed by Google and Google Custom\nSearch will be working, providing for your users a search tool.\n\nAdding web maps for project statistics\n--------------------------------------\n\nPYBOSSA creates for each project a statistics page, where the creators\nof the project and the volunteers can check the top 5 anonymous and\nauthenticated users, an estimation of time about when all the tasks will\nbe completed, etc.\n\nOne interesting feature of the statistics page is that it can generate a\nweb map showing the location of the anonymous volunteers that have been\nparticipating in the project. By default the maps are disabled, because\nyou will need to download the GeoLiteCity DAT file database that will be\nuse for generating the maps.\n\n[GeoLite](http://dev.maxmind.com/geoip/geolite) is a free\ngeolocatication database from MaxMind that they release under a\n[Creative Commons Attribution-ShareAlike 3.0 Uported\nLicense](http://creativecommons.org/licenses/by-sa/3.0/). You can\ndownload the required file: GeoLite City from this\n[page](http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz).\nOnce you have downloaded the file, all you have to do is to uncompress\nit and place it in the folder **/dat** of the pybossa root folder.\n\nAfter copying the file, all you have to do to start creating the maps is\nto restart the server.\n\nUsing your own Terms of Use\n---------------------------\n\nPYBOSSA has a default Terms of Service page that you can customize it to\nfit your institutional needs. In the case that you do not want to use\nthe default one, please, create a **\\_tos.html** file in the **custom**\nfolder. You can re-use the template **help/\\_tos.html** and adapt it (it\nis located in the **template/help** folder.\n\nUsing your own Cookies Policy\n-----------------------------\n\nPYBOSSA has a default cookies policy page, but you can customize it to\nfit your institutional needs. In the case that you do not want to use\nthe default one, please, create a **\\_cookies\\_policy.html** file in the\n**custom** folder. You can re-use the template\n**help/\\_cookies\\_policy.html** and adapt it (it is located in the\n**template/help** folder.\n\nUsing your own Privacy Policy\n-----------------------------\n\nPYBOSSA has a blank privacy policy page. We recommend you to add one, so\nyour users know how you are using their data. To add it, just create a\nfile named **\\_privacy\\_policy.html** file in the **custom** folder.\n\nExporting data to a CKAN server\n-------------------------------\n\n[CKAN](http://ckan.org) is a powerful data management system that makes\ndata accessible \u2013 by providing tools to streamline publishing, sharing,\nfinding and using data. [CKAN](http://ckan.org) is aimed at data\npublishers (national and regional governments, companies and\norganizations) wanting to make their data open and available.\n\nPYBOSSA can export project's data to a [CKAN](http://ckan.org) server.\nIn order to use this feature, you will need to add the following config\nvariables to the settings\\_loca.py file:\n\n``` {.sourceCode .python\n # CKAN URL for API calls\n CKAN_NAME =  Demo CKAN server \n CKAN_URL =  http://demo.ckan.org }  As  CKAN  is open source, you can install your own CKAN  server and configure it to host the data\ngenerated by your PYBOSSA projects quite easily, making it the data\nrepository for your own projects. Another alternative is to use the  the\nData hub  service that it is actually a free CKAN\nservice for hosting your data.", 
            "title": "Global Announcements for the users"
        }, 
        {
            "location": "/customizing/#enforce-privacy-mode", 
            "text": "Some projects need sometimes a way to protect their contributors due to\nthe nature of the project. In this cases, where privacy is really\nimportant, PYBOSSA allows you to  lock  all the public pages related\nto the users and statistics about the site and projects. Specifically,\nby enabling this mode only administrators will be able to see the\nfollowing pages:    http://server/stats  http://server/account/  http://server/account/user/  http://server/project/stats    Anonymous and authenticated will see a warning message like this:   Additionally, the footer and front page top users will be removed with\nlinks to all these pages. If your project needs this type of protection\nyou can enable it by changing the following config variable in your settings_local.py  file from:  ``` {.sourceCode .python}\nENFORCE_PRIVACY = False  \nTo:\n\n``` {.sourceCode .python}\nENFORCE_PRIVACY = True  \n\nThis feature is disabled by default.", 
            "title": "Enforce Privacy mode"
        }, 
        {
            "location": "/customizing/#adding-your-own-templates", 
            "text": "PYBOSSA supports different types of templates that you can offer for\nevery project. By default, PYBOSSA comes with the following templates:    Basic : the most basic template. It only has the basic\n    structure to develop your project.  Image : this template is for image pattern recognition.  Sound : similar to the image template, but for sound clips\n    hosted in SoundCloud.  Video : similar to the imaage template, but for video clips\n    hostes in Vimeo.  Map : this template is for geocoding prorjects.  PDF : this template is for transcribing documents.    If you want to add your own template, or remove one, just create in the\nsettings_local.py file a variable named  PRESENTERS  and add remove\nthe ones you want:  PRESENTERS = [\"basic\", \"image\", \"sound\", \"video\", \"map\", \"pdf\", \"yourtemplate\"]  Yourtemplate  should be a template that you have to save in the theme\nfolder:  /templates/projects/snippets/  with the same name. Check the\nother templates to use them as a base layer for your template.  After adding the template, the server will start offering this new\ntemplate to your users.  In addition to the project templates themselves, you can add some test\ntasks for those projects so that the users can import them to their\nprojects and start  playing  with them, or taking their format as a\nstarting point to create their own. These tasks can be imported from\nGoogle Docs spreadsheets, and you can add them, remove them, or modify\nthe URLs of the spreadsheets changing the value of the variable TEMPLATE_TASKS  in settings_local.py:  TEMPLATE_TASKS = {  :    image :\n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE usp=sharing ,\n     sound :\n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc usp=sharing ,\n     video :\n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc usp=sharing ,\n     map :\n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc usp=sharing ,\n     pdf :\n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE usp=sharing }", 
            "title": "Adding your own templates"
        }, 
        {
            "location": "/customizing/#setting-an-expiration-time-for-project-passwords", 
            "text": "PYBOSSA allows the owner of a project to set a password so that only\npeople (both anonymous or authenticated) that know it can contribute. By\nentering this password, the user will have access to the project for a\ntime specified by:  PASSWD_COOKIE_TIMEOUT = 60 * 30  Which defaults to 30 minutes.", 
            "title": "Setting an expiration time for project passwords"
        }, 
        {
            "location": "/customizing/#validation-of-new-user-accounts", 
            "text": "Whenever a new user wants to sign up, PYBOSSA allows you to add some\nextra security to the process by making the users have to validate a\nreal email account.  However, if you don t need this feature, it can be disabled (as it is by\ndefault) with this configuration parameter:  ACCOUNT_CONFIRMATION_DISABLED = True", 
            "title": "Validation of new user accounts"
        }, 
        {
            "location": "/customizing/#sending-weekly-email-stats-to-project-owners", 
            "text": "Project owners that have the pro flag set to True can receive every week\nan update with the latest statistics about their projects in their email\nbox.  By default this email is sent every Sunday. You can modify it in the\nsettings file by changing it to another day:  WEEKLY_UPDATE_STATS =  Tuesday", 
            "title": "Sending weekly email stats to project owners"
        }, 
        {
            "location": "/customizing/#newsletters-with-mailchimp", 
            "text": "PYBOSSA can show a subscription page to users when they create an\naccount. By default is disabled, but if you want to enable it the system\nwill show the page to registered users only once, to check if they want\nto be subscribed or not.  In order to support newsletters, you ll have to create an account in\nMailchimp and get an API_KEY as well as a LIST_ID to add the users.\nOnce you ve those two items you can enable the newsletter subscription\nas simple as this, add to your settings_local.py file the following\nvalues:  MAILCHIMP_API_KEY = \"your-key\"\nMAILCHIMP_LIST_ID = \"your-list-id\"  Restart the server, and you will be done. Now in your Mailchimp account\nyou will be able to create campaigns, and communicate with your\nregistered and interested users.", 
            "title": "Newsletters with Mailchimp"
        }, 
        {
            "location": "/customizing/#enabling-the-flickr-task-importer", 
            "text": "PYBOSSA has several different types of built-in importers. Users can use\nthem to import tasks for their projects directly from the Web interface.\nHowever, using the Flickr one requires an API key and shared secret from\nFlickr in order to communicate with the service.  Once you have an API key, you ll have to add it to your\nsettings_local.py file:  FLICKR_API_KEY = \"your-key\"\nFLICKR_SHARED_SECRET = \"your-secret\"  For more information on how to get a Flickr API key and shared secret,\nplease refer to  here .", 
            "title": "Enabling the Flickr Task importer"
        }, 
        {
            "location": "/customizing/#enabling-the-dropbox-task-importer", 
            "text": "PYBOSSA also offers the Dropbox importer, which allows to import\ndirectly all kind of files from a Dropbox account. In order to use it,\nyou ll need to register your PYBOSSA server as a Dropbox app, as\nexplained here .  Don t worry about the Javascript snippet part, we ve already handled\nthat for you. Instead, get the App key you will be given and add it to\nyour settings_local.py:  DROPBOX_APP_KEY = 'your-key'", 
            "title": "Enabling the Dropbox Task importer"
        }, 
        {
            "location": "/customizing/#enabling-the-twitter-task-importer", 
            "text": "If you already have enabled the Twitter authentication, then the Twitter\ntask importer will be enabled too. Otherwise, you will need to create an\napplication in  Twitter  and copy and paste\nthe  Consumer key and secret  into the next variables: TWITTER_CONSUMER_KEY \nand TWITTER_CONSUMER_SECRET \nand uncomment them.  \n\nThis will also enable PYBOSSA's Twitter login.", 
            "title": "Enabling the Twitter Task importer"
        }, 
        {
            "location": "/customizing/#enabling-the-youtube-task-importer", 
            "text": "The Youtube task importer needs a Youtube server key which you need to\ncreate in the  Google API\nConsole  in YouTube Data API.  Once you have an API key, you ll have to add it to your\nsettings_local.py file:  YOUTUBE_API_SERVER_KEY = \"your-key\"  For more information on how to get a Youtube server key, please refer to here .", 
            "title": "Enabling the Youtube Task importer"
        }, 
        {
            "location": "/customizing/#enabling-server-sent-events", 
            "text": "Since PYBOSSA v1.1.0, PYBOSSA supports Server Sent Events (SSE) in some\nviews. This feature is really powerfull, however it brings some issues\nwith it: it need to run PYBOSSA in asynchronous mode.  As this is not a necessity, by default PYBOSSA has this feature\ndisabled. PYBOSSA uses SSE to notify users about specific actions (i.e.\nthe result of a webhook in real time).  If you want to enable it, you will have to add to your\nsettings_local.py:  SSE = True  Also, you will need to configure uwsgi and nginx to support SSE events.\nThis is not trivial, as there are several different scenarios, libraries\nand options, so instead of recommending one solution, we invite you to\nread the  uwsgi documentation about\nit , so you can\ntake a decission based on your own infrastructure and preferences.", 
            "title": "Enabling Server Sent Events"
        }, 
        {
            "location": "/customizing/#latest-news-from-pybossa", 
            "text": "Since version v1.2.1 PYBOSSA gets the latest news of its new releases,\nas well as anything related to what it s produced by SciFabric regarding\nthe crowdsourcing world. You can add more items if you want, by just\nadding to your settings_local.py file new ATOM URLs:  NEWS_URL = ['http:/http:///atomurl1', 'http://atomurl2', ...]", 
            "title": "Latest news from PYBOSSA"
        }, 
        {
            "location": "/customizing/#enabling-pro-user-features", 
            "text": "Since version v1.2.2 PYBOSSA allows making available to all the users\ncertain features that were before reserved to pro users.  Just locate them in the settings_local.py file. By default, they look\nlike:  PRO_FEATURES = {\n    'auditlog':              True,\n    'webhooks':              True,\n    'updated_exports':       True,\n    'notify_blog_updates':   True,\n    'project_weekly_report': True,\n    'autoimporter':          True,\n    'better_stats':          True\n}  By choosing  True  on each of them, you are making that specific feature\navailable only to pro users. On the other hand, selecting  False  makes\nthem available to regular users as well.", 
            "title": "Enabling pro user features"
        }, 
        {
            "location": "/customizing/#strict-slashes", 
            "text": "By default PYBOSSA distinguish between two types of URLs for its\nendpoints: with and without a traling slash. In other words, if an\nendpoint is not declared within the code as accepting both options,\naccessing the same endpoint with a trailing slash will return a 404.  For example, the about endpoint:  GET /about  Will return the page, but with the default configuration it will return\na 404 if you add a trailing slash to it:  GET /about/  To disable this behavior, just use the STRICT_SLASHES option and set it\nto False. That option willensure that both endpoints works with and\nwithout the trailing slash.", 
            "title": "Strict Slashes"
        }, 
        {
            "location": "/customizing/#disqus-single-sign-on-sso", 
            "text": "PYBOSSA supports Disqus SSO, however it is disabled by default. You need\nto register a Disqus application (see their documentation )\nand then update your settings_local.py file with the following two\nkeys:  DISQUS_SECRET_KEY\nDISQUS_PUBLIC_KEY  Then, this will enable you to use a new Jinja2 filter for authenticating\nPYBOSSA users directly in their Disqus server. The filter is disqus_sso . You can use it like this:  {% if current_user.is_authenticated() %}\n{{ current_user | disqus_sso | safe }}\n{% else %}\n{{ None | disqus_sso | safe }}\n{% endif %}  Also, if you are building a Single Page Application, you can use our API\nendpoint:  api/disqus/sso  to get the credentials and authenticate the\nusers within your javascript. Check the endpoint information disqus-api.", 
            "title": "Disqus Single Sign On (SSO)"
        }, 
        {
            "location": "/customizing/#background-jobs-timeout", 
            "text": "By default PYBOSSA timeout for every job is 10 minutes. In principle it\nshould be fine, but each project and server is unique, so if you start\nseeing to many jobs failing because the job timed out, then, increase\nthe value using this config variables:  MINUTE = 60\nTIMEOUT = 20 * 60", 
            "title": "Background jobs timeout"
        }, 
        {
            "location": "/customizing/#web-push-notifications", 
            "text": "You need to have HTTPS enabled for your site, otherwise you will need to\nuse a subdomain from onesignal.com in order to support this feature. If\nyou cannot use HTTPS we recommend to not enable it.  PYBOSSA can send web push notifications to Google Chrome, Mozilla\nFirefox and Safari browsers.  For supporting this feature, PYBOSSA uses the Onesignal.com service. You\nwill need an account and create an app for your PYBOSSA server. Then\nfollow their documentation to download the WebPush SDK and configure\nyour PYBOSSA theme.  For more info regarding Onesignal, check their documentation.  \n\nYou can host the SDK files in the static folder of your theme. However\nyou will need to modify your web server (Apache or Nginx) to serve those\nfiles as from the root of your server. If this is not done properly, it\nwill not work.  After you have created the app in Onesignal get the API KEY and APP ID.\nThen copy them and put it in your settings_local.py file:  ONESIGNAL_APP_ID = 'app-id'\nONESIGNAL_API_KEY = 'app-key'  Restart the server, and add one background worker for the  webpush \nqueue. This queue will handle the creation of the apps, as well as\nsending the push notifications.  Then you will need to update your PYBOSSA theme in order to allow your\nusers to subscribe. As this could vary a lot from one project to\nanother, we do not provide a template but some guidelines:    Use the JS SDK to subscribe a user to a given project using the\n     tags  option of Onesignal.  PYBOSSA sends notifications using those tags thanks to the\n     filters  option that allows us to segment traffic. PYBOSSA is\n    especting the project.id as the tag key for segmenting.  The JS SDK allows you to subscribe/unsubscribe a user to a give\n    project (not only the whole server) with special methods for\n    adding tags and deleting them. This works independently if the\n    user is authenticated or not.    For more info regarding Onesignal JS SDK, check their documentation.", 
            "title": "Web Push notifications"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\n\n\nIf you do not find your question in this section, please send it to us\n\n:   directly to *info AT pybossa DOT com*. We will try to help you and\n    add your question to the FAQ.\n\n\n\n\n\nUsers\n\n\nDo I need to create an account to participate in the project?\n\n\nIt depends. The owners of the projects can disable anonymous\ncontributions (usually due to privacy issues with the data), forcing you\nto create an account if you want to contribute to that specific project.\n\n\nProjects\n\n\nHow can I create a project?\n\n\nYou can create a project using web forms, or if you prefer it using the\nAPI. We recommend you to read the user/overview and user/tutorial\nsections.\n\n\nCan I disable anonymous contributions?\n\n\nYes, you can. Check your project settings and toggle the drop down menu:\n\nAllow Anonymous Contributors\n from Yes to No. Check the project-details\nfor further information.\n\n\nCan I create \ngolden tasks\n?\n\n\nYes, you can. PYBOSSA has a field for every Task named: \ncalibration\n\nthat will identify the task as a \ngolden\n task or as we call them as a\n\ncalibration task\n. Calibration tasks can be used to weight the answers\nof the volunteers (authenticated and anonymous) as you know the answer\nfor those given tasks. For example, if a user has answered all the\ncalibration tasks correctly you can give a weight of 1 point to all\nhis/her answers, while if the user only answered 50% of them correctly,\nthe answers for the rest of the tasks could be given a weight of 0.5\npoints.\n\n\nCan I delete my project and all the task and task runs?\n\n\nYes, you can. If you are the owner of the project you can delete the\nproject, and automatically all the task and associated task runs will be\ndeleted (\nnote\n: this cannot be undone!). Check the project-delete\nsection for further details.\n\n\nDo you provide any statistics about the users for my project?\n\n\nYes, every project has its own statistics page that shows information\nabout the distribution of answers per type of user, an estimation about\nhow long it will take to complete all your tasks, the top 5\nauthenticated and anonymous users, etc. Check the \nStatistics\n link in\nthe left local sidebar of your project.\n\n\nMy project is not getting too much attention, how can it be a \nfeatured\n project?\n\n\nFeatured projects are managed by the administrators of the site. Contact\nthem about this issue, and they will decide about your project.\n\n\nI have all my data in a CSV file, can I import it?\n\n\nYes, you can. PYBOSSA supports the CSV format, so all you have to do is\nupload your file to a file server like DropBox, copy the public link and\npaste it in the importer section. PYBOSSA also supports Google Drive\nSpreadsheets, see csv-import section for further details.\n\n\nMy data is in a Google Doc Spreadsheet, can I import the data into my\nproject?\n--------------------------------------------------------------------------Yes,\nyou can. PYBOSSA supports the Google Drive Spreadsheets, so make it\npublic, copy the link and use that link to import it the Google Drive\nimporter section. See csv-import section for further details.\n\n\nAll my tasks have been completed, how do I download the results to analyze them?\n\n\nYou can export all the data of your project whenever you want. The data\ncan be exported directly from the \nTasks\n section (check the \nTasks\n\nlink in the left sidebar of your project and click in the export box).\nPYBOSSA can export your tasks and task runs (or answers) to a CSV file,\nJSON format or to a CKAN server. See the export-results section for\nfurther details.\n\n\nWhat is a Task Run?\n\n\nA Task Run is a submitted answer sent by one user (authenticated or\nanonymous) to one of the tasks of your project. In other words, it is\nthe work done by one volunteer for one task.\n\n\nWhat is the Task Presenter?\n\n\nThe task presenter is the web project that will load the tasks of your\nproject and present them to the user. It is an HTML + JavaScript\nproject. See the task-presenter section for further details.\n\n\nPYBOSSA\n\n\nDoes PYBOSSA have an API?\n\n\nYes, it does. PYBOSSA has a api that allows you to create projects,\ndownload results, import tasks, etc. Please see the api section for more\ndetails and the user/tutorial for a full example about how you can use\nit.\n\n\nIs PYBOSSA open-source?\n\n\nYes, it is. PYBOSSA is licensed under the \nGNU Affero general public\nlicense version 3.0\n.\n\n\nDo you provide project templates or examples projects?\n\n\nYes, we do. You can find several open source project examples that can\nbe re-used for image/sound pattern recognition problems, geo-coding, PDF\ntranscription, etc. Check the official \nGit\nrepository\n for all the available\nprojects.\n\n\nSupport\n\n\nPYBOSSA is free and open source, that means that anyone can create a\nproject and benefit from the endless features that PYBOSSA has to offer,\nso that you can reach your ultimate goal. And the best part? That it is\nfree of charge!\n\n\nAs well as the FAQs and all the available documentation to help you\ncreate and develop your PYBOSSA project, we will be happy to answer your\nquestions related to the running of PYBOSSA in general.\n\n\nScifabric offers different options for support. Check them and use the\none that fits your needs: \nhttp://pybossa.com/support/", 
            "title": "Faq"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "If you do not find your question in this section, please send it to us\n\n:   directly to *info AT pybossa DOT com*. We will try to help you and\n    add your question to the FAQ.", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#users", 
            "text": "", 
            "title": "Users"
        }, 
        {
            "location": "/faq/#do-i-need-to-create-an-account-to-participate-in-the-project", 
            "text": "It depends. The owners of the projects can disable anonymous\ncontributions (usually due to privacy issues with the data), forcing you\nto create an account if you want to contribute to that specific project.", 
            "title": "Do I need to create an account to participate in the project?"
        }, 
        {
            "location": "/faq/#projects", 
            "text": "", 
            "title": "Projects"
        }, 
        {
            "location": "/faq/#how-can-i-create-a-project", 
            "text": "You can create a project using web forms, or if you prefer it using the\nAPI. We recommend you to read the user/overview and user/tutorial\nsections.", 
            "title": "How can I create a project?"
        }, 
        {
            "location": "/faq/#can-i-disable-anonymous-contributions", 
            "text": "Yes, you can. Check your project settings and toggle the drop down menu: Allow Anonymous Contributors  from Yes to No. Check the project-details\nfor further information.", 
            "title": "Can I disable anonymous contributions?"
        }, 
        {
            "location": "/faq/#can-i-create-golden-tasks", 
            "text": "Yes, you can. PYBOSSA has a field for every Task named:  calibration \nthat will identify the task as a  golden  task or as we call them as a calibration task . Calibration tasks can be used to weight the answers\nof the volunteers (authenticated and anonymous) as you know the answer\nfor those given tasks. For example, if a user has answered all the\ncalibration tasks correctly you can give a weight of 1 point to all\nhis/her answers, while if the user only answered 50% of them correctly,\nthe answers for the rest of the tasks could be given a weight of 0.5\npoints.", 
            "title": "Can I create golden tasks?"
        }, 
        {
            "location": "/faq/#can-i-delete-my-project-and-all-the-task-and-task-runs", 
            "text": "Yes, you can. If you are the owner of the project you can delete the\nproject, and automatically all the task and associated task runs will be\ndeleted ( note : this cannot be undone!). Check the project-delete\nsection for further details.", 
            "title": "Can I delete my project and all the task and task runs?"
        }, 
        {
            "location": "/faq/#do-you-provide-any-statistics-about-the-users-for-my-project", 
            "text": "Yes, every project has its own statistics page that shows information\nabout the distribution of answers per type of user, an estimation about\nhow long it will take to complete all your tasks, the top 5\nauthenticated and anonymous users, etc. Check the  Statistics  link in\nthe left local sidebar of your project.", 
            "title": "Do you provide any statistics about the users for my project?"
        }, 
        {
            "location": "/faq/#my-project-is-not-getting-too-much-attention-how-can-it-be-a-featured-project", 
            "text": "Featured projects are managed by the administrators of the site. Contact\nthem about this issue, and they will decide about your project.", 
            "title": "My project is not getting too much attention, how can it be a featured project?"
        }, 
        {
            "location": "/faq/#i-have-all-my-data-in-a-csv-file-can-i-import-it", 
            "text": "Yes, you can. PYBOSSA supports the CSV format, so all you have to do is\nupload your file to a file server like DropBox, copy the public link and\npaste it in the importer section. PYBOSSA also supports Google Drive\nSpreadsheets, see csv-import section for further details.  My data is in a Google Doc Spreadsheet, can I import the data into my\nproject?\n--------------------------------------------------------------------------Yes,\nyou can. PYBOSSA supports the Google Drive Spreadsheets, so make it\npublic, copy the link and use that link to import it the Google Drive\nimporter section. See csv-import section for further details.", 
            "title": "I have all my data in a CSV file, can I import it?"
        }, 
        {
            "location": "/faq/#all-my-tasks-have-been-completed-how-do-i-download-the-results-to-analyze-them", 
            "text": "You can export all the data of your project whenever you want. The data\ncan be exported directly from the  Tasks  section (check the  Tasks \nlink in the left sidebar of your project and click in the export box).\nPYBOSSA can export your tasks and task runs (or answers) to a CSV file,\nJSON format or to a CKAN server. See the export-results section for\nfurther details.", 
            "title": "All my tasks have been completed, how do I download the results to analyze them?"
        }, 
        {
            "location": "/faq/#what-is-a-task-run", 
            "text": "A Task Run is a submitted answer sent by one user (authenticated or\nanonymous) to one of the tasks of your project. In other words, it is\nthe work done by one volunteer for one task.", 
            "title": "What is a Task Run?"
        }, 
        {
            "location": "/faq/#what-is-the-task-presenter", 
            "text": "The task presenter is the web project that will load the tasks of your\nproject and present them to the user. It is an HTML + JavaScript\nproject. See the task-presenter section for further details.", 
            "title": "What is the Task Presenter?"
        }, 
        {
            "location": "/faq/#pybossa", 
            "text": "", 
            "title": "PYBOSSA"
        }, 
        {
            "location": "/faq/#does-pybossa-have-an-api", 
            "text": "Yes, it does. PYBOSSA has a api that allows you to create projects,\ndownload results, import tasks, etc. Please see the api section for more\ndetails and the user/tutorial for a full example about how you can use\nit.", 
            "title": "Does PYBOSSA have an API?"
        }, 
        {
            "location": "/faq/#is-pybossa-open-source", 
            "text": "Yes, it is. PYBOSSA is licensed under the  GNU Affero general public\nlicense version 3.0 .", 
            "title": "Is PYBOSSA open-source?"
        }, 
        {
            "location": "/faq/#do-you-provide-project-templates-or-examples-projects", 
            "text": "Yes, we do. You can find several open source project examples that can\nbe re-used for image/sound pattern recognition problems, geo-coding, PDF\ntranscription, etc. Check the official  Git\nrepository  for all the available\nprojects.", 
            "title": "Do you provide project templates or examples projects?"
        }, 
        {
            "location": "/faq/#support", 
            "text": "PYBOSSA is free and open source, that means that anyone can create a\nproject and benefit from the endless features that PYBOSSA has to offer,\nso that you can reach your ultimate goal. And the best part? That it is\nfree of charge!  As well as the FAQs and all the available documentation to help you\ncreate and develop your PYBOSSA project, we will be happy to answer your\nquestions related to the running of PYBOSSA in general.  Scifabric offers different options for support. Check them and use the\none that fits your needs:  http://pybossa.com/support/", 
            "title": "Support"
        }, 
        {
            "location": "/importers/", 
            "text": "Importer interface\n\n\nTask importers are currently located in importers.py; each gets a class,\nwhich should inherit from BulkTaskImport and provide the following\npublic interface:\n\n\n\n\nimporter_id\n\n\ntasks()\n\n\ncount_tasks()\n\n\nimport_metadata()\n\n\n\n\nimporter_id is the name of the importer; any of the supported\nimporters: \ncsv\n, \ngdocs\n, \nepicollect\n, \nflickr\n, \ndropbox\n, \ntwitter\n,\n\ns3\n and \nyoutube\n.\n\n\ntasks() should generate a list of tasks.\n\n\ncount_tasks() should return the number of tasks that will be created.\nThis is because trying to import a large number of tasks (200 or more)\nwill be done as a background job.\n\n\nimport_metadata() may return any information about the tasks that are\ngoing to be imported. This is used for the autoimporters, and the\ninformation returned by this method is stored and available to be used\nby the next autoimport execution.\n\n\nThese classes are intended for private use within the importers.py\nmodule. New ones can be created here to handle different kind of\nimporting mechanisms. The module exposes the public class Importer,\nwhich will be the one resposible for actually do the job of importing\ntasks, by using their public methods:\n\n\n\n\ncreate_tasks\n\n\ncount_tasks_to_import\n\n\nget_all_importer_names\n\n\nget_autoimporter_names\n\n\n\n\ncreate_importer takes as arguments task_repo, project_id,\nimporter_id, and **form_data. task_repo is a TaskRepository object\nthat will handle the store of the created Tasks. project_id, the id of\nthe project to which the tasks belong. importer_id being the name of\nthe importer, like described above. Finally, form_data will be a\ndictionary with the importer-specific form data (e.g. the\ngoogledocs_url for a gdocs importer).\n\n\ncount_tasks_to_import takes as arguments the importer_id and\n**form_data, and will return, before creating any task, the number of\ntasks that will be imported from the source. This is used for instance\nfor deciding whether to import the tasks in a synchronous or an\nasynchronous way, depending on the amount of them.\n\n\nget_all_importer_names returns a list of all the available importers.\nThis list may vary depending on the configuration of the server (e.g. if\nno API key for integration with the Flickr service is found, then the\nFlickr importer won\nt be available).\n\n\nget_autoimporter_names returns a list of the available importers for\nusing as autoimport background jobs. Again, this list may vary depending\non the server configuration.", 
            "title": "Importers"
        }, 
        {
            "location": "/importers/#importer-interface", 
            "text": "Task importers are currently located in importers.py; each gets a class,\nwhich should inherit from BulkTaskImport and provide the following\npublic interface:   importer_id  tasks()  count_tasks()  import_metadata()   importer_id is the name of the importer; any of the supported\nimporters:  csv ,  gdocs ,  epicollect ,  flickr ,  dropbox ,  twitter , s3  and  youtube .  tasks() should generate a list of tasks.  count_tasks() should return the number of tasks that will be created.\nThis is because trying to import a large number of tasks (200 or more)\nwill be done as a background job.  import_metadata() may return any information about the tasks that are\ngoing to be imported. This is used for the autoimporters, and the\ninformation returned by this method is stored and available to be used\nby the next autoimport execution.  These classes are intended for private use within the importers.py\nmodule. New ones can be created here to handle different kind of\nimporting mechanisms. The module exposes the public class Importer,\nwhich will be the one resposible for actually do the job of importing\ntasks, by using their public methods:   create_tasks  count_tasks_to_import  get_all_importer_names  get_autoimporter_names   create_importer takes as arguments task_repo, project_id,\nimporter_id, and **form_data. task_repo is a TaskRepository object\nthat will handle the store of the created Tasks. project_id, the id of\nthe project to which the tasks belong. importer_id being the name of\nthe importer, like described above. Finally, form_data will be a\ndictionary with the importer-specific form data (e.g. the\ngoogledocs_url for a gdocs importer).  count_tasks_to_import takes as arguments the importer_id and\n**form_data, and will return, before creating any task, the number of\ntasks that will be imported from the source. This is used for instance\nfor deciding whether to import the tasks in a synchronous or an\nasynchronous way, depending on the amount of them.  get_all_importer_names returns a list of all the available importers.\nThis list may vary depending on the configuration of the server (e.g. if\nno API key for integration with the Flickr service is found, then the\nFlickr importer won t be available).  get_autoimporter_names returns a list of the available importers for\nusing as autoimport background jobs. Again, this list may vary depending\non the server configuration.", 
            "title": "Importer interface"
        }, 
        {
            "location": "/install/", 
            "text": "Installing PYBOSSA by hand\n\n\nPYBOSSA is a python web application built using the Flask\nmicro-framework.\n\n\nYou need this guide if you want to\n\n\n\n\n\n\nCreate a PYBOSSA for development or testing purposes\n\n\nFirst step to create a production ready PYBOSSA. Second step for\n    that is nginx.\n\n\n\n\n\n\nOfficially supported requirements:\n\n\n\n\n\n\nUbuntu 14.04 LTS\n\n\nPython \n= 2.7.6, \n3.0\n\n\nPostgreSQL \n= 9.3\n\n\nRedis \n= 2.6\n\n\npip \n= 6.1\n\n\n\n\n\n\nIt may also run with older software but we do not officially support it:\n\n\n\n\n\n\nUbuntu 12.04 LTS\n\n\nPython \n= 2.7.2, \n3.0\n\n\nPostgreSQL \n= 9.3\n\n\nRedis \n= 2.6\n\n\npip \n= 6.1\n\n\n\n\n\n\nSetting things up\n\n\nBefore proceeding to install PYBOSSA you will need to configure some\nother applications and libraries in your system. In this page, you will\nget a step by step guide about how to install all the required packages\nand libraries for PYBOSSA using the latest \nUbuntu Server Long Term\nSupport\n version available at the moment:\n\n\n\n\n\n\nUbuntu 14.04 LTS\n\n\n\n\n\n\nInstalling git - a distributed version control system\n\n\nPYBOSSA uses the \ngit\n distributed version control\nsystem for handling the PYBOSSA server source code as well as the\ntemplate projects.\n\n\nGit\n is a free and open source distributed version\ncontrol system designed to handle everything from small to very large\nprojects with seepd and efficiency.\n\n\nIn order to install the software, all you have to do is:\n\n\nsudo apt-get install git-core\n\n\n\nInstalling the PostgreSQL database\n\n\nPostgreSQL\n is a powerful, open source\nobject-relational database system. It has more than 15 years of active\ndevelopment and a proven architecture that has earned it a strong\nreputation for reliability, data integrity, and correctness.\n\n\nPYBOSSA uses \nPostgreSQL\n as the main\ndatabase for storing all the data, and you the required steps for\ninstalling it are the following:\n\n\nsudo apt-get install postgresql postgresql-server-dev-all libpq-dev python-psycopg2\n\n\n\nInstalling virtualenv (optional, but recommended)\n\n\nWe recommend to install PYBOSSA using a\n\nvirtualenv\n as it will create a\nan isolated Python environment, helping you to manage different\ndependencies and versions without having to deal with root permissions\nin your server machine.\n\n\nvirtualenv\n creates an\nenvironment that has its own installation directories, that doesn\nt\nshare libraries with other virtualenv environments (and optionally\ndoesn\nt access the globally installed libraries either).\n\n\nYou can install the software if you want at the system level if you have\nroot privileges, however this may lead to broken dependencies in the OS\nfor all your Python packages, so if possible, avoid this solution and\nuse the \nvirtualenv\n solution.\n\n\nInstalling \nvirtualenv\n in the\nUbuntu server could be done like this:\n\n\nsudo apt-get install python-virtualenv\n\n\n\nAfter installing the software, now you will be able to create\nindependent virtual environments for the PYBOSSA installation as well as\nfor the template projects (see user/tutorial).\n\n\nInstalling the PYBOSSA Python requirements\n\n\nInstalling the required libraries for PYBOSSA is a step that will need\nto use some compilers and dev libraries in order to work. Thus, you will\nneed to install the following packages:\n\n\nsudo apt-get install python-dev build-essential libjpeg-dev libssl-dev swig libffi-dev dbus libdbus-1-dev libdbus-glib-1-dev\n\n\n\nThen, you are ready to download the code and install the required\nlibraries for running PYBOSSA.\n\n\n\n\nWe recommend you to install the required libraries using a **virtual environment** with the command virtualenv (you can install the package\n\n:   python-virtualenv). This will allow to have all the libraries for\n    PYBOSSA in one folder of your choice, so cleaning the installation\n    would be as simple as deleting that folder without affecting your\n    system.\n\n\n\n\n\nIf you decide to use a \nvirtualenv\n then, follow these steps (lines\nstarting with \n#\n are comments):\n\n\n# get the source code\ngit clone --recursive https://github.com/Scifabric/pybossa\n# Access the source code folder\ncd pybossa\nvirtualenv env\n# Activate the virtual environment\nsource env/bin/activate\n# Upgrade pip to latest version\npip install -U pip\n# Install the required libraries\npip install -r requirements.txt\n\n\n\nOtherwise you should be able to install the libraries in your system\nlike this:\n\n\n# get the source\ngit clone --recursive https://github.com/Scifabric/pybossa\n# Access the source code folder\ncd pybossa\n# Upgrade pip to latest version\npip install -U pip\n# Install the required libraries\npip install -r requirements.txt\n\n\n\n\n\n[Vim](http://www.vim.org/) editor is a very popular text editor in GNU/Linux systems, however it\n\n:   may be difficult for some people if you have never used it before.\n    Thus, if you want to try another and much simpler editor for editing\n    the configuration files you can use the [GNU\n    Nano](http://www.nano-editor.org/) editor.\n\n\n\n\n\nCreate a settings file and enter your SQLAlchemy DB URI (you can also\noverride default settings as needed):\n\n\ncp settings_local.py.tmpl settings_local.py\n# now edit ...\nvim settings_local.py\n\n\n\n\n\nAlternatively, if you want your config elsewhere or with different name:\n\n    cp settings_local.py.tmpl {/my/config/file/somewhere}\n    export PYBOSSA_SETTINGS={/my/config/file/somewhere}\n\n\n\n\n\nCreate the alembic config file and set the sqlalchemy.url to point to\nyour database:\n\n\ncp alembic.ini.template alembic.ini\n# now set the sqlalchemy.url ...\n\n\n\nInstalling Redis\n\n\nSince version v0.2.1, PYBOSSA uses Redis not only for caching objects\nand speed up the site, but also for limiting the usage of the API\nrequests.\n\n\nLatest Redis can be installed by downloading the package directly from\nits official \nRedis\n site. Since Ubuntu 14.04 you can\nalso use the internal package:\n\n\nsudo apt-get install redis-server\n\n\n\nOnce you have downloaded it, and installed it, you will need to run two\ninstances:\n\n\n\n\nRedis-server\n: as a master node, accepting read and write\n    operations.\n\n\nRedis-sentinel\n: as a sentinel node, to configure the master and\n    slave Redis nodes.\n\n\n\n\nServer\n\n\nIf you have installed the server via your distribution package system,\nthen, the server will be running already. If this is not the case, check\nthe official documentation of \nRedis\n to configure it\nand run it. The default values should be fine.\n\n\n\n\nPlease, make sure that you are running version \n= 2.6\n\n\n\n\n\n\n\nIf you have installed the software using the source code, then, check the\n\n:   contrib folder, as there is a specific folder for Redis with init.d\n    start scripts. You only have to copy that file to /etc/init.d/ and\n    adapt it to your needs.\n\n\n\n\n\nSentinel\n\n\nRedis can be run in sentinel mode with the \nsentinel\n arg, or by its\nown command named: redis-sentinel. This will vary from your distribution\nand version of Redis, so check its help page to know how you can run it.\n\n\nIn any case, you will need to run a sentinel node, as PYBOSSA uses it to\nload-balance the queries, and also to autoconfigure the master and\nslaves automagically.\n\n\nIn order to run PYBOSSA, you will need first to configure a Sentinel\nnode. Create a config file named \nsentinel.conf\n with something like\nthis:\n\n\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1\n\n\n\nIn the contrib folder you will find a file named \nsentinel.conf\n that\nshould be enough to run the sentinel node. Thus, for running it:\n\n\nredis-server contrib/sentinel.conf --sentinel\n\n\n\n\n\nPlease, make sure that you are running version \n= 2.6\n\n\n\n\n\n\n\nIf you have installed the software using the source code, then, check the\n\n:   contrib folder, as there is a specific folder for Redis with init.d\n    start scripts. You only have to copy that file to /etc/init.d/ and\n    adapt it to your needs.\n\n\n\n\n\nSpeeding up the site\n\n\nEnabling the cache\n\n\nPYBOSSA comes with a Cache system that it is enabled by default. PYBOSSA\nuses a \nRedis\n server to cache some objects like\nprojects, statistics, etc. The system uses the\n\nSentinel\n feature of\n\nRedis\n, so you can have several master/slave nodes\nconfigured with \nSentinel\n, and your\nPYBOSSA server will use them \nautomagically\n.\n\n\nOnce you have started your master Redis-server to accept connections,\nSentinel will manage it and its slaves. If you add a slave, Sentinel\nwill find it and start using it for load-balancing queries in PYBOSSA\nCache system.\n\n\nFor more details about \nRedis\n and\n\nSentinel\n, please, read the official\n\ndocumentation\n.\n\n\nIf you want to disable it, you can do it with an environment variable:\n\n\nexport PYBOSSA_REDIS_CACHE_DISABLED='1'\n\n\n\nThen start the server, and nothing will be cached.\n\n\n\n\n**Important**: We highly recommend you to not disable the cache, as it\nwill boost the performance of the server caching SQL queries as well as\npage views. If you have lots of projects with hundreds of tasks, you\nshould enable it.\n\n\n\n\n\n\n\n**Important**: Sometimes Redis is a bit outdated in your Linux\ndistribution. If this is the case, you will need to install it by hand,\nbut it is really easy and well documented in the official\n[Redis](http://redis.io/) site.\n\n\n\n\n\nRunning asynchronous tasks in the background\n\n\nPYBOSSA uses the Python libraries \nRQ\n and\n\nRQScheduler\n to allow slow or\ncomputationally-heavy tasks to be run in the background in an\nasynchronous way.\n\n\nSome of the tasks are run in a periodic, scheduled, basis, like the\nrefreshment of the cache and notifications sent to users, while others,\nlike the sending of mails are created in real time, responding to events\nthat may happen inside the PYBOSSA server, like sending an email with a\nrecovery password.\n\n\nTo allow all this, you will need two additional Python processes to run\nin the background: the \nworker\n and the \nscheduler\n. The scheduler\nwill create the periodic tasks while other tasks will be created\ndynamically. The worker will execute every of them.\n\n\nTo run the scheduler, just run the following command in a console:\n\n\nrqscheduler --host IP-of-your-redis-master-node\n\n\n\nSimilarly, to get the tasks done by the worker, run:\n\n\npython app_context_rqworker.py scheduled_jobs super high medium low email maintenance\n\n\n\nIt is also recommended the use of \nsupervisor\n\nfor running these processes in an easier way and with a single command.\n\n\n\n\nWhile the execution of the scheduler is optional (you will not have the\n\n:   improvements in performance given by them, but you may also not need\n    them), the execution of the worker is mandatory for the normal\n    functioning of the PYBOSSA server, so make sure you run the command\n    for it.\n\n\n\n\n\nConfiguring the DataBase\n\n\nYou need first to add a user to your\n\nPostgreSQL\n DB:\n\n\nsudo su postgres\ncreateuser -d -P pybossa\n\n\n\nUse password \ntester\n when prompted.\n\n\n\n\nYou should use the same user name that you have used in the\n\n:   settings\\_local.py and alembic.ini files.\n\n\n\n\n\nAfter running the last command, you maybe also have to answer to these\nquestions:\n\n\n\n\nShall the new role be a super user? Answer \nn\n (press the \nn\n\n    key).\n\n\nShall the new role be allowed to create databases? Answer \ny\n\n    (press the \ny\n key).\n\n\nShall the new role be allowed to create more new roles? Answer \nn\n\n    (press the \nn\n key).\n\n\n\n\nAnd now, you can create the database:\n\n\ncreatedb pybossa -O pybossa\n\n\n\nFinally, exit the postgresql user:\n\n\nexit\n\n\n\nThen, populate the database with its tables:\n\n\npython cli.py db_create\n\n\n\nRun the web server:\n\n\npython run.py\n\n\n\nOpen in your web browser the following URL:\n\n\nhttp://localhost:5000\n\n\n\nAnd if you see the following home page, then, your installation has been\ncompleted:\n\n\n\n\nUpdating PYBOSSA\n\n\nUpdate PYBOSSA core and migrating the database table structure\n\n\nSometimes, the PYBOSSA developers add a new column or table to the\nPYBOSSA server, forcing you to carry out a \nmigration\n of the\ndatabase. PYBOSSA uses \nAlembic\n\nfor performing the migrations, so in case that your production server\nneed to upgrade the DB structure to a new version, all you have to do is\nto:\n\n\ngit pull origin master\npip install -U pip\npip install -U -r requirements.txt\nalembic upgrade head\n\n\n\nThe first command will get you the latest source code. Then new\nlibraries are installed or upgraded. And Alembic is upgrading the\ndatabase structure.\n\n\nVery occasionally, updates to the core code will also required\n\npybossa.js\n to be updated in\nyour PYBOSSA theme. To update the default theme you can to this:\n\n\ncd home/pybossa/pybossa/themes/default\ngit pull origin master\n\n\n\n\n\nIf you are using the [virtualenv](http://pypi.python.org/pypi/virtualenv) be sure to activate it before running the\n\n:   [Alembic](http://pypi.python.org/pypi/alembic) upgrade command.\n\n\n\n\n\nMigrating Your Old DB Records\n\n\nIn versions prior to v0.2.3, HTML was supported as the default option\nfor the \nlong_description\n field in projects. In new versions of\nPYBOSSA, Markdown has been adopted as the default option. However, you\ncan use HTML instead of Markdown by modifying the default PYBOSSA theme\nor using your own forked from the default one.\n\n\nIf you were have been using PYBOSSA for a while you may have projects in\nyour database whose \nlong_description\n is in HTML format. Hence, if you\nare using the default theme for PYBOSSA you will no longer see them\nrendered as HTML and may have some issues.\n\n\nIn order to avoid this, you can run a simple script to convert all the\nDB project\ns \nlong_description\n field from HTML to Markdown, just by\nrunning the following commands:\n\n\npip install -U pip\npip install -U -r requirements.txt\npython cli.py markdown_db_migrate\n\n\n\nThe first command will install a Python package that will handle the\nHTML to Markdown conversion, while the second one will convert your DB\nentries.\n\n\n\n\nAs always, if you are using the [virtualenv](http://pypi.python.org/pypi/virtualenv) be sure to activate it before\n\n:   running the pip install command.\n\n\n\n\n\n\n\nThe latest version of PYBOSSA requires PostgreSQL \n= 9.3 as it is using materialized\n\n:   views for the dashboard. This feature is only available from\n    PostgreSQL 9.3, so please upgrade the DB as soon as possible. For\n    more information about upgrading the PostgreSQL database check this\n    [page](http://www.postgresql.org/docs/9.3/static/upgrading.html).", 
            "title": "Install"
        }, 
        {
            "location": "/install/#installing-pybossa-by-hand", 
            "text": "PYBOSSA is a python web application built using the Flask\nmicro-framework.  You need this guide if you want to    Create a PYBOSSA for development or testing purposes  First step to create a production ready PYBOSSA. Second step for\n    that is nginx.    Officially supported requirements:    Ubuntu 14.04 LTS  Python  = 2.7.6,  3.0  PostgreSQL  = 9.3  Redis  = 2.6  pip  = 6.1    It may also run with older software but we do not officially support it:    Ubuntu 12.04 LTS  Python  = 2.7.2,  3.0  PostgreSQL  = 9.3  Redis  = 2.6  pip  = 6.1", 
            "title": "Installing PYBOSSA by hand"
        }, 
        {
            "location": "/install/#setting-things-up", 
            "text": "Before proceeding to install PYBOSSA you will need to configure some\nother applications and libraries in your system. In this page, you will\nget a step by step guide about how to install all the required packages\nand libraries for PYBOSSA using the latest  Ubuntu Server Long Term\nSupport  version available at the moment:    Ubuntu 14.04 LTS", 
            "title": "Setting things up"
        }, 
        {
            "location": "/install/#installing-git-a-distributed-version-control-system", 
            "text": "PYBOSSA uses the  git  distributed version control\nsystem for handling the PYBOSSA server source code as well as the\ntemplate projects.  Git  is a free and open source distributed version\ncontrol system designed to handle everything from small to very large\nprojects with seepd and efficiency.  In order to install the software, all you have to do is:  sudo apt-get install git-core", 
            "title": "Installing git - a distributed version control system"
        }, 
        {
            "location": "/install/#installing-the-postgresql-database", 
            "text": "PostgreSQL  is a powerful, open source\nobject-relational database system. It has more than 15 years of active\ndevelopment and a proven architecture that has earned it a strong\nreputation for reliability, data integrity, and correctness.  PYBOSSA uses  PostgreSQL  as the main\ndatabase for storing all the data, and you the required steps for\ninstalling it are the following:  sudo apt-get install postgresql postgresql-server-dev-all libpq-dev python-psycopg2", 
            "title": "Installing the PostgreSQL database"
        }, 
        {
            "location": "/install/#installing-virtualenv-optional-but-recommended", 
            "text": "We recommend to install PYBOSSA using a virtualenv  as it will create a\nan isolated Python environment, helping you to manage different\ndependencies and versions without having to deal with root permissions\nin your server machine.  virtualenv  creates an\nenvironment that has its own installation directories, that doesn t\nshare libraries with other virtualenv environments (and optionally\ndoesn t access the globally installed libraries either).  You can install the software if you want at the system level if you have\nroot privileges, however this may lead to broken dependencies in the OS\nfor all your Python packages, so if possible, avoid this solution and\nuse the  virtualenv  solution.  Installing  virtualenv  in the\nUbuntu server could be done like this:  sudo apt-get install python-virtualenv  After installing the software, now you will be able to create\nindependent virtual environments for the PYBOSSA installation as well as\nfor the template projects (see user/tutorial).", 
            "title": "Installing virtualenv (optional, but recommended)"
        }, 
        {
            "location": "/install/#installing-the-pybossa-python-requirements", 
            "text": "Installing the required libraries for PYBOSSA is a step that will need\nto use some compilers and dev libraries in order to work. Thus, you will\nneed to install the following packages:  sudo apt-get install python-dev build-essential libjpeg-dev libssl-dev swig libffi-dev dbus libdbus-1-dev libdbus-glib-1-dev  Then, you are ready to download the code and install the required\nlibraries for running PYBOSSA.  \n\nWe recommend you to install the required libraries using a **virtual environment** with the command virtualenv (you can install the package\n\n:   python-virtualenv). This will allow to have all the libraries for\n    PYBOSSA in one folder of your choice, so cleaning the installation\n    would be as simple as deleting that folder without affecting your\n    system.  If you decide to use a  virtualenv  then, follow these steps (lines\nstarting with  #  are comments):  # get the source code\ngit clone --recursive https://github.com/Scifabric/pybossa\n# Access the source code folder\ncd pybossa\nvirtualenv env\n# Activate the virtual environment\nsource env/bin/activate\n# Upgrade pip to latest version\npip install -U pip\n# Install the required libraries\npip install -r requirements.txt  Otherwise you should be able to install the libraries in your system\nlike this:  # get the source\ngit clone --recursive https://github.com/Scifabric/pybossa\n# Access the source code folder\ncd pybossa\n# Upgrade pip to latest version\npip install -U pip\n# Install the required libraries\npip install -r requirements.txt  \n\n[Vim](http://www.vim.org/) editor is a very popular text editor in GNU/Linux systems, however it\n\n:   may be difficult for some people if you have never used it before.\n    Thus, if you want to try another and much simpler editor for editing\n    the configuration files you can use the [GNU\n    Nano](http://www.nano-editor.org/) editor.  Create a settings file and enter your SQLAlchemy DB URI (you can also\noverride default settings as needed):  cp settings_local.py.tmpl settings_local.py\n# now edit ...\nvim settings_local.py  \n\nAlternatively, if you want your config elsewhere or with different name:\n\n    cp settings_local.py.tmpl {/my/config/file/somewhere}\n    export PYBOSSA_SETTINGS={/my/config/file/somewhere}  Create the alembic config file and set the sqlalchemy.url to point to\nyour database:  cp alembic.ini.template alembic.ini\n# now set the sqlalchemy.url ...", 
            "title": "Installing the PYBOSSA Python requirements"
        }, 
        {
            "location": "/install/#installing-redis", 
            "text": "Since version v0.2.1, PYBOSSA uses Redis not only for caching objects\nand speed up the site, but also for limiting the usage of the API\nrequests.  Latest Redis can be installed by downloading the package directly from\nits official  Redis  site. Since Ubuntu 14.04 you can\nalso use the internal package:  sudo apt-get install redis-server  Once you have downloaded it, and installed it, you will need to run two\ninstances:   Redis-server : as a master node, accepting read and write\n    operations.  Redis-sentinel : as a sentinel node, to configure the master and\n    slave Redis nodes.", 
            "title": "Installing Redis"
        }, 
        {
            "location": "/install/#server", 
            "text": "If you have installed the server via your distribution package system,\nthen, the server will be running already. If this is not the case, check\nthe official documentation of  Redis  to configure it\nand run it. The default values should be fine.  \n\nPlease, make sure that you are running version  = 2.6  \n\nIf you have installed the software using the source code, then, check the\n\n:   contrib folder, as there is a specific folder for Redis with init.d\n    start scripts. You only have to copy that file to /etc/init.d/ and\n    adapt it to your needs.", 
            "title": "Server"
        }, 
        {
            "location": "/install/#sentinel", 
            "text": "Redis can be run in sentinel mode with the  sentinel  arg, or by its\nown command named: redis-sentinel. This will vary from your distribution\nand version of Redis, so check its help page to know how you can run it.  In any case, you will need to run a sentinel node, as PYBOSSA uses it to\nload-balance the queries, and also to autoconfigure the master and\nslaves automagically.  In order to run PYBOSSA, you will need first to configure a Sentinel\nnode. Create a config file named  sentinel.conf  with something like\nthis:  sentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1  In the contrib folder you will find a file named  sentinel.conf  that\nshould be enough to run the sentinel node. Thus, for running it:  redis-server contrib/sentinel.conf --sentinel  \n\nPlease, make sure that you are running version  = 2.6  \n\nIf you have installed the software using the source code, then, check the\n\n:   contrib folder, as there is a specific folder for Redis with init.d\n    start scripts. You only have to copy that file to /etc/init.d/ and\n    adapt it to your needs.", 
            "title": "Sentinel"
        }, 
        {
            "location": "/install/#speeding-up-the-site", 
            "text": "", 
            "title": "Speeding up the site"
        }, 
        {
            "location": "/install/#enabling-the-cache", 
            "text": "PYBOSSA comes with a Cache system that it is enabled by default. PYBOSSA\nuses a  Redis  server to cache some objects like\nprojects, statistics, etc. The system uses the Sentinel  feature of Redis , so you can have several master/slave nodes\nconfigured with  Sentinel , and your\nPYBOSSA server will use them  automagically .  Once you have started your master Redis-server to accept connections,\nSentinel will manage it and its slaves. If you add a slave, Sentinel\nwill find it and start using it for load-balancing queries in PYBOSSA\nCache system.  For more details about  Redis  and Sentinel , please, read the official documentation .  If you want to disable it, you can do it with an environment variable:  export PYBOSSA_REDIS_CACHE_DISABLED='1'  Then start the server, and nothing will be cached.  \n\n**Important**: We highly recommend you to not disable the cache, as it\nwill boost the performance of the server caching SQL queries as well as\npage views. If you have lots of projects with hundreds of tasks, you\nshould enable it.  \n\n**Important**: Sometimes Redis is a bit outdated in your Linux\ndistribution. If this is the case, you will need to install it by hand,\nbut it is really easy and well documented in the official\n[Redis](http://redis.io/) site.", 
            "title": "Enabling the cache"
        }, 
        {
            "location": "/install/#running-asynchronous-tasks-in-the-background", 
            "text": "PYBOSSA uses the Python libraries  RQ  and RQScheduler  to allow slow or\ncomputationally-heavy tasks to be run in the background in an\nasynchronous way.  Some of the tasks are run in a periodic, scheduled, basis, like the\nrefreshment of the cache and notifications sent to users, while others,\nlike the sending of mails are created in real time, responding to events\nthat may happen inside the PYBOSSA server, like sending an email with a\nrecovery password.  To allow all this, you will need two additional Python processes to run\nin the background: the  worker  and the  scheduler . The scheduler\nwill create the periodic tasks while other tasks will be created\ndynamically. The worker will execute every of them.  To run the scheduler, just run the following command in a console:  rqscheduler --host IP-of-your-redis-master-node  Similarly, to get the tasks done by the worker, run:  python app_context_rqworker.py scheduled_jobs super high medium low email maintenance  It is also recommended the use of  supervisor \nfor running these processes in an easier way and with a single command.  \n\nWhile the execution of the scheduler is optional (you will not have the\n\n:   improvements in performance given by them, but you may also not need\n    them), the execution of the worker is mandatory for the normal\n    functioning of the PYBOSSA server, so make sure you run the command\n    for it.", 
            "title": "Running asynchronous tasks in the background"
        }, 
        {
            "location": "/install/#configuring-the-database", 
            "text": "You need first to add a user to your PostgreSQL  DB:  sudo su postgres\ncreateuser -d -P pybossa  Use password  tester  when prompted.  \n\nYou should use the same user name that you have used in the\n\n:   settings\\_local.py and alembic.ini files.  After running the last command, you maybe also have to answer to these\nquestions:   Shall the new role be a super user? Answer  n  (press the  n \n    key).  Shall the new role be allowed to create databases? Answer  y \n    (press the  y  key).  Shall the new role be allowed to create more new roles? Answer  n \n    (press the  n  key).   And now, you can create the database:  createdb pybossa -O pybossa  Finally, exit the postgresql user:  exit  Then, populate the database with its tables:  python cli.py db_create  Run the web server:  python run.py  Open in your web browser the following URL:  http://localhost:5000  And if you see the following home page, then, your installation has been\ncompleted:", 
            "title": "Configuring the DataBase"
        }, 
        {
            "location": "/install/#updating-pybossa", 
            "text": "", 
            "title": "Updating PYBOSSA"
        }, 
        {
            "location": "/install/#update-pybossa-core-and-migrating-the-database-table-structure", 
            "text": "Sometimes, the PYBOSSA developers add a new column or table to the\nPYBOSSA server, forcing you to carry out a  migration  of the\ndatabase. PYBOSSA uses  Alembic \nfor performing the migrations, so in case that your production server\nneed to upgrade the DB structure to a new version, all you have to do is\nto:  git pull origin master\npip install -U pip\npip install -U -r requirements.txt\nalembic upgrade head  The first command will get you the latest source code. Then new\nlibraries are installed or upgraded. And Alembic is upgrading the\ndatabase structure.  Very occasionally, updates to the core code will also required pybossa.js  to be updated in\nyour PYBOSSA theme. To update the default theme you can to this:  cd home/pybossa/pybossa/themes/default\ngit pull origin master  \n\nIf you are using the [virtualenv](http://pypi.python.org/pypi/virtualenv) be sure to activate it before running the\n\n:   [Alembic](http://pypi.python.org/pypi/alembic) upgrade command.", 
            "title": "Update PYBOSSA core and migrating the database table structure"
        }, 
        {
            "location": "/install/#migrating-your-old-db-records", 
            "text": "In versions prior to v0.2.3, HTML was supported as the default option\nfor the  long_description  field in projects. In new versions of\nPYBOSSA, Markdown has been adopted as the default option. However, you\ncan use HTML instead of Markdown by modifying the default PYBOSSA theme\nor using your own forked from the default one.  If you were have been using PYBOSSA for a while you may have projects in\nyour database whose  long_description  is in HTML format. Hence, if you\nare using the default theme for PYBOSSA you will no longer see them\nrendered as HTML and may have some issues.  In order to avoid this, you can run a simple script to convert all the\nDB project s  long_description  field from HTML to Markdown, just by\nrunning the following commands:  pip install -U pip\npip install -U -r requirements.txt\npython cli.py markdown_db_migrate  The first command will install a Python package that will handle the\nHTML to Markdown conversion, while the second one will convert your DB\nentries.  \n\nAs always, if you are using the [virtualenv](http://pypi.python.org/pypi/virtualenv) be sure to activate it before\n\n:   running the pip install command.  \n\nThe latest version of PYBOSSA requires PostgreSQL  = 9.3 as it is using materialized\n\n:   views for the dashboard. This feature is only available from\n    PostgreSQL 9.3, so please upgrade the DB as soon as possible. For\n    more information about upgrading the PostgreSQL database check this\n    [page](http://www.postgresql.org/docs/9.3/static/upgrading.html).", 
            "title": "Migrating Your Old DB Records"
        }, 
        {
            "location": "/installing_pybossa/", 
            "text": "Install your own PYBOSSA server\n\n\nThis section covers how you can install, configure and deploy a PYBOSSA\nserver for your company, organization or institution using a GNU/Linux\nserver.", 
            "title": "Installing pybossa"
        }, 
        {
            "location": "/installing_pybossa/#install-your-own-pybossa-server", 
            "text": "This section covers how you can install, configure and deploy a PYBOSSA\nserver for your company, organization or institution using a GNU/Linux\nserver.", 
            "title": "Install your own PYBOSSA server"
        }, 
        {
            "location": "/juju_pybossa/", 
            "text": "Installing PYBOSSA with Juju\n\n\nWith this guide you can deploy PYBOSSA using the\n\nJuju\n technology\ninside a Virtualbox Virtual Machine (VM) locally. We will use\n\nVagrant\n as it will help us to setup the\nnew VM. This should work on all supported OSes where Vagrant and\nVirtualbox run: Windows, OS X, GNU/Linux.\n\n\n\n\nWe use the local installation, but you can use any cloud provider\nsupported by [Juju](https://jujucharms.com/docs/stable/getting-started).\nIf you want to use a cloud provider, you only have to instruct Juju to\nuse a specific cloud one. The charm will work in any of them without\nproblems. Please check the official documentation for information about\nhow to configure\n[Juju](https://jujucharms.com/docs/stable/getting-started) for [Amazon\nEC2](https://jujucharms.com/docs/stable/config-aws) or\n[Openstack](https://jujucharms.com/docs/stable/config-openstack).\n\n\n\n\n\nInstall Virtualbox \n Vagrant\n\n\nWe will install PYBOSSA in a local virtual machine so you can delete it\nafterwards if you want. This will ensure that your computer is not\npolluted with libraries that you will not need any future, containing\neverything within the virtual machine.\n\n\n\n\nIf you have access to a cloud service provider like [Amazon EC2](https://jujucharms.com/docs/stable/config-aws) or any\n\n:   [Openstack](https://jujucharms.com/docs/stable/config-openstack)\n    solution, you can just skip this section. Be sure to configure juju\n    with your cloud credentials. You can find more guides and cloud\n    provider configurations\n    [here](https://jujucharms.com/docs/stable/getting-started).\n\n\n\n\n\nInstall Vagrant and Virtualbox if they are not available on your\nmachine.\n\n\nUbuntu\n\n\nJust install it using the package manager\n\n\nsudo apt-get update \nsudo apt-get -y install virtualbox vagrant\n\n\n\nWindows \n OS X\n\n\nInstall and download \nVirtualbox\n and\n\nVagrant\n manually.\n\n\nGet latest version of PYBOSSA Juju charm\n\n\nYou have two options to get the latest version of PYBOSSA Juju charm.\nYou get a ZIP file with the latest version from this link:\n\nhttps://github.com/Scifabric/pybossa-jujucharm/archive/master.zip\n\n\nOr you use git to clone it:\n\n\ngit clone https://github.com/Scifabric/pybossa-jujucharm.git\n\n\n\n\n\nIf you use the ZIP file, please unzip it before proceeding.\n\n\n\n\n\nGo the source code folder\n\n\ncd pybossa-jujucharm\n\n\n\nStart the VM\n\n\nThis is very easy:\n\n\nvagrant up\n\n\n\nSetup Juju\n\n\nSSH to the Vagrant box and \nstay\n in the VM\n\n\nvagrant ssh\n\n\n\nPrepare Juju for initial usage:\n\n\njuju init\njuju switch local\njuju bootstrap\n\n\n\nPYBOSSA bundle\n\n\nInstall the Pybossa charm bundle which will install PYBOSSA charm and\nPostgreSQL charm and connect them to eachother.\n\n\njuju deployer -c bundle.yaml\n\n\n\nOnce is installed, we can install PYBOSSA and connect both of them.\n\n\nSentinel and Redis\n\n\nYou can also install Redis and Sentinel at a later stage using Juju.\nThis will allow you to add new Redis slave nodes as well as Sentinels to\nmanage the Redis infrastructure using the load-balanced solution of\nSentinel.\n\n\nAdding Redis Master and Slave nodes\n\n\nFirst you need to deploy at least two nodes of Redis: a master and a\nslave:\n\n\njuju deploy cs:~juju-gui/trusty/redis-1\njuju deploy cs:~juju-gui/trusty/redis-1 redis2\n\n\n\nThen, you need link them:\n\n\njuju add-relation redis:master redis2:slave\n\n\n\nAdding Sentinel node\n\n\nNow you can add the Sentinel\n\n\njuju git-deploy Scifabric/redis-sentinel-jujucharm\n\n\n\n\n\nIf you don't have the git-deploy command for juju, you can install it\nwith these commands: :\n\nsudo apt-get install python3-pip sudo pip install juju-git-deploy\n\n\n\n\n\nAnd monitor Redis master\n\n\njuju add-relation redis-sentinel redis:master\n\n\n\nFinally, you can link PYBOSSA to sentinel\n\n\njuju add-relation pybossa redis-sentinel\n\n\n\n\n\nFor more info regarding the Juju charm for Sentinel, please\n\n:   check the official\n    [site](https://github.com/Scifabric/redis-sentinel-jujucharm/).\n\n\n\n\n\nAccess PYBOSSA\n\n\nLook for the machine IP of PYBOSSA service here:\n\n\njuju status\n\n\n\nCopy \n Paste the IP and pass it to the following script\n\n\nsudo natpybossa 10.0.3.x\n\n\n\nWhich will map the PYBOSSA server port to your localhost\ns port 7000.\n\n\nYou can now view PYBOSSA in your browser:\n\n\nhttp://localhost:7000\n\n\n\nEmail server\n\n\nPYBOSSA does not need an email server by default, but we encourage you\nto install one.\n\n\nSending email properly is a bit complicated, as nowadays you have\nconfigure several authentication methods so your emails are not marked\nas SPAM or black listed. This configuration involves not only modifying\nthe config file of your email server, but also the DNS entries of your\nserver so you can include the proper\n\nDKIM\n\nand\n\nSPF\n\nentries. Therefore, the Juju charm only installs a testing server.\n\n\nPlease, use the official documentation of your preferred server to\nconfigure the email properly.\n\n\nsshuttle whole network mapping (optional)\n\n\nThis is an alternative way for mapping internal ports to the VM ones.\nInstead of using the shell scripts that you have seen before for NAT\nconfiguration, you can use \nsshuttle\n. In Ubuntu you can install it\nwith apt-get or in OS X with Homebrew.\n\n\nThe Virtualbox network is only internally visible on the VM side. If you\nwant to see it on your local browser you need to redirect the VBox\nnetwork with your current network (make sure the 10.x.x.x is not already\nused!).\n\n\nThe VBox is typically on 10.0.3.xxx. Open a new console on your local\nmachine and type:\n\n\nsshuttle -r vagrant@localhost:2222 10.0.3.0/24\n\n\n\nsshuttle\n maybe asks for local sudo password. If it asks for vagrant\ns\npassword: \nvagrant\n\n\nFinally open your browser with the IP you got from \njuju status\n and\nHAProxy, e.g.:\n\n\nhttp://10.0.3.89\n\n\n\nJuju GUI (optional)\n\n\nIf you prefer a graphical interface, you are covered. Juju provides a\nvery nice web interface from where you can handle PYBOSSA services. To\nuse it, follow these steps:\n\n\njuju deploy juju-gui\n\n\n\nWhen juju-gui is deployed (can take some time), the command will return\na public IP. You can check the IP also with this command as well as the\nstatus of the deployment of the GUI:\n\n\njuju status\n\n\n\nThen, copy \n paste the IP and pass it as an argument to the following\nscript\n\n\nsudo natgui 10.0.3.x\n\n\n\nThis file will map the Juju-GUI to your localhost\ns port 8000, and\nreturn the password for your Juju-GUI. Copy the password, and open the\nJuju-GUI in your browser\n\n\nhttps://localhost:8000\n\n\n\nIf you\nve used Sentinel, Redis, PostgreSQL, HAProxy and PYBOSSA, your\nGUI should show something similar to this:", 
            "title": "Juju pybossa"
        }, 
        {
            "location": "/juju_pybossa/#installing-pybossa-with-juju", 
            "text": "With this guide you can deploy PYBOSSA using the Juju  technology\ninside a Virtualbox Virtual Machine (VM) locally. We will use Vagrant  as it will help us to setup the\nnew VM. This should work on all supported OSes where Vagrant and\nVirtualbox run: Windows, OS X, GNU/Linux.  \n\nWe use the local installation, but you can use any cloud provider\nsupported by [Juju](https://jujucharms.com/docs/stable/getting-started).\nIf you want to use a cloud provider, you only have to instruct Juju to\nuse a specific cloud one. The charm will work in any of them without\nproblems. Please check the official documentation for information about\nhow to configure\n[Juju](https://jujucharms.com/docs/stable/getting-started) for [Amazon\nEC2](https://jujucharms.com/docs/stable/config-aws) or\n[Openstack](https://jujucharms.com/docs/stable/config-openstack).", 
            "title": "Installing PYBOSSA with Juju"
        }, 
        {
            "location": "/juju_pybossa/#install-virtualbox-vagrant", 
            "text": "We will install PYBOSSA in a local virtual machine so you can delete it\nafterwards if you want. This will ensure that your computer is not\npolluted with libraries that you will not need any future, containing\neverything within the virtual machine.  \n\nIf you have access to a cloud service provider like [Amazon EC2](https://jujucharms.com/docs/stable/config-aws) or any\n\n:   [Openstack](https://jujucharms.com/docs/stable/config-openstack)\n    solution, you can just skip this section. Be sure to configure juju\n    with your cloud credentials. You can find more guides and cloud\n    provider configurations\n    [here](https://jujucharms.com/docs/stable/getting-started).  Install Vagrant and Virtualbox if they are not available on your\nmachine.", 
            "title": "Install Virtualbox &amp; Vagrant"
        }, 
        {
            "location": "/juju_pybossa/#ubuntu", 
            "text": "Just install it using the package manager  sudo apt-get update \nsudo apt-get -y install virtualbox vagrant", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/juju_pybossa/#windows-os-x", 
            "text": "Install and download  Virtualbox  and Vagrant  manually.", 
            "title": "Windows &amp; OS X"
        }, 
        {
            "location": "/juju_pybossa/#get-latest-version-of-pybossa-juju-charm", 
            "text": "You have two options to get the latest version of PYBOSSA Juju charm.\nYou get a ZIP file with the latest version from this link: https://github.com/Scifabric/pybossa-jujucharm/archive/master.zip  Or you use git to clone it:  git clone https://github.com/Scifabric/pybossa-jujucharm.git  \n\nIf you use the ZIP file, please unzip it before proceeding.  Go the source code folder  cd pybossa-jujucharm", 
            "title": "Get latest version of PYBOSSA Juju charm"
        }, 
        {
            "location": "/juju_pybossa/#start-the-vm", 
            "text": "This is very easy:  vagrant up", 
            "title": "Start the VM"
        }, 
        {
            "location": "/juju_pybossa/#setup-juju", 
            "text": "SSH to the Vagrant box and  stay  in the VM  vagrant ssh  Prepare Juju for initial usage:  juju init\njuju switch local\njuju bootstrap", 
            "title": "Setup Juju"
        }, 
        {
            "location": "/juju_pybossa/#pybossa-bundle", 
            "text": "Install the Pybossa charm bundle which will install PYBOSSA charm and\nPostgreSQL charm and connect them to eachother.  juju deployer -c bundle.yaml  Once is installed, we can install PYBOSSA and connect both of them.", 
            "title": "PYBOSSA bundle"
        }, 
        {
            "location": "/juju_pybossa/#sentinel-and-redis", 
            "text": "You can also install Redis and Sentinel at a later stage using Juju.\nThis will allow you to add new Redis slave nodes as well as Sentinels to\nmanage the Redis infrastructure using the load-balanced solution of\nSentinel.", 
            "title": "Sentinel and Redis"
        }, 
        {
            "location": "/juju_pybossa/#adding-redis-master-and-slave-nodes", 
            "text": "First you need to deploy at least two nodes of Redis: a master and a\nslave:  juju deploy cs:~juju-gui/trusty/redis-1\njuju deploy cs:~juju-gui/trusty/redis-1 redis2  Then, you need link them:  juju add-relation redis:master redis2:slave", 
            "title": "Adding Redis Master and Slave nodes"
        }, 
        {
            "location": "/juju_pybossa/#adding-sentinel-node", 
            "text": "Now you can add the Sentinel  juju git-deploy Scifabric/redis-sentinel-jujucharm  \n\nIf you don't have the git-deploy command for juju, you can install it\nwith these commands: :\n\nsudo apt-get install python3-pip sudo pip install juju-git-deploy  And monitor Redis master  juju add-relation redis-sentinel redis:master  Finally, you can link PYBOSSA to sentinel  juju add-relation pybossa redis-sentinel  \n\nFor more info regarding the Juju charm for Sentinel, please\n\n:   check the official\n    [site](https://github.com/Scifabric/redis-sentinel-jujucharm/).", 
            "title": "Adding Sentinel node"
        }, 
        {
            "location": "/juju_pybossa/#access-pybossa", 
            "text": "Look for the machine IP of PYBOSSA service here:  juju status  Copy   Paste the IP and pass it to the following script  sudo natpybossa 10.0.3.x  Which will map the PYBOSSA server port to your localhost s port 7000.  You can now view PYBOSSA in your browser:  http://localhost:7000", 
            "title": "Access PYBOSSA"
        }, 
        {
            "location": "/juju_pybossa/#email-server", 
            "text": "PYBOSSA does not need an email server by default, but we encourage you\nto install one.  Sending email properly is a bit complicated, as nowadays you have\nconfigure several authentication methods so your emails are not marked\nas SPAM or black listed. This configuration involves not only modifying\nthe config file of your email server, but also the DNS entries of your\nserver so you can include the proper DKIM \nand SPF \nentries. Therefore, the Juju charm only installs a testing server.  Please, use the official documentation of your preferred server to\nconfigure the email properly.", 
            "title": "Email server"
        }, 
        {
            "location": "/juju_pybossa/#sshuttle-whole-network-mapping-optional", 
            "text": "This is an alternative way for mapping internal ports to the VM ones.\nInstead of using the shell scripts that you have seen before for NAT\nconfiguration, you can use  sshuttle . In Ubuntu you can install it\nwith apt-get or in OS X with Homebrew.  The Virtualbox network is only internally visible on the VM side. If you\nwant to see it on your local browser you need to redirect the VBox\nnetwork with your current network (make sure the 10.x.x.x is not already\nused!).  The VBox is typically on 10.0.3.xxx. Open a new console on your local\nmachine and type:  sshuttle -r vagrant@localhost:2222 10.0.3.0/24  sshuttle  maybe asks for local sudo password. If it asks for vagrant s\npassword:  vagrant  Finally open your browser with the IP you got from  juju status  and\nHAProxy, e.g.:  http://10.0.3.89", 
            "title": "sshuttle whole network mapping (optional)"
        }, 
        {
            "location": "/juju_pybossa/#juju-gui-optional", 
            "text": "If you prefer a graphical interface, you are covered. Juju provides a\nvery nice web interface from where you can handle PYBOSSA services. To\nuse it, follow these steps:  juju deploy juju-gui  When juju-gui is deployed (can take some time), the command will return\na public IP. You can check the IP also with this command as well as the\nstatus of the deployment of the GUI:  juju status  Then, copy   paste the IP and pass it as an argument to the following\nscript  sudo natgui 10.0.3.x  This file will map the Juju-GUI to your localhost s port 8000, and\nreturn the password for your Juju-GUI. Copy the password, and open the\nJuju-GUI in your browser  https://localhost:8000  If you ve used Sentinel, Redis, PostgreSQL, HAProxy and PYBOSSA, your\nGUI should show something similar to this:", 
            "title": "Juju GUI (optional)"
        }, 
        {
            "location": "/model/", 
            "text": "Domain Model\n\n\nThis section introduces the main domain objects present in the PYBOSSA\nsystem (see the api section for details about how you can access some of\nthe objects using the API).\n\n\nOverview\n\n\nPYBOSSA has 5 main domain objects:\n\n\n\n\n\n\nProject\n: the overall Project to which Tasks are associated.\n\n\nHasA: Category\n\n\nHasMany: Tasks\n\n\n\n\n\n\nTask\n: an individual Task which can be performed by a user. A\n    Task is associated to a project.\n\n\nHasA: Project\n\n\nHasA: Result\n\n\nHasMany: TaskRuns\n\n\n\n\n\n\nTaskRun\n: the answers of a specific User performing a specific\n    task\n\n\nHasA: Task\n\n\nHasA: User\n\n\n\n\n\n\nResult\n: the statistical result of analyzing the task runs for\n    a given task in a project\n\n\nHasA: Task\n\n\nHasMany: TaskRuns\n\n\n\n\n\n\nHelpingMaterial\n: media files for building advance tutorials\n\n\nHasA: Project\n\n\n\n\n\n\nUser\n: a user account\n\n\nCategory\n: a project category\n\n\nHasMany: Projects\n\n\n\n\n\n\n\n\n\n\nThere are some attributes common across most of the domain objects\nnotably:\n\n\n\n\n\n\n`create_time`: the Datetime (as an integer) when object was\n    created.\n\n\n`info`: a \nblob-style\n attribute into which one can store\n    arbitrary JSON. This attribute is use to any additional\n    information one wants (e.g. Task configuration or Task results on\n    TaskRun)\n\n\n\n\n\n\nThe following excerpts directly from the PYBOSSA source to provide\ndocumentation of main model attributes.\n\n\nProject\n\n\nCategory\n\n\nTask\n\n\nTaskRun\n\n\nUser\n\n\nBlogpost\n\n\nHelpingMaterial", 
            "title": "Model"
        }, 
        {
            "location": "/model/#domain-model", 
            "text": "This section introduces the main domain objects present in the PYBOSSA\nsystem (see the api section for details about how you can access some of\nthe objects using the API).", 
            "title": "Domain Model"
        }, 
        {
            "location": "/model/#overview", 
            "text": "PYBOSSA has 5 main domain objects:    Project : the overall Project to which Tasks are associated.  HasA: Category  HasMany: Tasks    Task : an individual Task which can be performed by a user. A\n    Task is associated to a project.  HasA: Project  HasA: Result  HasMany: TaskRuns    TaskRun : the answers of a specific User performing a specific\n    task  HasA: Task  HasA: User    Result : the statistical result of analyzing the task runs for\n    a given task in a project  HasA: Task  HasMany: TaskRuns    HelpingMaterial : media files for building advance tutorials  HasA: Project    User : a user account  Category : a project category  HasMany: Projects      There are some attributes common across most of the domain objects\nnotably:    `create_time`: the Datetime (as an integer) when object was\n    created.  `info`: a  blob-style  attribute into which one can store\n    arbitrary JSON. This attribute is use to any additional\n    information one wants (e.g. Task configuration or Task results on\n    TaskRun)    The following excerpts directly from the PYBOSSA source to provide\ndocumentation of main model attributes.", 
            "title": "Overview"
        }, 
        {
            "location": "/model/#project", 
            "text": "", 
            "title": "Project"
        }, 
        {
            "location": "/model/#category", 
            "text": "", 
            "title": "Category"
        }, 
        {
            "location": "/model/#task", 
            "text": "", 
            "title": "Task"
        }, 
        {
            "location": "/model/#taskrun", 
            "text": "", 
            "title": "TaskRun"
        }, 
        {
            "location": "/model/#user", 
            "text": "", 
            "title": "User"
        }, 
        {
            "location": "/model/#blogpost", 
            "text": "", 
            "title": "Blogpost"
        }, 
        {
            "location": "/model/#helpingmaterial", 
            "text": "", 
            "title": "HelpingMaterial"
        }, 
        {
            "location": "/nginx/", 
            "text": "Deploying PYBOSSA with nginx and uwsgi\n\n\nPYBOSSA is a python web application built using the Flask\nmicro-framework.\n\n\nThis guide describes how to make PYBOSSA run as a service or daemon\npermanently in the background. This is useful if you want to run a\nproduction ready single PYBOSSA web server. If you only want to test\nPYBOSSA please follow only install.\n\n\nPre-requisites:\n\n\n\n\n\n\nnginx\n\n\nuwsgi\n\n\nsupervisord\n\n\nRedis and sentinel as service (with supervisord)\n\n\nRQ-Scheduler and RQ-Worker as service (with supervisord)\n\n\nPYBOSSA as service (with supervisord)\n\n\n\n\n\n\nFirst steps\n\n\nIf you have not done already: Please create a new user account, e.g.\npybossa (a non root at best) which will run the PYBOSSA instance. You\nthen have to follow the instructions from install first to get a\nrunnable PYBOSSA. After you\nve done that please continue with this\nguide.\n\n\nInstalling nginx and uwsgi\n\n\nYou have to install nginx and uwsgi in your server machine. In a\nDebian/Ubuntu machine you can install them running the following\ncommands:\n\n\nsudo apt-get install nginx\n\n\n\nin the (virtualenv-)installation directory of pybossa you need to\ninstall uwsgi:\n\n\npip install -U uwsgi\n\n\n\nConfiguring nginx and uwsgi for PYBOSSA\n\n\nWe assume you only want to run PYBOSSA on your nginx webserver. If you\nwant to run also other services on the same server you need to modify\nthe nginx config files!\n\n\nYou have to copy and adapt the following files from your local PYBOSSA\ninstallation:\n\n\n\n\n\n\ncontrib/nginx/pybossa\n\n\ncontrib/pybossa.ini\n\n\n\n\n\n\nThe PYBOSSA virtual host file (\ncontrib/nginx/pybossa\n) has the\nfollowing directives:\n\n\nlocation / { try_files $uri @pybossa; }\n\nlocation @pybossa {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/pybossa.sock;\n}\n\nlocation  /static {\n\n            # change that to your pybossa static directory\n            alias /home/Scifabric/pybossa/pybossa/themes/default/static;\n\n            autoindex on;\n            expires max;\n        }\n\n\n\nYou can specify a user and group from your machine with lower privileges\nin order to improve the security of the site. You can also use the\nwww-data user and group name.\n\n\nOnce you have adapted the PATH in the alias in that file, copy it into\nthe folder:\n\n\nsudo cp contrib/nginx/pybossa /etc/nginx/sites-available/.\n\n\n\nplease delete the default config in sites-enabled (do not worry there is\na backup):\n\n\nsudo rm /etc/nginx/sites-enabled/default\n\n\n\nEnable the PYBOSSA site:\n\n\nsudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa\n\n\n\nAnd restart the server:\n\n\nsudo service nginx restart\n\n\n\nCreating the pybossa.ini file for uwsgi\n\n\nYou have to copy the \npybossa.ini.template\n file to pybossa.ini in\nyour PYBOSSA installation and adapt the paths to match your\nconfiguration!\n\n\nThe content of this file is the following:\n\n\n[uwsgi]\nsocket = /tmp/pybossa.sock\nchmod-socket = 666\nchdir = /home/pybossa/pybossa\npythonpath = ..\nvirtualenv = /home/pybossa/pybossa/env\nmodule = run:app\ncpu-affinity = 1\nprocesses = 2\nthreads = 2\nstats = /tmp/pybossa-stats.sock\nbuffer-size = 65535\n\n\n\nInstall supervisord\n\n\nSupervisord is used to let PYBOSSA and its RQ system run as Daemon in\nthe background. It shares some of the same goals of programs like\nlaunchd, daemontools, and runit.\n\n\nInstall it:\n\n\nsudo apt-get install supervisor\n\n\n\nConfigure Redis and sentinel as service with supervisord\n\n\nFirst stop redis service and all running redis instances with:\n\n\nsudo service redis-server stop\nkillall redis-server\n\n\n\nWe want to run redis and sentinel with supervisord because supervisord\nis more reliable when redis crashes (which can happen when you have too\nless memory). So we disable redis-server daemon service with:\n\n\nsudo rm /etc/init.d/redis-server\n\n\n\nGo to your pybossa installation directory and copy following files:\n\n\nsudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/\nsudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/\nsudo cp contrib/redis-supervisor/redis.conf /etc/redis/\nsudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/\nsudo chown redis:redis /etc/redis/redis.conf\nsudo chown redis:redis /etc/redis/sentinel.conf\n\n\n\nNow we restart supervisord (please do a full stop and start as\ndescribed):\n\n\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\nTo verify install you can list all redis processes and you should see a\nredis-server at port 6379 and redis-sentinel at port 26379:\n\n\nps aux | grep redis\n\n\n\nThis two services will no run whenever the server is running (even after\nreboot).\n\n\nConfigure RQ-Scheduler and -Worker to run with supervisord\n\n\nYou need to adjust the paths and user account in this two config files\naccording to your installation! Then copy them to supervisor (do not\nforget to edit them):\n\n\nsudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf\nsudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf\n\n\n\nRestart supervisor fully:\n\n\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\nVerify service running. You should see a rqworker and rqscheduler\ninstance in console:\n\n\nps aux | grep rq\n\n\n\nSetup PYBOSSA itself\n\n\nThis steps are recommended to do when you run PYBOSSA in nginx. Open\nyour \nsettings_local.py\n in your PYBOSSA installation and uncomment\nor delete the two lines with \nHOST\n and \nPORT\n, e.g.:\n\n\n# HOST = '0.0.0.0'\n# PORT = 12000\n\n\n\nAfter that specify the full server URL where your PYBOSSA is reachable,\ne.g.:\n\n\nSERVER_NAME = mypybossa.com\nPORT = 80\n\n\n\nLet PYBOSSA run as service\n\n\nFinally we need to let pybossa run as service. Adjust again the paths\nand user name in this file and copy it to supervisor config directory:\n\n\nsudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf\n\n\n\nEdit now the file and adjust paths \n user name.\n\n\nRestart supervisor fully:\n\n\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\nYou should now have a running PYBOSSA production ready webserver on your\nnginx. Open your browser and check your configured domain\n\nhttp://example.com\n.\n\n\nCongratulations! :)\n\n\nHow to update PYBOSSA service\n\n\nUpgrading and updating PYBOSSA as service works the same as for a\nstandalone version. Please follow instructions on install. However a few\nextra steps are required after you updated.\n\n\nYou need to restart all supervisor controlled services after updating:\n\n\nsudo supervisorctl restart rq-scheduler\nsudo supervisorctl restart rq-worker\nsudo supervisorctl restart pybossa\n\n\n\nLogs of PYBOSSA services\n\n\nYou can find logs of all PYBOSSA services in this directory:\n\n\ncd /var/log/supervisor\n\n\n\nLast words about Security and Scaling\n\n\nThis guide does not cover how to secure your PYBOSSA installation. As\nevery web server you have to make it secure (like e.g. strong passwords,\nautomatic Ubuntu security updates, firewall, access restrictions).\nPlease use guides on the Internet to do so.\n\n\nPYBOSSA can also be scaled horizontally to run with redundant servers\nand with zero downtime over many redis, db and web servers with load\nbalancers in between.\n\n\nIf you need a secure and/or scalable PYBOSSA installation please contact\nus. We will be glad to help you and we can even do all the hosting,\ncustomization, administration and installation for you when you want for\na small fee.\n\n\nContact address:", 
            "title": "Nginx"
        }, 
        {
            "location": "/nginx/#deploying-pybossa-with-nginx-and-uwsgi", 
            "text": "PYBOSSA is a python web application built using the Flask\nmicro-framework.  This guide describes how to make PYBOSSA run as a service or daemon\npermanently in the background. This is useful if you want to run a\nproduction ready single PYBOSSA web server. If you only want to test\nPYBOSSA please follow only install.  Pre-requisites:    nginx  uwsgi  supervisord  Redis and sentinel as service (with supervisord)  RQ-Scheduler and RQ-Worker as service (with supervisord)  PYBOSSA as service (with supervisord)", 
            "title": "Deploying PYBOSSA with nginx and uwsgi"
        }, 
        {
            "location": "/nginx/#first-steps", 
            "text": "If you have not done already: Please create a new user account, e.g.\npybossa (a non root at best) which will run the PYBOSSA instance. You\nthen have to follow the instructions from install first to get a\nrunnable PYBOSSA. After you ve done that please continue with this\nguide.", 
            "title": "First steps"
        }, 
        {
            "location": "/nginx/#installing-nginx-and-uwsgi", 
            "text": "You have to install nginx and uwsgi in your server machine. In a\nDebian/Ubuntu machine you can install them running the following\ncommands:  sudo apt-get install nginx  in the (virtualenv-)installation directory of pybossa you need to\ninstall uwsgi:  pip install -U uwsgi", 
            "title": "Installing nginx and uwsgi"
        }, 
        {
            "location": "/nginx/#configuring-nginx-and-uwsgi-for-pybossa", 
            "text": "We assume you only want to run PYBOSSA on your nginx webserver. If you\nwant to run also other services on the same server you need to modify\nthe nginx config files!  You have to copy and adapt the following files from your local PYBOSSA\ninstallation:    contrib/nginx/pybossa  contrib/pybossa.ini    The PYBOSSA virtual host file ( contrib/nginx/pybossa ) has the\nfollowing directives:  location / { try_files $uri @pybossa; }\n\nlocation @pybossa {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/pybossa.sock;\n}\n\nlocation  /static {\n\n            # change that to your pybossa static directory\n            alias /home/Scifabric/pybossa/pybossa/themes/default/static;\n\n            autoindex on;\n            expires max;\n        }  You can specify a user and group from your machine with lower privileges\nin order to improve the security of the site. You can also use the\nwww-data user and group name.  Once you have adapted the PATH in the alias in that file, copy it into\nthe folder:  sudo cp contrib/nginx/pybossa /etc/nginx/sites-available/.  please delete the default config in sites-enabled (do not worry there is\na backup):  sudo rm /etc/nginx/sites-enabled/default  Enable the PYBOSSA site:  sudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa  And restart the server:  sudo service nginx restart", 
            "title": "Configuring nginx and uwsgi for PYBOSSA"
        }, 
        {
            "location": "/nginx/#creating-the-pybossaini-file-for-uwsgi", 
            "text": "You have to copy the  pybossa.ini.template  file to pybossa.ini in\nyour PYBOSSA installation and adapt the paths to match your\nconfiguration!  The content of this file is the following:  [uwsgi]\nsocket = /tmp/pybossa.sock\nchmod-socket = 666\nchdir = /home/pybossa/pybossa\npythonpath = ..\nvirtualenv = /home/pybossa/pybossa/env\nmodule = run:app\ncpu-affinity = 1\nprocesses = 2\nthreads = 2\nstats = /tmp/pybossa-stats.sock\nbuffer-size = 65535", 
            "title": "Creating the pybossa.ini file for uwsgi"
        }, 
        {
            "location": "/nginx/#install-supervisord", 
            "text": "Supervisord is used to let PYBOSSA and its RQ system run as Daemon in\nthe background. It shares some of the same goals of programs like\nlaunchd, daemontools, and runit.  Install it:  sudo apt-get install supervisor", 
            "title": "Install supervisord"
        }, 
        {
            "location": "/nginx/#configure-redis-and-sentinel-as-service-with-supervisord", 
            "text": "First stop redis service and all running redis instances with:  sudo service redis-server stop\nkillall redis-server  We want to run redis and sentinel with supervisord because supervisord\nis more reliable when redis crashes (which can happen when you have too\nless memory). So we disable redis-server daemon service with:  sudo rm /etc/init.d/redis-server  Go to your pybossa installation directory and copy following files:  sudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/\nsudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/\nsudo cp contrib/redis-supervisor/redis.conf /etc/redis/\nsudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/\nsudo chown redis:redis /etc/redis/redis.conf\nsudo chown redis:redis /etc/redis/sentinel.conf  Now we restart supervisord (please do a full stop and start as\ndescribed):  sudo service supervisor stop\nsudo service supervisor start  To verify install you can list all redis processes and you should see a\nredis-server at port 6379 and redis-sentinel at port 26379:  ps aux | grep redis  This two services will no run whenever the server is running (even after\nreboot).", 
            "title": "Configure Redis and sentinel as service with supervisord"
        }, 
        {
            "location": "/nginx/#configure-rq-scheduler-and-worker-to-run-with-supervisord", 
            "text": "You need to adjust the paths and user account in this two config files\naccording to your installation! Then copy them to supervisor (do not\nforget to edit them):  sudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf\nsudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf  Restart supervisor fully:  sudo service supervisor stop\nsudo service supervisor start  Verify service running. You should see a rqworker and rqscheduler\ninstance in console:  ps aux | grep rq", 
            "title": "Configure RQ-Scheduler and -Worker to run with supervisord"
        }, 
        {
            "location": "/nginx/#setup-pybossa-itself", 
            "text": "This steps are recommended to do when you run PYBOSSA in nginx. Open\nyour  settings_local.py  in your PYBOSSA installation and uncomment\nor delete the two lines with  HOST  and  PORT , e.g.:  # HOST = '0.0.0.0'\n# PORT = 12000  After that specify the full server URL where your PYBOSSA is reachable,\ne.g.:  SERVER_NAME = mypybossa.com\nPORT = 80", 
            "title": "Setup PYBOSSA itself"
        }, 
        {
            "location": "/nginx/#let-pybossa-run-as-service", 
            "text": "Finally we need to let pybossa run as service. Adjust again the paths\nand user name in this file and copy it to supervisor config directory:  sudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf  Edit now the file and adjust paths   user name.  Restart supervisor fully:  sudo service supervisor stop\nsudo service supervisor start  You should now have a running PYBOSSA production ready webserver on your\nnginx. Open your browser and check your configured domain http://example.com .  Congratulations! :)", 
            "title": "Let PYBOSSA run as service"
        }, 
        {
            "location": "/nginx/#how-to-update-pybossa-service", 
            "text": "Upgrading and updating PYBOSSA as service works the same as for a\nstandalone version. Please follow instructions on install. However a few\nextra steps are required after you updated.  You need to restart all supervisor controlled services after updating:  sudo supervisorctl restart rq-scheduler\nsudo supervisorctl restart rq-worker\nsudo supervisorctl restart pybossa", 
            "title": "How to update PYBOSSA service"
        }, 
        {
            "location": "/nginx/#logs-of-pybossa-services", 
            "text": "You can find logs of all PYBOSSA services in this directory:  cd /var/log/supervisor", 
            "title": "Logs of PYBOSSA services"
        }, 
        {
            "location": "/nginx/#last-words-about-security-and-scaling", 
            "text": "This guide does not cover how to secure your PYBOSSA installation. As\nevery web server you have to make it secure (like e.g. strong passwords,\nautomatic Ubuntu security updates, firewall, access restrictions).\nPlease use guides on the Internet to do so.  PYBOSSA can also be scaled horizontally to run with redundant servers\nand with zero downtime over many redis, db and web servers with load\nbalancers in between.  If you need a secure and/or scalable PYBOSSA installation please contact\nus. We will be glad to help you and we can even do all the hosting,\ncustomization, administration and installation for you when you want for\na small fee.  Contact address:", 
            "title": "Last words about Security and Scaling"
        }, 
        {
            "location": "/overview/", 
            "text": "PYBOSSA Overview\n\n\nPYBOSSA is an open source platform that allows you to create web\nmicrotasking projects where volunteers could participate using their own\nweb browsers.\n\n\nPYBOSSA has two main components:\n\n\n\n\nthe server and\n\n\nthe projects.\n\n\n\n\n\n\nPYBOSSA provides a api that will give you access to some of the model\nobjects.\n\n\n\n\n\nThe server\n\n\nThe PYBOSSA server is a \nPython\n web application that\nmanages \ntasks\n for web projects delivering them to users using a\nsimple api.\n\n\nThe \nCitizen Cyberscience Centre\n and\nthe \nOpen Knowledge Foundation\n provide the server\n\nCrowdCrafting.org\n so if you want, you can\nstart directly using this service without any cost, or if you prefer\ninstalling_pybossa yourself.\n\n\nArchitecture\n\n\nThe following diagram gives an overview of how a (Py)Bossa system\nfunctions:\n\n\n{width=\n100%\n}\n\n\nPYBOSSA itself implements the section marked \nBossa Core\n and provides a\nplatform on which Tasks can be created by Task Creators and from which\nTasks can be accessed by Task Presenters (and on which certain types of\nTask Presenters can directly run). Full documentation of the API\nprovided by PYBOSSA and which Task Creator and Task Presenters can use\nis to be found in api.\n\n\nThe Projects\n\n\nA PYBOSSA project is an HTML page with some\n\nJavaScript\n that will load a\n\ntask\n from a PYBOSSA server and present it to the volunteer and ask\nthe user to, for instance, classify an image, transcribe a hand written\ndocument, etc.\n\n\nA PYBOSSA project has two main components:\n\n\n\n\nA \nTask Presenter\n: an HTML document where the\n    \nJavaScript\n will load the\n    task data into the\n    \nDOM\n (see\n    task-creator); and\n\n\nA \nTask Creator\n: usually a script that will upload the tasks for\n    the project into the PYBOSSA server (see task-presenter).\n\n\n\n\nProjects can be easily created using two approaches:\n\n\n\n\nUsing the Web interface\n: where you can create a project, write\n    the \nTask Presenter\n and upload the tasks using the \nsimplified\n    built-in Task Creator\n (you can upload a CSV file or use a Google\n    Docs Spreadsheet link exported as CSV); or\n\n\nUsing the\n api: where you will be able to create the project,\n    write the \nTask Presenter\n and \nTask Creator\n using your preferred\n    text editor locally in your computer.\n\n\n\n\nThe \nWeb Interface\n is a nice start point to learn a bit more about\nthe PYBOSSA architecture and how you can develop a \nsimple\n project in a\nreally short time, while the api will give you more options in terms of\nflexibility at the cost of writing your own \nTask Creator\n.\n\n\n\n\nIt is possible to create the project using the web interface, and then\nwork locally in your computer developing the Task Presenter and Creator.\n\n\n\n\n\nTask Creator\n\n\nTask Creators are responsible for the creation of Tasks (and related\nentites \nApps, etc) in PYBOSSA. As such they will usually operate\nentirely outside of PYBOSSA itself interacting with PYBOSSA via the API.\n\n\nThe PYBOSSA project provides several PYBOSSA project templates that can\nbe re-used for creating a new project really easily:\n\n\n\n\nFlickr Person\n    Finder\n: an image\n    classification template,\n\n\nUrban Parks\n: a\n    geo-localizing using web-maps template,\n\n\nPDF Transcribe\n: a\n    trancription template.\n\n\n\n\nThe template projects provide the:\n\n\n\n\nTask Creator\n: check in the repository the \ncreateTasks.py\n\n    script,\n\n\nTask Presenter\n: check in the repository the \ntemplate.html\n\n    file,\n\n\nTutorial\n: check in the repository the \ntutorial.html\n file,\n\n\nProject description\n: check in the repository the \napp.json\n\n    and \nlong_description.md\n files.\n\n\n\n\nWe recommend you to read the user/tutorial as it gives \na step by step\n\nguide about how you can create a project, write the Task Creator and\nPresenter from scratch using the \nFlickr Person\nFinder\n template project.\n\n\nTask Presenter\n\n\nTask presenters are responsible for presenting tasks to user in an\nappropriate user interface. For example, if a task involves classifying\nan image then a Task Presenter could be an html page into which the\nimage has been inserted along with a form where the user can submit the\nresponse (the Task Presenter would also take care of submitting that\nresponse back to the PYBOSSA server via an API call).\n\n\nTask Presenters can be written in any language and run anywhere as long\nas they can communicate with the PYBOSSA server via its API.\n\n\nHowever, Task Presenters that wish to run as part of a PYBOSSA instance\nmust be written in HTML and JavaScript. In addition, Task Presenters\nrunning on as part of a PYBOSSA instance will have available some\nadditional information such as the id of the current logged in user\nperforming the task.\n\n\nThe PYBOSSA framework provides several template projects that can be\nre-used to create your own project:\n\n\n\n\nFlickr Person\n    Finder\n: an image\n    classification template,\n\n\nUrban Parks\n: a\n    geo-localizing using web-maps template,\n\n\nPDF Transcribe\n: a\n    trancription template.\n\n\n\n\nThe template projects provide the:\n\n\n\n\nTask Creator\n: check in the repository the \ncreateTasks.py\n\n    script,\n\n\nTask Presenter\n: check in the repository the \ntemplate.html\n\n    file,\n\n\nTutorial\n: check in the repository the \ntutorial.html\n file,\n\n\nProject description\n: check in the repository the \napp.json\n\n    and \nlong_description.md\n files.\n\n\n\n\nWe recommend you to read the user/tutorial as it gives \na step by step\n\nguide about how you can create a project, write the Task Creator and\nPresenter from scratch using the \nFlickr Person\nFinder\n template project.\n\n\nBOSSA Original Architecture\n\n\nPYBOSSA derives from the original \nBOSSA\n\nimplementation. The following are some useful references to that\noriginal implementation:\n\n\n\n\nhttp://boinc.berkeley.edu/trac/wiki/BossaImplementation\n\n\nBOSSA Reference:\n    \nhttp://boinc.berkeley.edu/trac/wiki/BossaReference", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#pybossa-overview", 
            "text": "PYBOSSA is an open source platform that allows you to create web\nmicrotasking projects where volunteers could participate using their own\nweb browsers.  PYBOSSA has two main components:   the server and  the projects.   \n\nPYBOSSA provides a api that will give you access to some of the model\nobjects.", 
            "title": "PYBOSSA Overview"
        }, 
        {
            "location": "/overview/#the-server", 
            "text": "The PYBOSSA server is a  Python  web application that\nmanages  tasks  for web projects delivering them to users using a\nsimple api.  The  Citizen Cyberscience Centre  and\nthe  Open Knowledge Foundation  provide the server CrowdCrafting.org  so if you want, you can\nstart directly using this service without any cost, or if you prefer\ninstalling_pybossa yourself.", 
            "title": "The server"
        }, 
        {
            "location": "/overview/#architecture", 
            "text": "The following diagram gives an overview of how a (Py)Bossa system\nfunctions:  {width= 100% }  PYBOSSA itself implements the section marked  Bossa Core  and provides a\nplatform on which Tasks can be created by Task Creators and from which\nTasks can be accessed by Task Presenters (and on which certain types of\nTask Presenters can directly run). Full documentation of the API\nprovided by PYBOSSA and which Task Creator and Task Presenters can use\nis to be found in api.", 
            "title": "Architecture"
        }, 
        {
            "location": "/overview/#the-projects", 
            "text": "A PYBOSSA project is an HTML page with some JavaScript  that will load a task  from a PYBOSSA server and present it to the volunteer and ask\nthe user to, for instance, classify an image, transcribe a hand written\ndocument, etc.  A PYBOSSA project has two main components:   A  Task Presenter : an HTML document where the\n     JavaScript  will load the\n    task data into the\n     DOM  (see\n    task-creator); and  A  Task Creator : usually a script that will upload the tasks for\n    the project into the PYBOSSA server (see task-presenter).   Projects can be easily created using two approaches:   Using the Web interface : where you can create a project, write\n    the  Task Presenter  and upload the tasks using the  simplified\n    built-in Task Creator  (you can upload a CSV file or use a Google\n    Docs Spreadsheet link exported as CSV); or  Using the  api: where you will be able to create the project,\n    write the  Task Presenter  and  Task Creator  using your preferred\n    text editor locally in your computer.   The  Web Interface  is a nice start point to learn a bit more about\nthe PYBOSSA architecture and how you can develop a  simple  project in a\nreally short time, while the api will give you more options in terms of\nflexibility at the cost of writing your own  Task Creator .  \n\nIt is possible to create the project using the web interface, and then\nwork locally in your computer developing the Task Presenter and Creator.", 
            "title": "The Projects"
        }, 
        {
            "location": "/overview/#task-creator", 
            "text": "Task Creators are responsible for the creation of Tasks (and related\nentites  Apps, etc) in PYBOSSA. As such they will usually operate\nentirely outside of PYBOSSA itself interacting with PYBOSSA via the API.  The PYBOSSA project provides several PYBOSSA project templates that can\nbe re-used for creating a new project really easily:   Flickr Person\n    Finder : an image\n    classification template,  Urban Parks : a\n    geo-localizing using web-maps template,  PDF Transcribe : a\n    trancription template.   The template projects provide the:   Task Creator : check in the repository the  createTasks.py \n    script,  Task Presenter : check in the repository the  template.html \n    file,  Tutorial : check in the repository the  tutorial.html  file,  Project description : check in the repository the  app.json \n    and  long_description.md  files.   We recommend you to read the user/tutorial as it gives  a step by step \nguide about how you can create a project, write the Task Creator and\nPresenter from scratch using the  Flickr Person\nFinder  template project.", 
            "title": "Task Creator"
        }, 
        {
            "location": "/overview/#task-presenter", 
            "text": "Task presenters are responsible for presenting tasks to user in an\nappropriate user interface. For example, if a task involves classifying\nan image then a Task Presenter could be an html page into which the\nimage has been inserted along with a form where the user can submit the\nresponse (the Task Presenter would also take care of submitting that\nresponse back to the PYBOSSA server via an API call).  Task Presenters can be written in any language and run anywhere as long\nas they can communicate with the PYBOSSA server via its API.  However, Task Presenters that wish to run as part of a PYBOSSA instance\nmust be written in HTML and JavaScript. In addition, Task Presenters\nrunning on as part of a PYBOSSA instance will have available some\nadditional information such as the id of the current logged in user\nperforming the task.  The PYBOSSA framework provides several template projects that can be\nre-used to create your own project:   Flickr Person\n    Finder : an image\n    classification template,  Urban Parks : a\n    geo-localizing using web-maps template,  PDF Transcribe : a\n    trancription template.   The template projects provide the:   Task Creator : check in the repository the  createTasks.py \n    script,  Task Presenter : check in the repository the  template.html \n    file,  Tutorial : check in the repository the  tutorial.html  file,  Project description : check in the repository the  app.json \n    and  long_description.md  files.   We recommend you to read the user/tutorial as it gives  a step by step \nguide about how you can create a project, write the Task Creator and\nPresenter from scratch using the  Flickr Person\nFinder  template project.", 
            "title": "Task Presenter"
        }, 
        {
            "location": "/overview/#bossa-original-architecture", 
            "text": "PYBOSSA derives from the original  BOSSA \nimplementation. The following are some useful references to that\noriginal implementation:   http://boinc.berkeley.edu/trac/wiki/BossaImplementation  BOSSA Reference:\n     http://boinc.berkeley.edu/trac/wiki/BossaReference", 
            "title": "BOSSA Original Architecture"
        }, 
        {
            "location": "/plugins/", 
            "text": "Writing plugins for a PYBOSSA server\n\n\nPYBOSSA has a plugin system that allows you to write your own custom\nfeatures and add them to a running PYBOSSA server without the need of\ntouching the server code. For instance, you could create a new endpoint\nfor an admin dashboard (with new views, templates, etc.) or build a new\nscheduler like in \nthis\nexample\n.\n\n\nThe PYBOSSA plugin system is powered by\n\nFlask-plugins\n\n\nTo create a plugin, you will have to make a folder with the name of your\nplugin and add it to the plugins folder in your PYBOSSA server. If you\nhave the PYBOSSA code in a directory called pybossa, then the plugins\nfolder will be pybossa/pybossa/plugins.\n\n\nThe least you need to include in that folder is the following:\n\n\nyour_plugin_folder\n|-- info.json\n|-- __init__.py\n\n\n\nflask.ext.plugins.Plugin. On the other hand, info.json needs to follow\nthe schema:\n\n\n{\n    \"identifier\": \"identifier\",\n    \"name\": \"PluginClass\",\n    \"author\": \"you@yourdomain.com\",\n    \"license\": \"AGPLv3\",\n    \"description\": \"whatever\",\n    \"version\": \"0.0.1\"\n}\n\n\n\nYou could also create a more sofisticated plugin, including your own\ntemplates, models, forms\n everything you need:\n\n\nyour_plugin_folder\n|-- info.json                Contains the Plugin's metadata\n|-- license.txt              The full license text of your plugin\n|-- __init__.py              The plugin's main class is located here\n|-- views.py\n|-- models.py\n|-- forms.py\n|-- static\n|   |-- style.css\n|-- templates\n    |-- myplugin.html\n\n\n\nFor more information and examples, please refer to the Flask-plugins\n\ndocumentation\n.", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/#writing-plugins-for-a-pybossa-server", 
            "text": "PYBOSSA has a plugin system that allows you to write your own custom\nfeatures and add them to a running PYBOSSA server without the need of\ntouching the server code. For instance, you could create a new endpoint\nfor an admin dashboard (with new views, templates, etc.) or build a new\nscheduler like in  this\nexample .  The PYBOSSA plugin system is powered by Flask-plugins  To create a plugin, you will have to make a folder with the name of your\nplugin and add it to the plugins folder in your PYBOSSA server. If you\nhave the PYBOSSA code in a directory called pybossa, then the plugins\nfolder will be pybossa/pybossa/plugins.  The least you need to include in that folder is the following:  your_plugin_folder\n|-- info.json\n|-- __init__.py  flask.ext.plugins.Plugin. On the other hand, info.json needs to follow\nthe schema:  {\n    \"identifier\": \"identifier\",\n    \"name\": \"PluginClass\",\n    \"author\": \"you@yourdomain.com\",\n    \"license\": \"AGPLv3\",\n    \"description\": \"whatever\",\n    \"version\": \"0.0.1\"\n}  You could also create a more sofisticated plugin, including your own\ntemplates, models, forms  everything you need:  your_plugin_folder\n|-- info.json                Contains the Plugin's metadata\n|-- license.txt              The full license text of your plugin\n|-- __init__.py              The plugin's main class is located here\n|-- views.py\n|-- models.py\n|-- forms.py\n|-- static\n|   |-- style.css\n|-- templates\n    |-- myplugin.html  For more information and examples, please refer to the Flask-plugins documentation .", 
            "title": "Writing plugins for a PYBOSSA server"
        }, 
        {
            "location": "/translating/", 
            "text": "Translating PYBOSSA\n\n\nPYBOSSA supports i18n locales, so you can translate the \nUser\nInterface\n to any language. By default PYBOSSA comes with several\nlanguages: English, Spanish, Italian, French, German, Greek and\nJapanese.\n\n\nEnabling multiple locales\n\n\nBy default the translations are located in the default theme folder.\n\n\nYou can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:\n\n\n``` {.sourceCode .bash}\n$ cd pybossa \n ln -s themes/default/translations\n\n\n\nThis will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme.\n\nAdding a new language\n---------------------\n\nIf you want to translate PYBOSSA to your own language, lets say French,\nall you have to do is create a translation file with this command:\n\n``` {.sourceCode .bash}\n$ pybabel init -i messages.pot -d translations -l fr\n\n\n\n\nThen, open the file \ntranslations/fr/LC_MESSAGES/messages.po\n with\nany text editor and translate the English strings to French. For\nexample, if you get this string:\n\n\n``` {.sourceCode .python}\n\n\n: templates/_gcs_form.html:6 templates/admin/users.html:20\n\n\nmsgid \nSearch\n\nmsgstr \n\n\n\nAll you have to do is to translate **Search** to its equivalent in\nFrench **Rechercher** and type in the msgstr section:\n\n``` {.sourceCode .python}\n#: templates/_gcs_form.html:6 templates/admin/users.html:20\nmsgid \nSearch\n\nmsgstr \nRechercher\n\n\n\n\n\nOnce you have translated all the strings, all you have to do is compile\nthe translation with this command:\n\n\n``` {.sourceCode .bash}\n$ pybabel compile -d translations\n\n\n\nAnd now enable the new locale in the server local\\_settings.py file.\nCheck for the LOCALES config variable and add your locale.\n\nUpdating translation and adding new strings to the translation\n--------------------------------------------------------------\n\nFrom time to time, the PYBOSSA framework will have new strings to\ntranslate. In order to add the new strings (or update previous ones) you\nhave to follow this 3 simple steps.\n\nStep 1, extract new strings which should be translated:\n\n``` {.sourceCode .bash}\n$ cd pybossa\n$ pybabel extract . -F translations/../babel.cfg -k lazy_gettext -o translations/messages.pot\n\n\n\n\nStep 2, update existing translation files:\n\n\n``` {.sourceCode .bash}\n$ pybabel update -i translations/messages.pot -d translations\n\n\n\nThis will update all translation file (messages.po) and will try to\nguess some of the translations for saving you time. While this feature\nis really good, sometimes the translation is not good enough, so you\nwill get the word: **fuzzy** on top of the translation. Check all the\n**fuzzy** translations and fix them. When you are done, remove the line\nwith the word **fuzzy** and re-compile the translations.\n\nStep 3, recompile translation files:\n\n``` {.sourceCode .bash}\n$ pybabel compile -d translations\n\n\n\n\nContributing your translation to the upstream repository\n\n\nWe would love to support more and more languages by default, so if you\nhave done a translation and you would like that we include it in the\ndefault package, send us a github pull request with your translations or\nif you prefer by e-mail to \n\n\nWe will be very happy to add your contributions to the system.", 
            "title": "Translating"
        }, 
        {
            "location": "/translating/#translating-pybossa", 
            "text": "PYBOSSA supports i18n locales, so you can translate the  User\nInterface  to any language. By default PYBOSSA comes with several\nlanguages: English, Spanish, Italian, French, German, Greek and\nJapanese.", 
            "title": "Translating PYBOSSA"
        }, 
        {
            "location": "/translating/#enabling-multiple-locales", 
            "text": "By default the translations are located in the default theme folder.  You can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:  ``` {.sourceCode .bash}\n$ cd pybossa   ln -s themes/default/translations  \nThis will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme.\n\nAdding a new language\n---------------------\n\nIf you want to translate PYBOSSA to your own language, lets say French,\nall you have to do is create a translation file with this command:\n\n``` {.sourceCode .bash}\n$ pybabel init -i messages.pot -d translations -l fr  Then, open the file  translations/fr/LC_MESSAGES/messages.po  with\nany text editor and translate the English strings to French. For\nexample, if you get this string:  ``` {.sourceCode .python}", 
            "title": "Enabling multiple locales"
        }, 
        {
            "location": "/translating/#templates_gcs_formhtml6-templatesadminusershtml20", 
            "text": "msgid  Search \nmsgstr   \nAll you have to do is to translate **Search** to its equivalent in\nFrench **Rechercher** and type in the msgstr section:\n\n``` {.sourceCode .python}\n#: templates/_gcs_form.html:6 templates/admin/users.html:20\nmsgid  Search \nmsgstr  Rechercher   Once you have translated all the strings, all you have to do is compile\nthe translation with this command:  ``` {.sourceCode .bash}\n$ pybabel compile -d translations  \nAnd now enable the new locale in the server local\\_settings.py file.\nCheck for the LOCALES config variable and add your locale.\n\nUpdating translation and adding new strings to the translation\n--------------------------------------------------------------\n\nFrom time to time, the PYBOSSA framework will have new strings to\ntranslate. In order to add the new strings (or update previous ones) you\nhave to follow this 3 simple steps.\n\nStep 1, extract new strings which should be translated:\n\n``` {.sourceCode .bash}\n$ cd pybossa\n$ pybabel extract . -F translations/../babel.cfg -k lazy_gettext -o translations/messages.pot  Step 2, update existing translation files:  ``` {.sourceCode .bash}\n$ pybabel update -i translations/messages.pot -d translations  \nThis will update all translation file (messages.po) and will try to\nguess some of the translations for saving you time. While this feature\nis really good, sometimes the translation is not good enough, so you\nwill get the word: **fuzzy** on top of the translation. Check all the\n**fuzzy** translations and fix them. When you are done, remove the line\nwith the word **fuzzy** and re-compile the translations.\n\nStep 3, recompile translation files:\n\n``` {.sourceCode .bash}\n$ pybabel compile -d translations", 
            "title": ": templates/_gcs_form.html:6 templates/admin/users.html:20"
        }, 
        {
            "location": "/translating/#contributing-your-translation-to-the-upstream-repository", 
            "text": "We would love to support more and more languages by default, so if you\nhave done a translation and you would like that we include it in the\ndefault package, send us a github pull request with your translations or\nif you prefer by e-mail to   We will be very happy to add your contributions to the system.", 
            "title": "Contributing your translation to the upstream repository"
        }, 
        {
            "location": "/vagrant_pybossa/", 
            "text": "Testing PYBOSSA with a Virtual Machine\n\n\nVagrant\n is an open source solution that\nallows you to create and configure lightweight, reproducible, and\nportable development environments.\n\n\nVagrant\n simplifies a lot setting up all the\nrequirements for a web application like PYBOSSA, as you will set up a\nvirtual machine that \nautomagically\n downloads all the required\nlibraries and dependencies for developing and testing the project.\n\n\nFor these reasons, PYBOSSA uses Vagrant to allow you to start hacking\nthe system in a very simple way, and more importantly, without polluting\nyour system with lots of libraries that you may or may not needed\n(everything is configured in the Virtual Machine, which is a very safe\nsand-box!).\n\n\nAdditionally several cloud companies have integration with Vagrant, so\ndeploying a PYBOSSA server is really simple using this method.\n\n\n\n\nThe virtual machine and server are configured with a **very basic\nsecurity** set of rules (passwords, secrets, firewall, etc.). Therefore,\n*if you are going to use this method to deploy a PYBOSSA production\nserver* **it is your responsibility to secure the system properly**.\n\n\n\n\n\nSetting up PYBOSSA with Vagrant\n\n\nIn order to start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:\n\n\n\n\nVirtualBox\n (min version 4.2.10)\n\n\nVagrant\n (min version 1.2.1)\n\n\n\n\n\n\n[Vagrant](http://www.vagrantup.com/) and [VirtualBox](https://www.virtualbox.org/) works in Windows, GNU/Linux and Mac OS X, so you can try and run\n\n:   PYBOSSA without problems!\n\n\n\n\n\nClone the PYBOSSA git repository (be sure to install git in your\nmachine!):\n\n\n$ git clone --recursive https://github.com/Scifabric/pybossa.git\n\n\n\nOnce the source code has been downloaded, all you have to do to start\nyour PYBOSSA development environment is typing the following:\n\n\n$ cd pybossa\n$ vagrant up\n\n\n\nThe system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the Virtual\nMachine.\n\n\nVagrant is really great, because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will\nbe able to test it right away (this feature is pretty handy for\nworkshop, hackfests, etc.).\n\n\nRunning the PYBOSSA server\n\n\nNow that all the libraries and dependencies have been installed, you can\nlunch the PYBOSSA development server:\n\n\n$ vagrant ssh\n$ python run.py\n\n\n\n\n\nVirtualenv (located in /home/vagrant/pybossa-env) is always activated on\nlogin.\n\n\n\n\n\nNow all you have to do is open the following URL in your web browser:\n\n\nhttp://127.0.0.1:5000\n\n\n\nAnd you are done! Happy Hacking!\n\n\n\n\nPYBOSSA needs a RQ worker process. It is running by default permanently\nin the background in the VM and is controlled by supervisor. Optional is\nalso the RQ scheduler process for speeding up tasks like ZIP creation.\nThis process is off by default now. If you are developing on RQ worker\nyou want to restart or disable it with supervisorctl.", 
            "title": "Vagrant pybossa"
        }, 
        {
            "location": "/vagrant_pybossa/#testing-pybossa-with-a-virtual-machine", 
            "text": "Vagrant  is an open source solution that\nallows you to create and configure lightweight, reproducible, and\nportable development environments.  Vagrant  simplifies a lot setting up all the\nrequirements for a web application like PYBOSSA, as you will set up a\nvirtual machine that  automagically  downloads all the required\nlibraries and dependencies for developing and testing the project.  For these reasons, PYBOSSA uses Vagrant to allow you to start hacking\nthe system in a very simple way, and more importantly, without polluting\nyour system with lots of libraries that you may or may not needed\n(everything is configured in the Virtual Machine, which is a very safe\nsand-box!).  Additionally several cloud companies have integration with Vagrant, so\ndeploying a PYBOSSA server is really simple using this method.  \n\nThe virtual machine and server are configured with a **very basic\nsecurity** set of rules (passwords, secrets, firewall, etc.). Therefore,\n*if you are going to use this method to deploy a PYBOSSA production\nserver* **it is your responsibility to secure the system properly**.", 
            "title": "Testing PYBOSSA with a Virtual Machine"
        }, 
        {
            "location": "/vagrant_pybossa/#setting-up-pybossa-with-vagrant", 
            "text": "In order to start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:   VirtualBox  (min version 4.2.10)  Vagrant  (min version 1.2.1)   \n\n[Vagrant](http://www.vagrantup.com/) and [VirtualBox](https://www.virtualbox.org/) works in Windows, GNU/Linux and Mac OS X, so you can try and run\n\n:   PYBOSSA without problems!  Clone the PYBOSSA git repository (be sure to install git in your\nmachine!):  $ git clone --recursive https://github.com/Scifabric/pybossa.git  Once the source code has been downloaded, all you have to do to start\nyour PYBOSSA development environment is typing the following:  $ cd pybossa\n$ vagrant up  The system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the Virtual\nMachine.  Vagrant is really great, because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will\nbe able to test it right away (this feature is pretty handy for\nworkshop, hackfests, etc.).", 
            "title": "Setting up PYBOSSA with Vagrant"
        }, 
        {
            "location": "/vagrant_pybossa/#running-the-pybossa-server", 
            "text": "Now that all the libraries and dependencies have been installed, you can\nlunch the PYBOSSA development server:  $ vagrant ssh\n$ python run.py  \n\nVirtualenv (located in /home/vagrant/pybossa-env) is always activated on\nlogin.  Now all you have to do is open the following URL in your web browser:  http://127.0.0.1:5000  And you are done! Happy Hacking!  \n\nPYBOSSA needs a RQ worker process. It is running by default permanently\nin the background in the VM and is controlled by supervisor. Optional is\nalso the RQ scheduler process for speeding up tasks like ZIP creation.\nThis process is off by default now. If you are developing on RQ worker\nyou want to restart or disable it with supervisorctl.", 
            "title": "Running the PYBOSSA server"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\n\n\n\nv2.3.8\n\n\nv2.3.0\n\n\nv2.2.1\n\n\nv2.2.0\n\n\nv2.1.0\n\n\nv2.0.0\n\n\nv1.6.2\n\n\nv1.6.1\n\n\nv1.6.0\n\n\nv1.5.1\n\n\nv1.5.0\n\n\nv1.4.1\n\n\nv1.4.0\n\n\nv1.3.0\n\n\nv1.2.2\n\n\nv1.2.1\n\n\nv1.2.0\n\n\nv1.1.3\n\n\nv1.1.2\n\n\nv1.1.1\n\n\nv1.1.0\n\n\nv0.2.3", 
            "title": "Home"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "v2.3.8  v2.3.0  v2.2.1  v2.2.0  v2.1.0  v2.0.0  v1.6.2  v1.6.1  v1.6.0  v1.5.1  v1.5.0  v1.4.1  v1.4.0  v1.3.0  v1.2.2  v1.2.1  v1.2.0  v1.1.3  v1.1.2  v1.1.1  v1.1.0  v0.2.3", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/v0.2.3/", 
            "text": "Changelog v0.2.3\n\n\nThe most interesting changes are the following:\n\n\n:   -   New security version for POSTing task_runs preventing abusing\n        the system\n    -   CKAN backend performance improvements: polling now with\n        JavaScript\n    -   Themes support: now you can easily customize PYBOSSA look and\n        feel\n    -   Breadth First Scheduler improved: now users can only participate\n        once in every task.\n    -   Refactor API and add three new endpoints: globalstats, user and\n        token.\n    -   Allow admins to download a list of users in CSV/JSON format.\n    -   Fix CKAN key uniqueness in DB.\n    -   Load 20 apps per page (customized in the settings page).\n    -   Send categories to the front page.\n    -   Use Markdown as default for App\ns long description field (with\n        migration script for older versions).\n    -   Add a simple blog for each app where the owner can share its\n        progress with the users.\n    -   Passwords in apps: the owner of the app can set a password so\n        both anonymous and authenticated users are required to know it\n        if they want to contribute to the app.\n    -   Background jobs: cache warm, large tasks import, email, etc, are\n        handled now as job executed in the background.\n    -   Background jobs dashboard: admins can manage background jobs\n        with a dashboard.\n    -   Audit log for projects: admin users can see the changes that a\n        project has gone through.\n    -   Newsletters: a PYBOSSA project can now show a newsletter\n        subscription page to a Mailchimp list.\n    -   Export tasks and taskruns changes: creation of CSV and JSON\n        files for both task and task runs are now handled in the\n        background regularly, and served as static .zip files.\n    -   Flickr importer: import tasks for image classification projects\n        directly from a Flickr account.\n    -   Dropbox importer: import tasks directly from public files in a\n        Dropbox account.\n    -   Apps are now projects: URL for projects have been renamed from\n        /app/aproject to /project/aproject in all the code, both\n        front-end and back-end, including database and API.\n    -   Plugins system: support for creating custom plugins and add them\n        to a PYBOSSA server has been added.\n    -   PYBOSSA dashboard: see what\ns going on in your server.\n        \nREQUIRES POSTGRESQL \n= 9.3\n\n    -   Add keyset pagination for the API: this returns results much\n        faster than offsets.\n\n\nFor a full list of changes, see associated \nGithub\nmilestone\n.\n\n\nUpgrading\n\n\nThe new security changes force you to upgrade your current server to\nmake it more robust against possible attacks.\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V0.2.3"
        }, 
        {
            "location": "/changelog/v0.2.3/#changelog-v023", 
            "text": "The most interesting changes are the following:  :   -   New security version for POSTing task_runs preventing abusing\n        the system\n    -   CKAN backend performance improvements: polling now with\n        JavaScript\n    -   Themes support: now you can easily customize PYBOSSA look and\n        feel\n    -   Breadth First Scheduler improved: now users can only participate\n        once in every task.\n    -   Refactor API and add three new endpoints: globalstats, user and\n        token.\n    -   Allow admins to download a list of users in CSV/JSON format.\n    -   Fix CKAN key uniqueness in DB.\n    -   Load 20 apps per page (customized in the settings page).\n    -   Send categories to the front page.\n    -   Use Markdown as default for App s long description field (with\n        migration script for older versions).\n    -   Add a simple blog for each app where the owner can share its\n        progress with the users.\n    -   Passwords in apps: the owner of the app can set a password so\n        both anonymous and authenticated users are required to know it\n        if they want to contribute to the app.\n    -   Background jobs: cache warm, large tasks import, email, etc, are\n        handled now as job executed in the background.\n    -   Background jobs dashboard: admins can manage background jobs\n        with a dashboard.\n    -   Audit log for projects: admin users can see the changes that a\n        project has gone through.\n    -   Newsletters: a PYBOSSA project can now show a newsletter\n        subscription page to a Mailchimp list.\n    -   Export tasks and taskruns changes: creation of CSV and JSON\n        files for both task and task runs are now handled in the\n        background regularly, and served as static .zip files.\n    -   Flickr importer: import tasks for image classification projects\n        directly from a Flickr account.\n    -   Dropbox importer: import tasks directly from public files in a\n        Dropbox account.\n    -   Apps are now projects: URL for projects have been renamed from\n        /app/aproject to /project/aproject in all the code, both\n        front-end and back-end, including database and API.\n    -   Plugins system: support for creating custom plugins and add them\n        to a PYBOSSA server has been added.\n    -   PYBOSSA dashboard: see what s going on in your server.\n         REQUIRES POSTGRESQL  = 9.3 \n    -   Add keyset pagination for the API: this returns results much\n        faster than offsets.  For a full list of changes, see associated  Github\nmilestone .", 
            "title": "Changelog v0.2.3"
        }, 
        {
            "location": "/changelog/v0.2.3/#upgrading", 
            "text": "The new security changes force you to upgrade your current server to\nmake it more robust against possible attacks.  \n\nPlease, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.0.0/", 
            "text": "Changelog v1.0.0\n\n\n\n\n\n\nBugfixes.\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V1.0.0"
        }, 
        {
            "location": "/changelog/v1.0.0/#changelog-v100", 
            "text": "Bugfixes.", 
            "title": "Changelog v1.0.0"
        }, 
        {
            "location": "/changelog/v1.0.0/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.1.0/", 
            "text": "Changelog v1.1.0\n\n\n\n\n\n\nRemove support for hidden projects. To hide them use of password\n    is now needed.\n\n\nProjects need to be published in order to be visible for the\n    volunteers.\n\n\nAdd webhook table to debug easily them.\n\n\nAdd Server Sent Events (SSE) to notify background jobs status on\n    real time.\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V1.1.0"
        }, 
        {
            "location": "/changelog/v1.1.0/#changelog-v110", 
            "text": "Remove support for hidden projects. To hide them use of password\n    is now needed.  Projects need to be published in order to be visible for the\n    volunteers.  Add webhook table to debug easily them.  Add Server Sent Events (SSE) to notify background jobs status on\n    real time.", 
            "title": "Changelog v1.1.0"
        }, 
        {
            "location": "/changelog/v1.1.0/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.1.1/", 
            "text": "Changelog v1.1.1\n\n\n\n\n\n\nJust update the docs and default theme to fully integrate previous\n    changes.\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V1.1.1"
        }, 
        {
            "location": "/changelog/v1.1.1/#changelog-v111", 
            "text": "Just update the docs and default theme to fully integrate previous\n    changes.", 
            "title": "Changelog v1.1.1"
        }, 
        {
            "location": "/changelog/v1.1.1/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.1.2/", 
            "text": "Changelog v1.1.2\n\n\n\n\n\n\nUnpublish projects when they have been inactive in the last 3\n    months.\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V1.1.2"
        }, 
        {
            "location": "/changelog/v1.1.2/#changelog-v112", 
            "text": "Unpublish projects when they have been inactive in the last 3\n    months.", 
            "title": "Changelog v1.1.2"
        }, 
        {
            "location": "/changelog/v1.1.2/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.1.3/", 
            "text": "Changelog v1.1.3\n\n\n\n\n\n\nSave in the \ncreated\n attribute of task runs a timestamp of the\n    moment it was delivered to the volunteer so project owners can\n    keep track of the time invested by the volunteer in completing the\n    task.\n\n\nFix issue with completed projects being listed as inactive in a\n    background job\n    (\nhttps://github.com/Scifabric/pybossa/issues/1214\n).\n\n\nFix issue with SQL query for quarterly jobs\n    (\nhttps://github.com/Scifabric/pybossa/issues/1206\n).\n\n\nUpgraded dependencies.\n\n\nFix bug that was preventing saving the description of a project if\n    it was provided on project creation, generating always the\n    description by cropping the long description\n    (\nhttps://github.com/Scifabric/pybossa/pull/1213\n).\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\n\n\n\nThen restart your server, and you will be done.", 
            "title": "V1.1.3"
        }, 
        {
            "location": "/changelog/v1.1.3/#changelog-v113", 
            "text": "Save in the  created  attribute of task runs a timestamp of the\n    moment it was delivered to the volunteer so project owners can\n    keep track of the time invested by the volunteer in completing the\n    task.  Fix issue with completed projects being listed as inactive in a\n    background job\n    ( https://github.com/Scifabric/pybossa/issues/1214 ).  Fix issue with SQL query for quarterly jobs\n    ( https://github.com/Scifabric/pybossa/issues/1206 ).  Upgraded dependencies.  Fix bug that was preventing saving the description of a project if\n    it was provided on project creation, generating always the\n    description by cropping the long description\n    ( https://github.com/Scifabric/pybossa/pull/1213 ).", 
            "title": "Changelog v1.1.3"
        }, 
        {
            "location": "/changelog/v1.1.3/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head  Then restart your server, and you will be done.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.2.0/", 
            "text": "Changelog v1.2.0\n\n\n\n\n\n\nAdd to projects a result table so, project owners can show case\n    directly in their project the results achieved. More info\n    pybossa-project-results.\n\n\n\n\n\n\nUpgrading\n\n\n\n\nPlease, backup the database before continuing.\n\n\n\n\n\nIn order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:\n\n\nsource env/bin/activate\nalembic upgrade head\npython cli.py create_results\n\n\n\nThen restart your server, and you will be done.\n\n\nNOTE: depending on your server, the creation of results will vary based\non number of completed tasks and task_runs.", 
            "title": "V1.2.0"
        }, 
        {
            "location": "/changelog/v1.2.0/#changelog-v120", 
            "text": "Add to projects a result table so, project owners can show case\n    directly in their project the results achieved. More info\n    pybossa-project-results.", 
            "title": "Changelog v1.2.0"
        }, 
        {
            "location": "/changelog/v1.2.0/#upgrading", 
            "text": "Please, backup the database before continuing.  In order to upgrade you will have to pull the new code, and then run the\nfollowing command to upgrade the database:  source env/bin/activate\nalembic upgrade head\npython cli.py create_results  Then restart your server, and you will be done.  NOTE: depending on your server, the creation of results will vary based\non number of completed tasks and task_runs.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/changelog/v1.2.1/", 
            "text": "Changelog v1.2.1\n\n\n\n\n\n\nGet latest news about PYBOSSA and SciFabric for admins. The admin\n    page will feature the latest releases of PYBOSSA and news about\n    SciFabric. You can customize more news sites if you want.", 
            "title": "V1.2.1"
        }, 
        {
            "location": "/changelog/v1.2.1/#changelog-v121", 
            "text": "Get latest news about PYBOSSA and SciFabric for admins. The admin\n    page will feature the latest releases of PYBOSSA and news about\n    SciFabric. You can customize more news sites if you want.", 
            "title": "Changelog v1.2.1"
        }, 
        {
            "location": "/changelog/v1.2.2/", 
            "text": "Changelog v1.2.2\n\n\n\n\n\n\nMake pro user features extensible to all regular users in the\n    configuration files.", 
            "title": "V1.2.2"
        }, 
        {
            "location": "/changelog/v1.2.2/#changelog-v122", 
            "text": "Make pro user features extensible to all regular users in the\n    configuration files.", 
            "title": "Changelog v1.2.2"
        }, 
        {
            "location": "/changelog/v1.3.0/", 
            "text": "Changelog v1.3.0\n\n\n\n\n\n\nAdd Twitter importer.", 
            "title": "V1.3.0"
        }, 
        {
            "location": "/changelog/v1.3.0/#changelog-v130", 
            "text": "Add Twitter importer.", 
            "title": "Changelog v1.3.0"
        }, 
        {
            "location": "/changelog/v1.4.0/", 
            "text": "Changelog v1.4.0\n\n\n\n\n\n\nUpdate Pyrax dependencies.\n\n\nAutoimport tasks can pass arbitrary metadata from previous import\n    task to the next scheduled execution.\n\n\nTwitter importer can use now API credentials from user too.\n\n\nImproved test coverage.\n\n\nA dict with data about the installed plugins is now available as a\n    global jinja2 template variable.\n\n\nNew theme for documentation.\n\n\nImprovements in documentation.", 
            "title": "V1.4.0"
        }, 
        {
            "location": "/changelog/v1.4.0/#changelog-v140", 
            "text": "Update Pyrax dependencies.  Autoimport tasks can pass arbitrary metadata from previous import\n    task to the next scheduled execution.  Twitter importer can use now API credentials from user too.  Improved test coverage.  A dict with data about the installed plugins is now available as a\n    global jinja2 template variable.  New theme for documentation.  Improvements in documentation.", 
            "title": "Changelog v1.4.0"
        }, 
        {
            "location": "/changelog/v1.4.1/", 
            "text": "Changelog v1.4.1\n\n\n\n\n\n\nFix bug in Google Spreadsheet importer (#1248)", 
            "title": "V1.4.1"
        }, 
        {
            "location": "/changelog/v1.4.1/#changelog-v141", 
            "text": "Fix bug in Google Spreadsheet importer (#1248)", 
            "title": "Changelog v1.4.1"
        }, 
        {
            "location": "/changelog/v1.5.0/", 
            "text": "Changelog v1.5.0\n\n\n\n\n\n\nAdded Amazon S3 importer", 
            "title": "V1.5.0"
        }, 
        {
            "location": "/changelog/v1.5.0/#changelog-v150", 
            "text": "Added Amazon S3 importer", 
            "title": "Changelog v1.5.0"
        }, 
        {
            "location": "/changelog/v1.5.1/", 
            "text": "Changelog v1.5.1\n\n\n\n\n\n\nStore taskruns from draft projects, flush them automatically\n    before publishing the project.", 
            "title": "V1.5.1"
        }, 
        {
            "location": "/changelog/v1.5.1/#changelog-v151", 
            "text": "Store taskruns from draft projects, flush them automatically\n    before publishing the project.", 
            "title": "Changelog v1.5.1"
        }, 
        {
            "location": "/changelog/v1.6.0/", 
            "text": "Changelog v1.6.0\n\n\n\n\n\n\nThe API is now aware of the owner context. More \ninfo\n.", 
            "title": "V1.6.0"
        }, 
        {
            "location": "/changelog/v1.6.0/#changelog-v160", 
            "text": "The API is now aware of the owner context. More  info .", 
            "title": "Changelog v1.6.0"
        }, 
        {
            "location": "/changelog/v1.6.1/", 
            "text": "Changelog v1.6.1\n\n\n\n\n\n\nPYBOSSA security improvement for tasks and task runs.", 
            "title": "V1.6.1"
        }, 
        {
            "location": "/changelog/v1.6.1/#changelog-v161", 
            "text": "PYBOSSA security improvement for tasks and task runs.", 
            "title": "Changelog v1.6.1"
        }, 
        {
            "location": "/changelog/v1.6.2/", 
            "text": "Changelog v1.6.2\n\n\n\n\n\n\nPYBOSSA supports webassets: SASS, LESS, Coffee Script, etc.", 
            "title": "V1.6.2"
        }, 
        {
            "location": "/changelog/v1.6.2/#changelog-v162", 
            "text": "PYBOSSA supports webassets: SASS, LESS, Coffee Script, etc.", 
            "title": "Changelog v1.6.2"
        }, 
        {
            "location": "/changelog/v2.0.0/", 
            "text": "Changelog v2.0.0\n\n\n\n\n\n\nBrand new theme with lots of small fixes.\n\n\nSupport of different aspect ratios for avatars.", 
            "title": "V2.0.0"
        }, 
        {
            "location": "/changelog/v2.0.0/#changelog-v200", 
            "text": "Brand new theme with lots of small fixes.  Support of different aspect ratios for avatars.", 
            "title": "Changelog v2.0.0"
        }, 
        {
            "location": "/changelog/v2.1.0/", 
            "text": "Changelog v2.1.0\n\n\n\n\n\n\nNow it\ns possible to use the API to get first level keys from JSON\n    in info field.", 
            "title": "V2.1.0"
        }, 
        {
            "location": "/changelog/v2.1.0/#changelog-v210", 
            "text": "Now it s possible to use the API to get first level keys from JSON\n    in info field.", 
            "title": "Changelog v2.1.0"
        }, 
        {
            "location": "/changelog/v2.2.0/", 
            "text": "Changelog v2.2.0\n\n\n\n\n\n\nFull text search enabled for Task, Task Runs and Results in the\n    JSON first key level.", 
            "title": "V2.2.0"
        }, 
        {
            "location": "/changelog/v2.2.0/#changelog-v220", 
            "text": "Full text search enabled for Task, Task Runs and Results in the\n    JSON first key level.", 
            "title": "Changelog v2.2.0"
        }, 
        {
            "location": "/changelog/v2.2.1/", 
            "text": "Changelog v2.2.1\n\n\n\n\n\n\nAdd a global results page. This can be fully customized in each\n    theme.", 
            "title": "V2.2.1"
        }, 
        {
            "location": "/changelog/v2.2.1/#changelog-v221", 
            "text": "Add a global results page. This can be fully customized in each\n    theme.", 
            "title": "Changelog v2.2.1"
        }, 
        {
            "location": "/changelog/v2.3.0/", 
            "text": "Changelog v2.3.0\n\n\nThis new version adds a few cool features to PYBOSSA. Basically, it\nallows to use PYBOSSA backend as your crowdsourcing engine for native\niOS and Android phone apps.\n\n\nThe idea is that those apps, usually have their own user base, with\ntheir own IDs.\n\n\nAs a result, you don\nt want to force your user base to register again in\nanother service just to help you with your crowdsourcing research.\nTherefore, PYBOSSA comes to the rescue allowing you to login those users\nin a PYBOSSA project using a secure token (JWT).\n\n\nThe process is really simple, you create a PYBOSSA project, you copy the\nsecret key created by PYBOSSA for your project and you use it to\nauthenticate your requests. Then when a user sends a Task Run you pass\nyour authentication token and your internal user ID. As simple as that.\nPYBOSSA will handle everything as usual.\n\n\n\n\n\n\nAdd support for external User IDs.\n\n\nAdd JWT authentication for projects.", 
            "title": "V2.3.0"
        }, 
        {
            "location": "/changelog/v2.3.0/#changelog-v230", 
            "text": "This new version adds a few cool features to PYBOSSA. Basically, it\nallows to use PYBOSSA backend as your crowdsourcing engine for native\niOS and Android phone apps.  The idea is that those apps, usually have their own user base, with\ntheir own IDs.  As a result, you don t want to force your user base to register again in\nanother service just to help you with your crowdsourcing research.\nTherefore, PYBOSSA comes to the rescue allowing you to login those users\nin a PYBOSSA project using a secure token (JWT).  The process is really simple, you create a PYBOSSA project, you copy the\nsecret key created by PYBOSSA for your project and you use it to\nauthenticate your requests. Then when a user sends a Task Run you pass\nyour authentication token and your internal user ID. As simple as that.\nPYBOSSA will handle everything as usual.    Add support for external User IDs.  Add JWT authentication for projects.", 
            "title": "Changelog v2.3.0"
        }, 
        {
            "location": "/changelog/v2.3.8/", 
            "text": "Changelog v2.3.8\n\n\nIf you are going to upgrade to this version you will have to be sure to\nrun the following steps:\n\n\n\n\n\n\nTake a backup of your database.\n\n\nGet the latest code.\n\n\nInstall all the dependencies.\n\n\nRun alembic upgrade head. This will run a migration in the DB.\n\n\nRun the command python cli.py update_counters. This command will\n    take some time. It will populate your new table counters with the\n    current status of the DB. RUN this step otherwise the system will\n    fail.\n\n\n\n\n\n\nIf you are installing this version for the very first time, just go with\nthe standard setup.", 
            "title": "V2.3.8"
        }, 
        {
            "location": "/changelog/v2.3.8/#changelog-v238", 
            "text": "If you are going to upgrade to this version you will have to be sure to\nrun the following steps:    Take a backup of your database.  Get the latest code.  Install all the dependencies.  Run alembic upgrade head. This will run a migration in the DB.  Run the command python cli.py update_counters. This command will\n    take some time. It will populate your new table counters with the\n    current status of the DB. RUN this step otherwise the system will\n    fail.    If you are installing this version for the very first time, just go with\nthe standard setup.", 
            "title": "Changelog v2.3.8"
        }, 
        {
            "location": "/user/advance/", 
            "text": "===============================================\n\n\n\n\nThis documentation is deprecated. The new [PYBOSSA.JS](https://github.com/Scifabric/pybossa.js/) library, will do\n\n:   automatically all the described elements in this page for your\n    project, simplifying your code. The tutorial uses the new PYBOSSA.JS\n    version and explain how to use it. Please, upgrade your project.\n\n\n\n\n\nPYBOSSA features a new endpoint system that allows every project to load\na specific Task for a given project.\n\n\nThe following URL is available for every project:\n\n\nhttp://pybossa.com/project/slug/task/id\n\n\n\nThe new endpoint is the same one as the \npresenter\n one, so the\ntemplate.html should take care of using this new endpoint using some\nJavaScript.\n\n\nDEPRECATED: New Work Flow\n\n\nThis new endpoint opens the possibility to use the following work flow:\n\n\n\n\nUsers will load the following page\n    \nhttp://pybossa.com/project/newtask\n\n\nThe template.html JavaScript should check if the\n    window.location.pathname has the following sub-string: task\n\n\nIf the answer is Yes, then, it should load using an AJAX call the\n    information for the given task\n\n\nElse, the pybossa.newTask() method should be used to obtain a task\n    for the user, and change the window.location.href to the new\n    endpoint:\n\n\npybossa.newTask gets the task.id that the user has to load\n\n\n\n\n\n\n\n\nTherefore, while this new work flow is more powerful, the owner of the\nproject will have to code a bit more for loading the tasks in its own\nURL\n\n\nDEPRECATED: Checking if the project has to load a Task or request a new one\n\n\nThe following code shows how any PYBOSSA project can check if it has to\nload a specific task, or request a new one for the user using\nPYBOSSA.JS:\n\n\npathArray = window.location.pathname.split('/');\nif (window.location.pathname.indexOf('/task/')!=-1) {\n    var l = pathArray.length;\n    var i = 0;\n    for (i=0;i\nl;i++) {\n        if (pathArray[i]=='task') {\n            loadTask(pathArray[i+1]);\n        }\n    }\n}\nelse {\n    pybossa.newTask(\"flickrperson\").done( function( data ) {\n\n        if ( !$.isEmptyObject(data.task) ) {\n            window.location.pathname = \"/project/flickrperson/task/\" + data.task.id;\n        }\n       else {\n            $(\".skeleton\").hide();\n            $(\"#finish\").fadeIn();\n        }\n    });\n}\n\n\n\nThe first part, gets the URL pathname and checks if the URL contains the\nspecific keyword \ntask\n. If the answer is yes, the code will get all\nthe items from the pathname, calling the function\n\nloadTask(pathArray[i+1])\n.\n\n\nThe code checks if after requesting a new Task, nothing is returned,\nthen the presenter should be shown with a message telling the user that\nhe has participated in all the available tasks.\n\n\nDEPRECATED: Loading the specific task\n\n\nOnce the project has obtained a task for the user, the function loadTask\nwill be called:\n\n\nfunction loadTask( task_id ) {\n  // Uncomment next line for debugging purposes\n  //console.log( data );\n  var t = $.ajax({\n      url: '/api/task/'+task_id,\n      dataType: 'json'\n  });\n  t.done( function (task) {\n      if ( !$.isEmptyObject(task) ) {\n          spinnerStart();\n          if (task.status=='completed') {\n              $('#answer').hide();\n              $('#disqus_thread').hide();\n              $('#taskcompleted').show();\n          }\n          $(\"#question h2\").text(task.info.question);\n          $(\"#task-id\").text(task.id);\n          $(\"#photo-link\").attr(\"href\", task.info.link);\n          $(\"#photo\").attr(\"src\", task.info.url_m);\n      }\n     else {\n          $(\".skeleton\").hide();\n          $(\"#finish\").fadeIn();\n      }\n  });\n}\n\n\n\nThe AJAX call request the task_id and when the call has been \ndone\n\nthe data will be loaded. The only difference with the previous method,\nis that this work flow needs to have the \nquestion\n in task.info JSON\nobject, otherwise the task question will be empty.\n\n\nFinally, we will have to load a new task after the user has saved the\nanswer.\n\n\nDEPRECATED: Requesting a new task after saving an answer\n\n\nWhen the user submits a task, the previous code requested a new task\ndirectly from the same page, however we have to do it in a different\nway.\n\n\nOnce the answer has been saved, the submitTask(answer) function should\nchange the pathname again for requesting a new task:\n\n\nwindow.location.pathname = \"/project/flickrperson/newtask\"\n\n\n\nThis will trigger the right methods described in the beginning of this\nsection, checking if the URL has the \ntask\n keyword in the pathname,\nand acting accordingly.\n\n\nWith this set of changes, the project will be able to load external\ntools like Disqus forums, as each task will have its own URL, so users\ncan talk about it.", 
            "title": "Advance"
        }, 
        {
            "location": "/user/advance/#deprecated-new-work-flow", 
            "text": "This new endpoint opens the possibility to use the following work flow:   Users will load the following page\n     http://pybossa.com/project/newtask  The template.html JavaScript should check if the\n    window.location.pathname has the following sub-string: task  If the answer is Yes, then, it should load using an AJAX call the\n    information for the given task  Else, the pybossa.newTask() method should be used to obtain a task\n    for the user, and change the window.location.href to the new\n    endpoint:  pybossa.newTask gets the task.id that the user has to load     Therefore, while this new work flow is more powerful, the owner of the\nproject will have to code a bit more for loading the tasks in its own\nURL", 
            "title": "DEPRECATED: New Work Flow"
        }, 
        {
            "location": "/user/advance/#deprecated-checking-if-the-project-has-to-load-a-task-or-request-a-new-one", 
            "text": "The following code shows how any PYBOSSA project can check if it has to\nload a specific task, or request a new one for the user using\nPYBOSSA.JS:  pathArray = window.location.pathname.split('/');\nif (window.location.pathname.indexOf('/task/')!=-1) {\n    var l = pathArray.length;\n    var i = 0;\n    for (i=0;i l;i++) {\n        if (pathArray[i]=='task') {\n            loadTask(pathArray[i+1]);\n        }\n    }\n}\nelse {\n    pybossa.newTask(\"flickrperson\").done( function( data ) {\n\n        if ( !$.isEmptyObject(data.task) ) {\n            window.location.pathname = \"/project/flickrperson/task/\" + data.task.id;\n        }\n       else {\n            $(\".skeleton\").hide();\n            $(\"#finish\").fadeIn();\n        }\n    });\n}  The first part, gets the URL pathname and checks if the URL contains the\nspecific keyword  task . If the answer is yes, the code will get all\nthe items from the pathname, calling the function loadTask(pathArray[i+1]) .  The code checks if after requesting a new Task, nothing is returned,\nthen the presenter should be shown with a message telling the user that\nhe has participated in all the available tasks.", 
            "title": "DEPRECATED: Checking if the project has to load a Task or request a new one"
        }, 
        {
            "location": "/user/advance/#deprecated-loading-the-specific-task", 
            "text": "Once the project has obtained a task for the user, the function loadTask\nwill be called:  function loadTask( task_id ) {\n  // Uncomment next line for debugging purposes\n  //console.log( data );\n  var t = $.ajax({\n      url: '/api/task/'+task_id,\n      dataType: 'json'\n  });\n  t.done( function (task) {\n      if ( !$.isEmptyObject(task) ) {\n          spinnerStart();\n          if (task.status=='completed') {\n              $('#answer').hide();\n              $('#disqus_thread').hide();\n              $('#taskcompleted').show();\n          }\n          $(\"#question h2\").text(task.info.question);\n          $(\"#task-id\").text(task.id);\n          $(\"#photo-link\").attr(\"href\", task.info.link);\n          $(\"#photo\").attr(\"src\", task.info.url_m);\n      }\n     else {\n          $(\".skeleton\").hide();\n          $(\"#finish\").fadeIn();\n      }\n  });\n}  The AJAX call request the task_id and when the call has been  done \nthe data will be loaded. The only difference with the previous method,\nis that this work flow needs to have the  question  in task.info JSON\nobject, otherwise the task question will be empty.  Finally, we will have to load a new task after the user has saved the\nanswer.", 
            "title": "DEPRECATED: Loading the specific task"
        }, 
        {
            "location": "/user/advance/#deprecated-requesting-a-new-task-after-saving-an-answer", 
            "text": "When the user submits a task, the previous code requested a new task\ndirectly from the same page, however we have to do it in a different\nway.  Once the answer has been saved, the submitTask(answer) function should\nchange the pathname again for requesting a new task:  window.location.pathname = \"/project/flickrperson/newtask\"  This will trigger the right methods described in the beginning of this\nsection, checking if the URL has the  task  keyword in the pathname,\nand acting accordingly.  With this set of changes, the project will be able to load external\ntools like Disqus forums, as each task will have its own URL, so users\ncan talk about it.", 
            "title": "DEPRECATED: Requesting a new task after saving an answer"
        }, 
        {
            "location": "/user/overview/", 
            "text": "==============================\n\n\nThis is a short guide about how you can create a project in a PYBOSSA\nserver. Readers may wish to start with the\nStep by step tutorial on creating an\nProject \ntutorial\n which walks through creating a simple photo\nclassification project if they want to understand all the details about\nhow you create a project.\n\n\nFirst of all we have to create a project for the project. A project\nrepresents a set of tasks that have to be resolved by people, so a\nproject will have the following items:\n\n\n\n\nName\n,\n\n\nShort name\n or \nslug\n, and\n\n\nDescription\n\n\n\n\nThe \nslug\n or \nshort name\n is a shortcut for accessing the project\nvia the web (short urls like this \nhttp://domain.com/project/slug\n).\n\n\nThe \ndescription\n is a short sentence that will be used to describe\nyour project (think about it like a Tweet long description).\n\n\nA project can be created using two different methods:\n\n\n\n\nweb-interface, or\n\n\napi-interface.\n\n\n\n\nUsing the Web Interface\n\n\nCreating a project using the web interface involves four steps:\n\n\n\n\nCreating the project,\n\n\nImport the tasks using the \nsimple built-in\n task-creator (uploading\n    a CSV file or Google Spreadsheet link exported as CSV),\n\n\nWrite the task-presenter for the users, and\n\n\nPublish the project.\n\n\n\n\nCreating the project\n\n\nIn order to create a project in PYBOSSA via the web interface you have\nto:\n\n\n\n\nCreate a local account in your PYBOSSA server:\n\n\n\n\n| \n\n\n{width=\n100%\n}\n\n\n| \n\n\nAnother alternative is to use your Twitter, Facebook and Google sign in\nmethods, (if the server has enabled them, see the documentation: ssnn).\n\n\n| \n\n\n\n\n| \n\n\n\n\nOnce you have an account, click in \ncreate\n link of the top bar.\n\n\nAfter clicking in the previous button, you will have to fill in a\n    form with the very basic to create your project:\n\n\nName\n: the full name of your project, i.e. \nFlickr Person\n    Finder\n.\n\n\nShort Name\n: the \nslug\n or short name used in the URL for\n    accessing your project, i.e. \nflickrperson\n.\n\n\nLong Description\n: A \nlong\n description where you can use\n    Markdown to format the description of your project. This field\n    is usually used to provide information about the project, the\n    developer, the researcher group or institutions involved in the\n    project, etc.\n\n\n\n\n\n\n\n\n| \n\n\n\n\n| \n\n\n\n\nPYBOSSA usually provides two Categories by default: *thinking* and\n\n:   *sensing*. The *thinking* category represents the standard PYBOSSA\n    project where users contribute helping with their skills. *Sensing*\n    category refers to projects that are using a volunter sensing tools\n    like EpiCollect or Raspberry Pi with PYBOSSA for gathering data.\n\n\n\n\n\n| \n\n\n\n\nOnce you have filled all the fields, click in the \nCreate the\n    project\n button, and you will have created your first project.\n\n\n\n\n| \n\n\nAfter creating the project, you should be redirected to the \nSettings\n\nproject page, where you will be able to customize your project by adding\nsome extra information or changing some settings. There, you will find a\nform with the same fields as in the previous step (just in case you\nve\nchanged your mind and wanted to change any of them) plus the following:\n\n\n\n\nDescription\n: A \nshort\n description of the project, e.g. \nA\n    project to classify cancer cells\n. By default, it will have been\n    autogenerated for you from the \nLong description\n you filled in\n    the previous step (but without the Markdown!).\n\n\nAllow Anonymous Contributors\n: By default anonymous and\n    authenticated users can participate in all the projects, however you\n    can change it to only allow authenticated volunteers to participate.\n\n\nPassword\n: If you want to control who can contribute or access to\n    your project, you can set a password here to share with those you\n    allow to do it. If you leave it blank, then no password will protect\n    your project.\n\n\nCategory\n: Select a category that fits your project. categories\n    are added and managed by the server administrators.\n\n\n\n\n* In addition, you will be able to select and upload an \nimage\n from your\n\n\n:   local computer to set it as the project image thoroughout the\n    server.\n\n\n| \n\n\n\n\nImporting the tasks via the built-in CSV Task Importer\n\n\nTasks can be imported from a CSV file or a Google Spreadsheet via the\nsimple built-in task-creator. You have to do the following:\n\n\n\n\nNavigate to your project\ns page (you can directly access it using\n    the \nslug\n project name: \nhttp://server/project/slug\n).\n\n\nClick in the \nTasks\n section -on the left side local navigation\n    menu:\n\n\n\n\n| .. image:: \nhttp://i.imgur.com/nauht7l.png\n :width: 100% |\n\n\n\n\nAnd click again on the \nImport Tasks\n card. After clicking on it you will\n\n\n\n\n:   see several options. The first ones are for using the different\n    kinds of importers supported by PYBOSSA: Amazon S3, Twitter,\n    Dropbox, Flickr, Youtube, Google Spreadsheet, CSV url, and\n    EpiCollect Plus.\n\n\n| .. image:: \nhttp://i.imgur.com/eWBxSyS.png\n :width: 100% | For\nexample, the Flickr importer will allow to import a Flickr album by\ntyping its ID or if you have an account, by logging into Flickr and\nshowing your own public (and creative commons licensed) albums:\n\n\n| .. image:: \nhttp://i.imgur.com/lF9LJVO.jpg\n :width: 100% |\n\n\nSelect one of the albums, click import and all the pictures will be\nimported as tasks for your PYBOSSA project. As simple as that.\n\n\nThe other importers are very similar. In most cases you\nll provide a URL\nto the resource, like for the CSV and Google Spreadhseet importer, while\nthe Dropbox, Amazon S3, Twitter, Youtube, and EpiCollect Plus importers\nwill have a nice interface to importa data automagically for you.\n\n\n\n\nIf you're trying to import from a Google Spreadsheet, ensure the file is\naccessible to everyone via the Share option, choosing: \"Public on the\nweb - Anyone on the Internet can find and view\"\n\n\n\n\n\n\n\nYour spreadsheet/CSV file must contain a header row. All the fields in\nthe CSV will be serialized to JSON and stored in the **info** field. If\nyour field name is one of **state**, **quorum**, **calibration**,\n**priority\\_0**, or **n\\_answers**, it will be saved in the respective\ncolumns. Your spreadsheet must be visible to public or everyone with\nURL.\n\n\n\n\n\nIn the Task Importer section, you\nll find also other pre-loaded with\nGoogle Spreadsheets URLs. Those templates are examples that you can use\nto learn how to create your own spreadsheets and import data for image,\nsound, video, pdf mining and mapping projects.\n\n\n| .. image:: \nhttp://i.imgur.com/eGwKDpB.png\n |\n\n\nBy using these templates, you\nll be able to learn the structure of the\ntasks, and directly re-use the task-presenter templates that know the\nstructure (name of the columns) for presenting the task.\n\n\nAdditionally, you can re-use the templates by downloading the CSV files\nfrom Google Docs, or even copying them to your own Google Drive account\n(click in \nFile\n -\n \nMake a copy\n in the Google Doc Spreadsheet). The\navailable templates are the following:\n\n\n\n\nImage Pattern\n    Recognition\n\n\nSound Pattern\n    Recognition\n\n\nVideo Pattern\n    Recognition\n\n\nGeo-coding\n\n    and\n\n\nPDF\n    transcription\n.\n\n\n\n\n\n\nIf you import again the same URL, only new records will be added to the\n\n:   project.\n\n\n\n\n\nImporting the tasks from an EpiCollect Plus Public Project\n\n\nEpiCollect\n provides a web project for the\ngeneration of forms and freely hosted project websites (using Google\ns\nAppEngine) for many kinds of mobile data collection projects.\n\n\nData can be collected using multiple mobile phones running either the\nAndroid Operating system or the iPhone (using the EpiCollect mobile app)\nand all data can be synchronised from the phones and viewed centrally\n(using Google Maps) via the Project website or directly on the phones.\n\n\nEpiCollect\n can help you to recollect data\nsamples according to a form that could include multimedia like photos.\nMoreover, \nEpiCollect\n can geolocate the\ndata sample as it supports the built-in GPS that all modern smartphones\nhave.\n\n\nFor example, you can create an \nEpiCollect\n\nproject where the form will ask the user to take a picture of a lake,\ngeo-locate it automatically via the smartphone built-in GPS and upload\nthe picture to the \nEpiCollect\n server. If\nthe user does not have Internet access at that moment, the user will be\nable to synchronize the data afterwards i.e. when the user has access to\nan Internet WIFI hotspot.\n\n\nPYBOSSA can automatically import data from a public\n\nEpiCollect\n Plus project that you own or\nthat it is publicly available in the\n\nEpiCollect\n web site and help you to\nvalidate, analyze, etc. the data that have been obtained via EpiCollect.\n\n\nIf you want to import the data points submitted to a \npublic\n\n\nEpiCollect\n project, you will have to\nfollow the next steps:\n\n\n\n\nNavigate to your project\ns page (you can directly access it using\n    the \nslug\n project name: \nhttp://server/project/slug\n).\n\n\nClick in the \nTasks\n section -on the left side local navigation\n    menu:\n\n\nAnd click on the \nImport Tasks\n button. After clicking on it you\n    will see several different options:\n\n\n\n\n4. Click in the \nUse an EpiCollect Project\n one. |\n\n\n\n\n| 5. Then, type the \nname of the EpiCollect project\n and the name of\nthe \nform\n that you want to import, and click in the import button.\n\n\nAll the data points should be imported now in your project.\n\n\n\n\nEpiCollect projects will be gathering data mostly all the time, for this\n\n:   reason, if you import again the same EpiCollect project, only **new\n    data points** will be imported. This feature will allow you to\n    easily add new data points to the PYBOSSA project without having to\n    do anything special.\n\n\n\n\n\nImporting the tasks from a Flickr photo set\n\n\nPYBOSSA also allows to import tasks for projects based on images (like\nimage pattern recognition ones) directly from a\n\nFlickr\n\n\nset\n (also called\nalbum).\n\n\nWhen importing tasks from a Flickr set, a new task will be created for\neach of the photos in the specified set. The tasks will include the\nfollowing data about each picture (which will be later available to be\nused in the task presenter):\n\n\n\n\ntitle: the title of the photograph, as it appears on Flickr.\n\n\nurl: the url to the raw .jpg image, in its original size.\n\n\nurl_b: the url to the image, \nbig sized.\n\n\nurl_m: the url to the image, \nmedium\n sized.\n\n\nlink: a link to the photo page in flickr (not to the raw image).\n\n\n\n\nYou can import tasks from a Flickr photo set (a.k.a. album) in either of\nthe following ways:\n\n\nThe easiest one is to give the PYBOSSA server permission to access your\nFlickr list of albums. To do so, you\nll have to log in to your Flickr\naccount by clicking the \nLog in Flickr\n button. Then you\nll be\nredirected to Flickr, where you will be asked if you want to allow\nPYBOSSA to access your Flickr information. If you say yes, then you\nll\nbe again redirected to PYBOSSA and you\nll see all of your albums. Choose\none of them and then click the \nImport\n button to get all the photos\ncreated as tasks for your project.\n\n\n\n\nNext time you try to import photos using the Flickr importer, you'll see\n\n:   the albums for your account again. If you don't want PYBOSSA to\n    access them anymore, or just want to use another Flickr account,\n    then click \"Revoke access\".\n\n\n\n\n\nAnother option to import from a Flickr album is by specifying the ID of\nthe set (album) directly. This option is a bit more advanced (don\nt be\nafraid, it is still very easy if you follow the next steps) and it\nallows you to import from a photo set that you don\nt own (although, it\nwill have to be public. Also check the rights of the photos on it!).\nAnother advantage is that you don\nt need to log in to Flickr, sou you\ndon\nt even need to have a Flickr account.\n\n\nThese are the steps:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section:\n\n\nThen click on the \nImport Tasks\n button, and select the \nFlickr\n    importer\n:\n\n\nLog in with your Flickr ID and select one of the available albums of\n    your account, or type the ID of the Flickr set you want to import\n    the photos from, then click on the import button:\n\n\n\n\n| .. image:: \nhttp://i.imgur.com/UZRBj8y.png\n :width: 100% |\n\n\nIf you cannot find the ID or don\nt know what it is, just browse to your\nFlickr photo set and check the URL. Can you see that last long number\nrigth at the end of it? That\ns what you\nre looking for!\n\n\n| .. image:: \nhttp://i.imgur.com/h6qNDX2.png\n :width: 100%\n\n\n| \n\n\nAnd all the photos will be imported to your project. Just like with the\nother importers, each task will be created only once, even if you import\ntwice from the same Flickr set (unless you add new photos to it, of\ncourse!).\n\n\n\n\nYou will need to make sure that every photo belonging to the set has the\n\n:   visibility set to public, so the PYBOSSA server can then access and\n    present them to the volunteers of your project.\n\n\n\n\n\nImporting the tasks from a Dropbox account\n\n\nYou can import tasks from arbitrary data hosted on a Dropbox account\nwith the Dropbox importer. When importer tasks like this, the following\ninformation will be added to the info field of each tasks, available\nlater to be used in the task presenter of the project:\n\n\n\n\nfilename: just it, the name of the file you\nre importing as a task.\n\n\nlink: the link to the Dropbox page showing the file.\n\n\nlink_raw: the link to the raw file served by Dropbox. This is the\n    one you\nll have to use if you want to direct link to the file from\n    the presenter (e.g. for using an image in a \nimg\n tag, you\nd\n    do: \nimg src=task.info.link_raw\n).\n\n\n\n\nIn addition to this generic information, the Dropbox importer will also\nrecognize some kind of files by their extension and will attach some\nextra information to them.\n\n\nFor pdf files (.pdf extension), the following field will be obtained\ntoo:\n\n\n\n\npdf_url: direct link to the raw pdf file, with CORS support.\n\n\n\n\nFor image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:\n\n\n\n\nurl_m: the same as link_raw\n\n\nurl_b: the same as link_raw\n\n\ntitle: the same as filename\n\n\n\n\nFor audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):\n\n\n\n\naudio_url: raw link to the audio file, which can be used inside an\n    HTML 5 \naudio\n tag and supports CORS.\n\n\n\n\nFor video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):\n\n\n\n\naudio_url: raw link to the video file, which can be used inside an\n    HTML 5 \nvideo\n tag and supports CORS.\n\n\n\n\nThe tasks created with the Dropbox importer are ready to be used with\nthe template project presenters available in PYBOSSA, as they include\nthe described fields.\n\n\nThus, importing your images from Dropbox will allow you to immediately\nuse the image pattern recognition template with them; importing videos,\naudio files or pdfs with the Dropbox importer will also grant you to use\nthe presenter templates for video pattern recognition, sound pattern\nrecognition or documents transcription, respectively, with no additional\nmodifications and have them working right away (as long as the files\nhave any of the mentioned file extensions, of course).\n\n\nThese are the steps:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section:\n\n\nThen click on the \nImport Tasks\n button, and select the \nDropbox\n    importer\n:\n\n\n\n\n3. Click on the \nChoose from Dropbox\n icon. You will be asked your\nDropbox account credentials. then select as many files as you want:\n\n\n| .. image:: \nhttp://i.imgur.com/dsgM0Tg.png\n |\n\n\n4. You can repeat step 3 as many times as you want, and more files will\nbe added to your import. Then, click on \nImport\n.\n\n\nImporting the tasks from a Twitter account or search result\n\n\nAnother option for importing tasks is using the built-in Twitter\nimporter. It allows to import tweets as tasks from either a specified\nTwitter user account, or from the results returned from a search to the\nTwitter search API.\n\n\nTasks imported with it will have the tweet data attached to their info\nfield, and can later be used from within the task presenter. This data\nis a direct transcription of the data returned by the Twitter API, in\nparticular a \nTweet\n\nobject.\n\n\nPlease notice that the values returned by the Twitter API may vary.\nHowever, the following fields are guaranteed to be always included in\nthe info field of the tasks:\n\n\n\n\ncreated_at: the date and time the tweet was made.\n\n\nfavorite_count: number of times the tweet has been marked as\n    \nfavorite\n.\n\n\nretweet_count: number of times the tweet has been retweeted.\n\n\ncoordinates: geographic coordinates of the place the tweet was made\n    from. Note that this is not always available for every tweet.\n\n\ntweet_id: the internal ID handled by Twitter to identify this\n    tweet.\n\n\nuser: an \nobject\n with\n    information about the tweet author, as returned by the Twitter API.\n\n\ntext: the actual content of the tweet.\n\n\n\n\nIn addition, an extra field \nuser_screen_name\n has been added to the\ninfo field:\n\n\n\n\nuser_screen_name: the screen name (or \nhandle\n) of the author of\n    the tweet.\n\n\n\n\nFor more information, please refer to the \nTwitter\n documentation. ..\n_Twitter: \nhttps://dev.twitter.com/\n\n\n\n\n**When importing tweets from a search, retweets will be ignored!**\n\n\n\n\n\nSo, to import tasks with the Twitter importer, do as follows:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section:\n\n\nThen click on the \nImport Tasks\n button, and select the \nTwitter\n    importer\n:\n\n\nYou can provide your own Twitter credentials and make API requests\n    in behalf of them, or use the credentials provided by us. (The later\n    only allows to import the number of tweets returned by a single\n    Twitter API call, which is 100 for searches and 200 for user\n    timelines.)\n\n\n\n\n4. Fill in the two fields you will find in the form. The first one is\nfor the source of your tweets. If you want them to be imported from a\nuser account, then write it with the \n@\n symbol, like \n@PYBOSSA\n. If you\njust want to import tweets containing a word on them (or a #hashtag),\nthen type it there. The second field is for you to specify how many\ntweets you want to import. You can import as many as you want!\n\n\nFinally, click on the \nImport\n button, and you are done:\n\n\n| .. image:: \nhttp://i.imgur.com/l5PG2WX.png\n\n\n| Importing the tasks from an Amazon S3 bucket\n\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\n\n\nTasks can be imported from data hosted on the Amazon S3 service.\nSimilarly to the Dropbox importer, these tasks can use different kind of\ndata, like images, videos, audios, PDF files, etc. hosted on any S3\nbucket.\n\n\nThe S3 importer will work pretty much the same as the Dropbox one. When\nusing it, the created tasks will contain the following data in the info\nfield:\n\n\n\n\nfilename: just it, the name of the file you\nre importing as a task.\n\n\nlink: the link to the raw file served from Amazon S3.\n\n\nurl: same as the above.\n\n\n\n\nIn addition to this generic information, the S3 importer will also\nrecognize some kind of files by their extension and will attach some\nextra information to them.\n\n\nFor pdf files (.pdf extension), the following field will be obtained\ntoo:\n\n\n\n\npdf_url: direct link to the raw pdf file.\n\n\n\n\nFor image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:\n\n\n\n\nurl_m: the same as link.\n\n\nurl_b: the same as link.\n\n\ntitle: the same as filename.\n\n\n\n\nFor audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):\n\n\n\n\naudio_url: raw link to the audio file, which can be used inside an\n    HTML 5 \naudio\n tag.\n\n\n\n\nFor video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):\n\n\n\n\naudio_url: raw link to the video file, which can be used inside an\n    HTML 5 \nvideo\n tag.\n\n\n\n\nThe tasks created with the S3 importer are ready to be used with the\ntemplate project presenters available in PYBOSSA, as they include the\ndescribed fields.\n\n\nThus, importing your images from S3 will allow you to immediately use\nthe image pattern recognition template with them; importing videos,\naudio files or pdfs with the S3 importer will also grant you to use the\npresenter templates for video pattern recognition, sound pattern\nrecognition or documents transcription, respectively, with no additional\nmodifications and have them working right away (as long as the files\nhave any of the mentioned file extensions, of course).\n\n\nImporting from an S3 bucket requires that the bucket visibility is set\nto \npublic\n so its content can be seen and listed by PYBOSSA. To make a\nbucket public, go to your AWS management console and select the S3\nservice. Then select the bucket you want to make public and click on\n\nProperties\n. Click on \nAdd more Permissions\n and add a new one with\n\nGrantee: Everyone\n and the \nList\n checkbox selected, like in the\nfollowing image:\n\n\n| .. image:: \nhttp://i.imgur.com/FuN9XAS.png\n |\n\n\nYou may also need to enable CORS in the bucket. In the same menu as\nabove, click on \nEdit CORS Configuration\n and configure it. You can\nlearn more\n\nhere\n.\n\n\nFinally, you need to make sure that every file inside the bucket that\nyou want to use in a task has a \npublic\n link too. Go to the bucket\ncontent and select the files. Then click on \nActions\n and select \nMake\nPublic\n. Your files will now be visible for everyone, including a\nPYBOSSA server.\n\n\n| .. image:: \nhttp://i.imgur.com/AHBVQCk.png\n |\n\n\nOnce your S3 bucket is ready, you can follow these steps to import tasks\nfrom it:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section:\n\n\nThen click on the \nImport Tasks\n button, and select the \nS3\n    importer\n:\n\n\n\n\n3. Type the name of the bucket from which you will be importing your\ntasks and click on \nSearch in bucket\n. If you followed the steps above\nand your bucket is public, you will see a list of the items it contains.\nSelect as many as you want:\n\n\n| .. image:: \nhttp://i.imgur.com/6RAMqd9.png\n |\n\n\n\n\nWhen you\nre ready, click on \nImport\n.\n\n\n\n\nImporting the tasks from Youtube\n\n\nTasks can be imported from Youtube. Currently the importer supports\nimporting from Youtube with:\n\n\n\n\nPlaylists\n\n\n\n\nWhen importing the video the importer parses all videos information and\ncreates tasks with info fields:\n\n\n\n\nvideo_url: the URL of the youtube video which can be embedded in\n    the task form.\n\n\noembed: embeddable code for the (old) PYBOSSA video templates.\n\n\n\n\nThe tasks created with the Youtube importer are ready to be used with\nthe youtube and video templates.\n\n\nFlushing all the tasks\n\n\nThe project settings gives you an option to automatically \ndelete all\nthe tasks and associated task runs\n from your project.\n\n\n\n\n**This action cannot be un-done, so please, be sure that you want to\nactually delete all the tasks.**\n\n\n\n\n\n\n\n**This action will only allow you to delete tasks that are not\nassociated with a result. When a result is created, that task and its\ntask runs cannot be deleted so the volunteers can always have access to\ntheir contributions.**\n\n\n\n\n\nIf you are sure that you want to flush all the tasks and task runs for\nyour project, go to the project page\n(\nhttp://server/project/slug/tasks/\n) and click in the \nSettings\n\noption of the left local navigation menu:\n\n\n| .. image:: \nhttp://i.imgur.com/nauht7l.png\n :width: 100%\n\n\n| \n\n\nThen, you will see that there is a sub section called: \nTask Settings\n\nand a button with the label: \nDelete the tasks\n. Click in that button\nand a new page will be shown:\n\n\n| .. image:: \nhttp://i.imgur.com/DKPV6dc.png\n :width:100%\n\n\n| \n\n\nAs you can see, a \nred warning alert\n is shown, warning you that if\nyou click in the \nyes\n button, you will be deleting not only the\nproject tasks, but also the answers (task runs) that you have\nrecollected for your project. Be sure before proceeding that you want to\ndelete all the tasks. After clicking in the \nyes\n button, you will see\nthat all the tasks have been flushed.\n\n\nCreating the Task Presenter\n\n\nOnce you have the project and the tasks in the server, you can start\nworking with the task-presenter, which will be the web project that will\nget the tasks of your project, present them to the volunteer and save\nthe answers provided by the users.\n\n\nIf you have followed all the steps described in this section, you will\nbe already in the page of your project, however, if you are not, you\nonly need to access your project URL to work with your project. If your\nproject \nslug\n or \nshort name\n is \nflickrperson\n you will be able to\naccess the project managing options in this URL:\n\n\nhttp://PYBOSSA-SERVER/project/flickrperson\n\n\n\n\n\nYou need to be logged in, otherwise you will not be able to modify the\nproject.\n\n\n\n\n\nAnother way for accessing your project (or projects) is clicking in your\n\nuser name\n and select the \nMy Projects\n item from the drop down menu.\nFrom there you will be able to manage your projects:\n\n\n| .. image:: \nhttp://i.imgur.com/3S497Ct.png\n :alt: PYBOSSA User Account\n|\n\n\n{width=\n100%\n}\n\n\n| \n\n\nOnce you have chosen your project, you can add task-presenter by\nclicking in the \nTasks\n local navigation link, and then click in the\nbutton named \nEditor\n under the \nTask Presenter\n box.\n\n\n| .. image:: \nhttp://i.imgur.com/nauht7l.png\n :width: 100% |\n\n\nAfter clicking in this button, a new web page will be shown where you\ncan choose a template to start coding your project, so you don\nt have to\nactually start from scratch.\n\n\n| .. image:: \nhttp://i.imgur.com/psC5m6Q.png\n\n\n| \n\n\nAfter choosing one of the templates, you will be able to adapt it to fit\nyour project needs in a web text editor.\n\n\n| .. image:: \nhttp://i.imgur.com/g9gAvWw.png\n :width: 100% |\n\n\nClick in the \nPreview button\n to get an idea about how it will look\nlike your task-presenter.\n\n\n| .. image:: \nhttp://i.imgur.com/DsDDBia.png\n :width: 100% |\n\n\nWe recommend to read the Step by step tutorial on\ncreating a Project \ntutorial\n, as you will understand how to\ncreate the task presenter, which is basically adding some HTML skeleton\nto load the task data, input fields to get the answer of the users, and\nsome JavaScript to make it to work.\n\n\nPublishing the project\n\n\nAfter completing the previous three steps, your project will be almost\nready. The final step is to \npublish\n it, because now it will still be a\ndraft, and it will be hidden to everyone but you (and admins).\n\n\nWhen your project is a draft, you can contribute to it and the answers\n(task runs) and results will be stored in the database so you can have\naccess to them (and test the webhooks solution if you want to do\nreal-time analysis). However, in the moment of publishing the project\nall the task runs and results (as well as the webhooks log entries) will\nbe flushed, so don\nt be afraid and try it as much as you can until you\nare sure that everything works as expected. Once you think the project\nis ready for the world to see it, just click in the Publish button:\n\n\n| .. image:: \nhttp://i.imgur.com/A7m4aa6.png\n |\n\n\n\n\nPublishing a project *cannot* be undone, so please double check everything\n\n:   before taking the step.\n\n\n\n\n\n\n\nYou can allow other users to give you feedback and let them try and see your\n\n:   project before it has been published. In order to do so, just\n    protect it with a password, and people will be able to access it (as\n    long as they have the password, of course).\n\n\n\n\n\nAfter publishing it, you will be able to access your project using the\nslug, or under your account in the \nPublished\n projects section:\n\n\nAlso, results will begin to be created every time a task is completed.\nEnjoy!\n\n\nUsing the API\n\n\nCreating a project using the API involves also four steps:\n\n\n\n\n\n\nCreate the project,\n\n\nCreate the task-creator, and\n\n\nCreate the task-presenter for the users.\n\n\nPublish it. This needs to be done via the web interface. For more\n    details please refer to publishing.\n\n\n\n\n\n\nCreating the project\n\n\nYou can create a project via the API URL \n/api/project\n with a POST\nrequest (See api).\n\n\nYou have to provide the following information about the project and\nconvert it to a JSON object (the actual values are taken from the\n\nFlickr Person demo\nproject\n):\n\n\nname = u'Flickr Person Finder'\nshort_name = u'FlickrPerson'\ndescription = u'Do you see a human in this photo?'\ninfo = { 'task_presenter': u'\ndiv\n Skeleton for the tasks\n/div\n' }\ndata = dict(name = name, short_name = short_name, description = description, info = info, hidden = 0)\ndata = json.dumps(data)\n\n\n\nFlickr Person Finder, which is a \ndemo template\n that \nyou can\nre-use\n to create your own project, simplifies this step by using a\nsimple file named \nproject.json\n:\n\n\n``` {.sourceCode .javascript}\n{\n    \nname\n: \nFlickr Person Finder\n,\n    \nshort_name\n: \nflickrperson\n,\n    \ndescription\n: \nImage pattern recognition\n,\n}\n\n\n\nThe file provides a basic configuration for your project.\n\n### Adding tasks\n\nAs in all the previous steps, we are going to create a JSON object and\nPOST it using the following API URL **/api/task** in order to add tasks\nto a project that you own.\n\nFor PYBOSSA all the tasks are JSON objects with a field named **info**\nwhere the owners of the project can add any JSON object that will\nrepresent a task for their project. For example, using again the [Flickr\nPerson demo project](http://github.com/Scifabric/app-flickrperson)\nexample, we need to create a JSON object that should have the link to\nthe photo that we want to identify:\n\n``` {.sourceCode .python}\ninfo = dict (link=photo['link'], \n             url=photo['url_m'],\n             question='Do you see a human face in this photo?')\ndata = dict (project_id=project_id,\n             state=0,\n             info=info,\n             calibration=0,\n             priority_0=0)\ndata = json.dumps(data)\n\n\n\n\n\n\n'url\\_m' is a pattern to describe the URL to the m medium size of the photo\n\n:   used by Flickr. It can be whatever you want, but as we are using\n    Flickr we use the same patterns for storing the data.\n\n\n\n\n\nThe most important field for the task is the \ninfo\n one. This field\nwill be used to store a JSON object with the required data for the task.\nAs \nFlickr Person\n is\ntrying to figure out if there is a human or not in a photo, the provided\ninformation is:\n\n\n\n\n\n\nthe Flickr web page posting the photo, and\n\n\nthe direct URL to the image, the \nimg src\n value.\n\n\n\n\n\n\nThe \ninfo\n field is a free-form field that can be populated with any\nstructure. If your project needs more fields, you can add them and use\nthe format that best fits your needs.\n\n\nThese steps are usually coded in the task-creator. The Flickr Person\nFinder projects provides a template for the task-creator that can be\nre-used without any problems.\n\n\n\n\n**The API request has to be authenticated and authorized**. You can get\nan API-KEY creating an account in the server, and checking the API-KEY\ncreated for your user, check the profile account (click in your user\nname) and copy the field **API-KEY**.\n\nThis API-KEY should be passed as a POST argument like this with the\nprevious data:\n\n\\[POST\\] \n\n\n\n\n\n\nOne of the benefits of using the API is that you can create tasks\npolling other web services like Flickr, where you can basically use an\nAPI. Once we have created the tasks, we will need to create the\ntask-presenter for the project.\n\n\nCreating the Task Presenter\n\n\nThe task-presenter is usually a template of HTML and JavaScript that\nwill present the tasks to the users, and save the answers in the\ndatabase. The \nFlickr Person demo\nproject\n provides a\nsimple template which has a \ndiv\n to load the input files, in this\ncase the photo, and another \ndiv\n to load the action buttons that\nthe users will be able to to press to answer the question and save it in\nthe database. Please, check the tutorial for more details about the\ntask-presenter.\n\n\nAs we will be using the API for creating the task presenter, we will\nbasically have to create an HTML file in our computer, read it from a\nscript, and post it into PYBOSSA using the API.\n\n\nOnce the presenter has been posted to the project, you can edit it\nlocally with your own editor, or using the PYBOSSA interface (see\nprevious section).\n\n\n\n\n**The API request has to be authenticated and authorized**. You can get\nan API-KEY creating an account in the server, and checking the API-KEY\ncreated for your user, check the profile account (click in your user\nname) and copy the field **API-KEY**.\n\nThis API-KEY should be passed as a POST argument like this with the\nprevious data:\n\n\\[POST\\] \n\n\n\n\n\n\nWe recommend to read the Step by step tutorial on\ncreating a Project \ntutorial\n, as you will understand how to\ncreate the task presenter, which is basically adding some HTML skeleton\nto load the task data, input fields to get the answer of the users, and\nsome JavaScript to make it work.\n\n\nUsing PYBOSSA API from the command line\n\n\nWhile you can use your own programming language to access the API we\nrecommend you to use the \nPYBOSSA pbs command line\ntool\n as it simpflies the usage of\nPYBOSSA for any given project.\n\n\nCreating a project is as simple as creating a project.json file and then\nrun the following command:\n\n\n{.sourceCode .bash}\npbs --server server --api-key yourkey create_project\n\n\nPlease, read the section pbs for more details.", 
            "title": "Overview"
        }, 
        {
            "location": "/user/overview/#using-the-web-interface", 
            "text": "Creating a project using the web interface involves four steps:   Creating the project,  Import the tasks using the  simple built-in  task-creator (uploading\n    a CSV file or Google Spreadsheet link exported as CSV),  Write the task-presenter for the users, and  Publish the project.", 
            "title": "Using the Web Interface"
        }, 
        {
            "location": "/user/overview/#creating-the-project", 
            "text": "In order to create a project in PYBOSSA via the web interface you have\nto:   Create a local account in your PYBOSSA server:   |   {width= 100% }  |   Another alternative is to use your Twitter, Facebook and Google sign in\nmethods, (if the server has enabled them, see the documentation: ssnn).  |    |    Once you have an account, click in  create  link of the top bar.  After clicking in the previous button, you will have to fill in a\n    form with the very basic to create your project:  Name : the full name of your project, i.e.  Flickr Person\n    Finder .  Short Name : the  slug  or short name used in the URL for\n    accessing your project, i.e.  flickrperson .  Long Description : A  long  description where you can use\n    Markdown to format the description of your project. This field\n    is usually used to provide information about the project, the\n    developer, the researcher group or institutions involved in the\n    project, etc.     |    |   \n\nPYBOSSA usually provides two Categories by default: *thinking* and\n\n:   *sensing*. The *thinking* category represents the standard PYBOSSA\n    project where users contribute helping with their skills. *Sensing*\n    category refers to projects that are using a volunter sensing tools\n    like EpiCollect or Raspberry Pi with PYBOSSA for gathering data.  |    Once you have filled all the fields, click in the  Create the\n    project  button, and you will have created your first project.   |   After creating the project, you should be redirected to the  Settings \nproject page, where you will be able to customize your project by adding\nsome extra information or changing some settings. There, you will find a\nform with the same fields as in the previous step (just in case you ve\nchanged your mind and wanted to change any of them) plus the following:   Description : A  short  description of the project, e.g.  A\n    project to classify cancer cells . By default, it will have been\n    autogenerated for you from the  Long description  you filled in\n    the previous step (but without the Markdown!).  Allow Anonymous Contributors : By default anonymous and\n    authenticated users can participate in all the projects, however you\n    can change it to only allow authenticated volunteers to participate.  Password : If you want to control who can contribute or access to\n    your project, you can set a password here to share with those you\n    allow to do it. If you leave it blank, then no password will protect\n    your project.  Category : Select a category that fits your project. categories\n    are added and managed by the server administrators.   * In addition, you will be able to select and upload an  image  from your  :   local computer to set it as the project image thoroughout the\n    server.  |", 
            "title": "Creating the project"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-via-the-built-in-csv-task-importer", 
            "text": "Tasks can be imported from a CSV file or a Google Spreadsheet via the\nsimple built-in task-creator. You have to do the following:   Navigate to your project s page (you can directly access it using\n    the  slug  project name:  http://server/project/slug ).  Click in the  Tasks  section -on the left side local navigation\n    menu:   | .. image::  http://i.imgur.com/nauht7l.png  :width: 100% |   And click again on the  Import Tasks  card. After clicking on it you will   :   see several options. The first ones are for using the different\n    kinds of importers supported by PYBOSSA: Amazon S3, Twitter,\n    Dropbox, Flickr, Youtube, Google Spreadsheet, CSV url, and\n    EpiCollect Plus.  | .. image::  http://i.imgur.com/eWBxSyS.png  :width: 100% | For\nexample, the Flickr importer will allow to import a Flickr album by\ntyping its ID or if you have an account, by logging into Flickr and\nshowing your own public (and creative commons licensed) albums:  | .. image::  http://i.imgur.com/lF9LJVO.jpg  :width: 100% |  Select one of the albums, click import and all the pictures will be\nimported as tasks for your PYBOSSA project. As simple as that.  The other importers are very similar. In most cases you ll provide a URL\nto the resource, like for the CSV and Google Spreadhseet importer, while\nthe Dropbox, Amazon S3, Twitter, Youtube, and EpiCollect Plus importers\nwill have a nice interface to importa data automagically for you.  \n\nIf you're trying to import from a Google Spreadsheet, ensure the file is\naccessible to everyone via the Share option, choosing: \"Public on the\nweb - Anyone on the Internet can find and view\"  \n\nYour spreadsheet/CSV file must contain a header row. All the fields in\nthe CSV will be serialized to JSON and stored in the **info** field. If\nyour field name is one of **state**, **quorum**, **calibration**,\n**priority\\_0**, or **n\\_answers**, it will be saved in the respective\ncolumns. Your spreadsheet must be visible to public or everyone with\nURL.  In the Task Importer section, you ll find also other pre-loaded with\nGoogle Spreadsheets URLs. Those templates are examples that you can use\nto learn how to create your own spreadsheets and import data for image,\nsound, video, pdf mining and mapping projects.  | .. image::  http://i.imgur.com/eGwKDpB.png  |  By using these templates, you ll be able to learn the structure of the\ntasks, and directly re-use the task-presenter templates that know the\nstructure (name of the columns) for presenting the task.  Additionally, you can re-use the templates by downloading the CSV files\nfrom Google Docs, or even copying them to your own Google Drive account\n(click in  File  -   Make a copy  in the Google Doc Spreadsheet). The\navailable templates are the following:   Image Pattern\n    Recognition  Sound Pattern\n    Recognition  Video Pattern\n    Recognition  Geo-coding \n    and  PDF\n    transcription .   \n\nIf you import again the same URL, only new records will be added to the\n\n:   project.", 
            "title": "Importing the tasks via the built-in CSV Task Importer"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-from-an-epicollect-plus-public-project", 
            "text": "EpiCollect  provides a web project for the\ngeneration of forms and freely hosted project websites (using Google s\nAppEngine) for many kinds of mobile data collection projects.  Data can be collected using multiple mobile phones running either the\nAndroid Operating system or the iPhone (using the EpiCollect mobile app)\nand all data can be synchronised from the phones and viewed centrally\n(using Google Maps) via the Project website or directly on the phones.  EpiCollect  can help you to recollect data\nsamples according to a form that could include multimedia like photos.\nMoreover,  EpiCollect  can geolocate the\ndata sample as it supports the built-in GPS that all modern smartphones\nhave.  For example, you can create an  EpiCollect \nproject where the form will ask the user to take a picture of a lake,\ngeo-locate it automatically via the smartphone built-in GPS and upload\nthe picture to the  EpiCollect  server. If\nthe user does not have Internet access at that moment, the user will be\nable to synchronize the data afterwards i.e. when the user has access to\nan Internet WIFI hotspot.  PYBOSSA can automatically import data from a public EpiCollect  Plus project that you own or\nthat it is publicly available in the EpiCollect  web site and help you to\nvalidate, analyze, etc. the data that have been obtained via EpiCollect.  If you want to import the data points submitted to a  public  EpiCollect  project, you will have to\nfollow the next steps:   Navigate to your project s page (you can directly access it using\n    the  slug  project name:  http://server/project/slug ).  Click in the  Tasks  section -on the left side local navigation\n    menu:  And click on the  Import Tasks  button. After clicking on it you\n    will see several different options:   4. Click in the  Use an EpiCollect Project  one. |   | 5. Then, type the  name of the EpiCollect project  and the name of\nthe  form  that you want to import, and click in the import button.  All the data points should be imported now in your project.  \n\nEpiCollect projects will be gathering data mostly all the time, for this\n\n:   reason, if you import again the same EpiCollect project, only **new\n    data points** will be imported. This feature will allow you to\n    easily add new data points to the PYBOSSA project without having to\n    do anything special.", 
            "title": "Importing the tasks from an EpiCollect Plus Public Project"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-from-a-flickr-photo-set", 
            "text": "PYBOSSA also allows to import tasks for projects based on images (like\nimage pattern recognition ones) directly from a Flickr  set  (also called\nalbum).  When importing tasks from a Flickr set, a new task will be created for\neach of the photos in the specified set. The tasks will include the\nfollowing data about each picture (which will be later available to be\nused in the task presenter):   title: the title of the photograph, as it appears on Flickr.  url: the url to the raw .jpg image, in its original size.  url_b: the url to the image,  big sized.  url_m: the url to the image,  medium  sized.  link: a link to the photo page in flickr (not to the raw image).   You can import tasks from a Flickr photo set (a.k.a. album) in either of\nthe following ways:  The easiest one is to give the PYBOSSA server permission to access your\nFlickr list of albums. To do so, you ll have to log in to your Flickr\naccount by clicking the  Log in Flickr  button. Then you ll be\nredirected to Flickr, where you will be asked if you want to allow\nPYBOSSA to access your Flickr information. If you say yes, then you ll\nbe again redirected to PYBOSSA and you ll see all of your albums. Choose\none of them and then click the  Import  button to get all the photos\ncreated as tasks for your project.  \n\nNext time you try to import photos using the Flickr importer, you'll see\n\n:   the albums for your account again. If you don't want PYBOSSA to\n    access them anymore, or just want to use another Flickr account,\n    then click \"Revoke access\".  Another option to import from a Flickr album is by specifying the ID of\nthe set (album) directly. This option is a bit more advanced (don t be\nafraid, it is still very easy if you follow the next steps) and it\nallows you to import from a photo set that you don t own (although, it\nwill have to be public. Also check the rights of the photos on it!).\nAnother advantage is that you don t need to log in to Flickr, sou you\ndon t even need to have a Flickr account.  These are the steps:   Navigate to your project s page and click in the  Tasks  section:  Then click on the  Import Tasks  button, and select the  Flickr\n    importer :  Log in with your Flickr ID and select one of the available albums of\n    your account, or type the ID of the Flickr set you want to import\n    the photos from, then click on the import button:   | .. image::  http://i.imgur.com/UZRBj8y.png  :width: 100% |  If you cannot find the ID or don t know what it is, just browse to your\nFlickr photo set and check the URL. Can you see that last long number\nrigth at the end of it? That s what you re looking for!  | .. image::  http://i.imgur.com/h6qNDX2.png  :width: 100%  |   And all the photos will be imported to your project. Just like with the\nother importers, each task will be created only once, even if you import\ntwice from the same Flickr set (unless you add new photos to it, of\ncourse!).  \n\nYou will need to make sure that every photo belonging to the set has the\n\n:   visibility set to public, so the PYBOSSA server can then access and\n    present them to the volunteers of your project.", 
            "title": "Importing the tasks from a Flickr photo set"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-from-a-dropbox-account", 
            "text": "You can import tasks from arbitrary data hosted on a Dropbox account\nwith the Dropbox importer. When importer tasks like this, the following\ninformation will be added to the info field of each tasks, available\nlater to be used in the task presenter of the project:   filename: just it, the name of the file you re importing as a task.  link: the link to the Dropbox page showing the file.  link_raw: the link to the raw file served by Dropbox. This is the\n    one you ll have to use if you want to direct link to the file from\n    the presenter (e.g. for using an image in a  img  tag, you d\n    do:  img src=task.info.link_raw ).   In addition to this generic information, the Dropbox importer will also\nrecognize some kind of files by their extension and will attach some\nextra information to them.  For pdf files (.pdf extension), the following field will be obtained\ntoo:   pdf_url: direct link to the raw pdf file, with CORS support.   For image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:   url_m: the same as link_raw  url_b: the same as link_raw  title: the same as filename   For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):   audio_url: raw link to the audio file, which can be used inside an\n    HTML 5  audio  tag and supports CORS.   For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):   audio_url: raw link to the video file, which can be used inside an\n    HTML 5  video  tag and supports CORS.   The tasks created with the Dropbox importer are ready to be used with\nthe template project presenters available in PYBOSSA, as they include\nthe described fields.  Thus, importing your images from Dropbox will allow you to immediately\nuse the image pattern recognition template with them; importing videos,\naudio files or pdfs with the Dropbox importer will also grant you to use\nthe presenter templates for video pattern recognition, sound pattern\nrecognition or documents transcription, respectively, with no additional\nmodifications and have them working right away (as long as the files\nhave any of the mentioned file extensions, of course).  These are the steps:   Navigate to your project s page and click in the  Tasks  section:  Then click on the  Import Tasks  button, and select the  Dropbox\n    importer :   3. Click on the  Choose from Dropbox  icon. You will be asked your\nDropbox account credentials. then select as many files as you want:  | .. image::  http://i.imgur.com/dsgM0Tg.png  |  4. You can repeat step 3 as many times as you want, and more files will\nbe added to your import. Then, click on  Import .", 
            "title": "Importing the tasks from a Dropbox account"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-from-a-twitter-account-or-search-result", 
            "text": "Another option for importing tasks is using the built-in Twitter\nimporter. It allows to import tweets as tasks from either a specified\nTwitter user account, or from the results returned from a search to the\nTwitter search API.  Tasks imported with it will have the tweet data attached to their info\nfield, and can later be used from within the task presenter. This data\nis a direct transcription of the data returned by the Twitter API, in\nparticular a  Tweet \nobject.  Please notice that the values returned by the Twitter API may vary.\nHowever, the following fields are guaranteed to be always included in\nthe info field of the tasks:   created_at: the date and time the tweet was made.  favorite_count: number of times the tweet has been marked as\n     favorite .  retweet_count: number of times the tweet has been retweeted.  coordinates: geographic coordinates of the place the tweet was made\n    from. Note that this is not always available for every tweet.  tweet_id: the internal ID handled by Twitter to identify this\n    tweet.  user: an  object  with\n    information about the tweet author, as returned by the Twitter API.  text: the actual content of the tweet.   In addition, an extra field  user_screen_name  has been added to the\ninfo field:   user_screen_name: the screen name (or  handle ) of the author of\n    the tweet.   For more information, please refer to the  Twitter  documentation. ..\n_Twitter:  https://dev.twitter.com/  \n\n**When importing tweets from a search, retweets will be ignored!**  So, to import tasks with the Twitter importer, do as follows:   Navigate to your project s page and click in the  Tasks  section:  Then click on the  Import Tasks  button, and select the  Twitter\n    importer :  You can provide your own Twitter credentials and make API requests\n    in behalf of them, or use the credentials provided by us. (The later\n    only allows to import the number of tweets returned by a single\n    Twitter API call, which is 100 for searches and 200 for user\n    timelines.)   4. Fill in the two fields you will find in the form. The first one is\nfor the source of your tweets. If you want them to be imported from a\nuser account, then write it with the  @  symbol, like  @PYBOSSA . If you\njust want to import tweets containing a word on them (or a #hashtag),\nthen type it there. The second field is for you to specify how many\ntweets you want to import. You can import as many as you want!  Finally, click on the  Import  button, and you are done:  | .. image::  http://i.imgur.com/l5PG2WX.png  | Importing the tasks from an Amazon S3 bucket\n\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~  Tasks can be imported from data hosted on the Amazon S3 service.\nSimilarly to the Dropbox importer, these tasks can use different kind of\ndata, like images, videos, audios, PDF files, etc. hosted on any S3\nbucket.  The S3 importer will work pretty much the same as the Dropbox one. When\nusing it, the created tasks will contain the following data in the info\nfield:   filename: just it, the name of the file you re importing as a task.  link: the link to the raw file served from Amazon S3.  url: same as the above.   In addition to this generic information, the S3 importer will also\nrecognize some kind of files by their extension and will attach some\nextra information to them.  For pdf files (.pdf extension), the following field will be obtained\ntoo:   pdf_url: direct link to the raw pdf file.   For image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:   url_m: the same as link.  url_b: the same as link.  title: the same as filename.   For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):   audio_url: raw link to the audio file, which can be used inside an\n    HTML 5  audio  tag.   For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):   audio_url: raw link to the video file, which can be used inside an\n    HTML 5  video  tag.   The tasks created with the S3 importer are ready to be used with the\ntemplate project presenters available in PYBOSSA, as they include the\ndescribed fields.  Thus, importing your images from S3 will allow you to immediately use\nthe image pattern recognition template with them; importing videos,\naudio files or pdfs with the S3 importer will also grant you to use the\npresenter templates for video pattern recognition, sound pattern\nrecognition or documents transcription, respectively, with no additional\nmodifications and have them working right away (as long as the files\nhave any of the mentioned file extensions, of course).  Importing from an S3 bucket requires that the bucket visibility is set\nto  public  so its content can be seen and listed by PYBOSSA. To make a\nbucket public, go to your AWS management console and select the S3\nservice. Then select the bucket you want to make public and click on Properties . Click on  Add more Permissions  and add a new one with Grantee: Everyone  and the  List  checkbox selected, like in the\nfollowing image:  | .. image::  http://i.imgur.com/FuN9XAS.png  |  You may also need to enable CORS in the bucket. In the same menu as\nabove, click on  Edit CORS Configuration  and configure it. You can\nlearn more here .  Finally, you need to make sure that every file inside the bucket that\nyou want to use in a task has a  public  link too. Go to the bucket\ncontent and select the files. Then click on  Actions  and select  Make\nPublic . Your files will now be visible for everyone, including a\nPYBOSSA server.  | .. image::  http://i.imgur.com/AHBVQCk.png  |  Once your S3 bucket is ready, you can follow these steps to import tasks\nfrom it:   Navigate to your project s page and click in the  Tasks  section:  Then click on the  Import Tasks  button, and select the  S3\n    importer :   3. Type the name of the bucket from which you will be importing your\ntasks and click on  Search in bucket . If you followed the steps above\nand your bucket is public, you will see a list of the items it contains.\nSelect as many as you want:  | .. image::  http://i.imgur.com/6RAMqd9.png  |   When you re ready, click on  Import .", 
            "title": "Importing the tasks from a Twitter account or search result"
        }, 
        {
            "location": "/user/overview/#importing-the-tasks-from-youtube", 
            "text": "Tasks can be imported from Youtube. Currently the importer supports\nimporting from Youtube with:   Playlists   When importing the video the importer parses all videos information and\ncreates tasks with info fields:   video_url: the URL of the youtube video which can be embedded in\n    the task form.  oembed: embeddable code for the (old) PYBOSSA video templates.   The tasks created with the Youtube importer are ready to be used with\nthe youtube and video templates.", 
            "title": "Importing the tasks from Youtube"
        }, 
        {
            "location": "/user/overview/#flushing-all-the-tasks", 
            "text": "The project settings gives you an option to automatically  delete all\nthe tasks and associated task runs  from your project.  \n\n**This action cannot be un-done, so please, be sure that you want to\nactually delete all the tasks.**  \n\n**This action will only allow you to delete tasks that are not\nassociated with a result. When a result is created, that task and its\ntask runs cannot be deleted so the volunteers can always have access to\ntheir contributions.**  If you are sure that you want to flush all the tasks and task runs for\nyour project, go to the project page\n( http://server/project/slug/tasks/ ) and click in the  Settings \noption of the left local navigation menu:  | .. image::  http://i.imgur.com/nauht7l.png  :width: 100%  |   Then, you will see that there is a sub section called:  Task Settings \nand a button with the label:  Delete the tasks . Click in that button\nand a new page will be shown:  | .. image::  http://i.imgur.com/DKPV6dc.png  :width:100%  |   As you can see, a  red warning alert  is shown, warning you that if\nyou click in the  yes  button, you will be deleting not only the\nproject tasks, but also the answers (task runs) that you have\nrecollected for your project. Be sure before proceeding that you want to\ndelete all the tasks. After clicking in the  yes  button, you will see\nthat all the tasks have been flushed.", 
            "title": "Flushing all the tasks"
        }, 
        {
            "location": "/user/overview/#creating-the-task-presenter", 
            "text": "Once you have the project and the tasks in the server, you can start\nworking with the task-presenter, which will be the web project that will\nget the tasks of your project, present them to the volunteer and save\nthe answers provided by the users.  If you have followed all the steps described in this section, you will\nbe already in the page of your project, however, if you are not, you\nonly need to access your project URL to work with your project. If your\nproject  slug  or  short name  is  flickrperson  you will be able to\naccess the project managing options in this URL:  http://PYBOSSA-SERVER/project/flickrperson  \n\nYou need to be logged in, otherwise you will not be able to modify the\nproject.  Another way for accessing your project (or projects) is clicking in your user name  and select the  My Projects  item from the drop down menu.\nFrom there you will be able to manage your projects:  | .. image::  http://i.imgur.com/3S497Ct.png  :alt: PYBOSSA User Account\n|  {width= 100% }  |   Once you have chosen your project, you can add task-presenter by\nclicking in the  Tasks  local navigation link, and then click in the\nbutton named  Editor  under the  Task Presenter  box.  | .. image::  http://i.imgur.com/nauht7l.png  :width: 100% |  After clicking in this button, a new web page will be shown where you\ncan choose a template to start coding your project, so you don t have to\nactually start from scratch.  | .. image::  http://i.imgur.com/psC5m6Q.png  |   After choosing one of the templates, you will be able to adapt it to fit\nyour project needs in a web text editor.  | .. image::  http://i.imgur.com/g9gAvWw.png  :width: 100% |  Click in the  Preview button  to get an idea about how it will look\nlike your task-presenter.  | .. image::  http://i.imgur.com/DsDDBia.png  :width: 100% |  We recommend to read the Step by step tutorial on\ncreating a Project  tutorial , as you will understand how to\ncreate the task presenter, which is basically adding some HTML skeleton\nto load the task data, input fields to get the answer of the users, and\nsome JavaScript to make it to work.", 
            "title": "Creating the Task Presenter"
        }, 
        {
            "location": "/user/overview/#publishing-the-project", 
            "text": "After completing the previous three steps, your project will be almost\nready. The final step is to  publish  it, because now it will still be a\ndraft, and it will be hidden to everyone but you (and admins).  When your project is a draft, you can contribute to it and the answers\n(task runs) and results will be stored in the database so you can have\naccess to them (and test the webhooks solution if you want to do\nreal-time analysis). However, in the moment of publishing the project\nall the task runs and results (as well as the webhooks log entries) will\nbe flushed, so don t be afraid and try it as much as you can until you\nare sure that everything works as expected. Once you think the project\nis ready for the world to see it, just click in the Publish button:  | .. image::  http://i.imgur.com/A7m4aa6.png  |  \n\nPublishing a project *cannot* be undone, so please double check everything\n\n:   before taking the step.  \n\nYou can allow other users to give you feedback and let them try and see your\n\n:   project before it has been published. In order to do so, just\n    protect it with a password, and people will be able to access it (as\n    long as they have the password, of course).  After publishing it, you will be able to access your project using the\nslug, or under your account in the  Published  projects section:  Also, results will begin to be created every time a task is completed.\nEnjoy!", 
            "title": "Publishing the project"
        }, 
        {
            "location": "/user/overview/#using-the-api", 
            "text": "Creating a project using the API involves also four steps:    Create the project,  Create the task-creator, and  Create the task-presenter for the users.  Publish it. This needs to be done via the web interface. For more\n    details please refer to publishing.", 
            "title": "Using the API"
        }, 
        {
            "location": "/user/overview/#creating-the-project_1", 
            "text": "You can create a project via the API URL  /api/project  with a POST\nrequest (See api).  You have to provide the following information about the project and\nconvert it to a JSON object (the actual values are taken from the Flickr Person demo\nproject ):  name = u'Flickr Person Finder'\nshort_name = u'FlickrPerson'\ndescription = u'Do you see a human in this photo?'\ninfo = { 'task_presenter': u' div  Skeleton for the tasks /div ' }\ndata = dict(name = name, short_name = short_name, description = description, info = info, hidden = 0)\ndata = json.dumps(data)  Flickr Person Finder, which is a  demo template  that  you can\nre-use  to create your own project, simplifies this step by using a\nsimple file named  project.json :  ``` {.sourceCode .javascript}\n{\n     name :  Flickr Person Finder ,\n     short_name :  flickrperson ,\n     description :  Image pattern recognition ,\n}  \nThe file provides a basic configuration for your project.\n\n### Adding tasks\n\nAs in all the previous steps, we are going to create a JSON object and\nPOST it using the following API URL **/api/task** in order to add tasks\nto a project that you own.\n\nFor PYBOSSA all the tasks are JSON objects with a field named **info**\nwhere the owners of the project can add any JSON object that will\nrepresent a task for their project. For example, using again the [Flickr\nPerson demo project](http://github.com/Scifabric/app-flickrperson)\nexample, we need to create a JSON object that should have the link to\nthe photo that we want to identify:\n\n``` {.sourceCode .python}\ninfo = dict (link=photo['link'], \n             url=photo['url_m'],\n             question='Do you see a human face in this photo?')\ndata = dict (project_id=project_id,\n             state=0,\n             info=info,\n             calibration=0,\n             priority_0=0)\ndata = json.dumps(data)  \n\n'url\\_m' is a pattern to describe the URL to the m medium size of the photo\n\n:   used by Flickr. It can be whatever you want, but as we are using\n    Flickr we use the same patterns for storing the data.  The most important field for the task is the  info  one. This field\nwill be used to store a JSON object with the required data for the task.\nAs  Flickr Person  is\ntrying to figure out if there is a human or not in a photo, the provided\ninformation is:    the Flickr web page posting the photo, and  the direct URL to the image, the  img src  value.    The  info  field is a free-form field that can be populated with any\nstructure. If your project needs more fields, you can add them and use\nthe format that best fits your needs.  These steps are usually coded in the task-creator. The Flickr Person\nFinder projects provides a template for the task-creator that can be\nre-used without any problems.  \n\n**The API request has to be authenticated and authorized**. You can get\nan API-KEY creating an account in the server, and checking the API-KEY\ncreated for your user, check the profile account (click in your user\nname) and copy the field **API-KEY**.\n\nThis API-KEY should be passed as a POST argument like this with the\nprevious data:\n\n\\[POST\\]    One of the benefits of using the API is that you can create tasks\npolling other web services like Flickr, where you can basically use an\nAPI. Once we have created the tasks, we will need to create the\ntask-presenter for the project.", 
            "title": "Creating the project"
        }, 
        {
            "location": "/user/overview/#creating-the-task-presenter_1", 
            "text": "The task-presenter is usually a template of HTML and JavaScript that\nwill present the tasks to the users, and save the answers in the\ndatabase. The  Flickr Person demo\nproject  provides a\nsimple template which has a  div  to load the input files, in this\ncase the photo, and another  div  to load the action buttons that\nthe users will be able to to press to answer the question and save it in\nthe database. Please, check the tutorial for more details about the\ntask-presenter.  As we will be using the API for creating the task presenter, we will\nbasically have to create an HTML file in our computer, read it from a\nscript, and post it into PYBOSSA using the API.  Once the presenter has been posted to the project, you can edit it\nlocally with your own editor, or using the PYBOSSA interface (see\nprevious section).  \n\n**The API request has to be authenticated and authorized**. You can get\nan API-KEY creating an account in the server, and checking the API-KEY\ncreated for your user, check the profile account (click in your user\nname) and copy the field **API-KEY**.\n\nThis API-KEY should be passed as a POST argument like this with the\nprevious data:\n\n\\[POST\\]    We recommend to read the Step by step tutorial on\ncreating a Project  tutorial , as you will understand how to\ncreate the task presenter, which is basically adding some HTML skeleton\nto load the task data, input fields to get the answer of the users, and\nsome JavaScript to make it work.", 
            "title": "Creating the Task Presenter"
        }, 
        {
            "location": "/user/overview/#using-pybossa-api-from-the-command-line", 
            "text": "While you can use your own programming language to access the API we\nrecommend you to use the  PYBOSSA pbs command line\ntool  as it simpflies the usage of\nPYBOSSA for any given project.  Creating a project is as simple as creating a project.json file and then\nrun the following command:  {.sourceCode .bash}\npbs --server server --api-key yourkey create_project  Please, read the section pbs for more details.", 
            "title": "Using PYBOSSA API from the command line"
        }, 
        {
            "location": "/user/pbs/", 
            "text": "Using the command line\n\n\nIn this section we\nll learn how we can use the command line to interact\nwith our project in a PYBOSSA server, using the command line tool:\n\npbs\n.\n\n\npbs\n\n\npbs\n is a very simple command line interface to a PYBOSSA server. It\nallows you to create projects, add tasks (from a CSV or JSON file) with\na nice progress bar, delete them and update the project templates\n(tutorial, task_presenter, and descriptions) all from the command line.\n\n\nInstallation\n\n\npbs is available in Pypi, so you can install the software with pip:\n\n\n``` {.sourceCode .bash}\npip install pybossa-pbs\n\n\n\n\ndiv class=\nadmonition note\n\n\nWe recommend to use virtual environments to install new Python libraries\n\n:   and packages, so please, before installing the pbs command line tool\n    consider using a virtual environment.\n\n\n/div\n\n\nIf you have all the dependencies, the package will be installed and you\nwill be able to use it from the command line. The command is: **pbs**.\n\nConfiguring pbs\n---------------\n\nBy default, pbs does not need a config file, however you will have to\nspecify for every command the server and your API key in order to add\ntasks, create a project, etc, etc. For specifying the server and API key\nthat you want to use, all you have to do is pass it as an argument:\n\n``` {.sourceCode .bash}\npbs --server http://server.com --api-key yourkey subcommand\n\n\n\n\nIf you work with two or more servers, then, remembering all the keys,\nand server urls could be problematic, as well as you will be leaving a\ntrace in your BASH history file. For this reason, pbs has a\nconfiguration file where you can add all the servers that you are\nworking with.\n\n\nTo create the config file, all you have to do is creating a\n\n.pybossa.cfg\n file in your home folder:\n\n\n``` {.sourceCode .bash}\ncd ~\nvim .pybossa.cfg\n\n\n\nThe file should have the following structure:\n\n``` {.sourceCode .python}\n[default]\nserver: http://theserver.com\napikey: yourkey\n\n\n\n\nIf you are working with more servers, add another section below it. For\nexample:\n\n\n``` {.sourceCode .python}\n[default]\nserver: http://theserver.com\napikey: yourkey\n\n\n[crowdcrafting]\nserver: http://crowdcrafting.org\napikey: yourkeyincrowdcrafting\n\n\n\nBy default pbs will use the credentials of the default section, so you\ndon't have to type anything to use those values. However, if you want to\ndo actions in the other server, all you have to do is the following:\n\n``` {.sourceCode .bash}\npbs --credentials crowdcrafting --help\n\n\n\n\nThat command will use the values of the crowdcrafting section.\n\n\nCreating a project\n\n\nCreating a project is very simple. All you have to do is create a file\nnamed \nproject.json\n with the following fields:\n\n\n``` {.sourceCode .js}\n{\n    \nname\n: \nFlickr Person Finder\n,\n    \nshort_name\n: \nflickrperson\n,\n    \ndescription\n: \nImage pattern recognition\n,\n    \nquestion\n: \nDo you see a real human face in this photo?\n\n}\n\n\n\nIf you use the name **project.json** you will not have to pass the file\nname via an argument, as it's the named used by default. Once you have\nthe file created, run the following command:\n\n``` {.sourceCode .bash}\npbs create_project\n\n\n\n\nThat command should create the project. If you want to see all the\navailable options, please check the \nhelp\n command:\n\n\n``` {.sourceCode .bash}\npbs create_project \nhelp\n\n\n\nAdding tasks to a project\n-------------------------\n\nAdding tasks is very simple. You can have your tasks in two formats:\n\n\n -   JSON\n\n -   CSV\n\nTherefore, adding tasks to your project is as simple as this command:\n\n``` {.sourceCode .bash}\npbs add_tasks --tasks-file tasks_file.json\n\n\n\n\nIf you want to see all the available options, please check the\n\nhelp\n command:\n\n\n\n\nBy default PYBOSSA servers use a rate limit for avoiding abuse of the\nAPI. For this reason, you can only do usually 300 requests per every 15\nminutes. If you are going to add more than 300 tasks, pbs will detect it\nand warn you, auto-enabling the throttling for you to respect the\nlimits. Please, see rate-limiting for more details.\n\n\n\n\n\n``` {.sourceCode .bash}\npbs add_tasks \nhelp\n\n\n\nUpdating project templates\n--------------------------\n\nNow that you have added tasks, you can work in your templates. All you\nhave to do to add/update the templates to your project is running the\nfollowing command:\n\n``` {.sourceCode .bash}\npbs update_project\n\n\n\n\nThat command needs to have in the same folder where you are running it,\nthe following files:\n\n\n\n\n\n\ntemplate.html\n\n\nresults.html\n\n\nlong_description.md\n\n\ntutorial.html\n\n\n\n\n\n\nIf you want to use another template, you can via arguments:\n\n\n``` {.sourceCode .bash}\npbs update_project \ntemplate /tmp/template.html\n\n\n\nIf you want to see all the available options, please check the\n**--help** command:\n\n``` {.sourceCode .bash}\npbs update_project --help\n\n\n\n\nDeleting tasks from a project\n\n\nIf you need it, you can delete all the tasks from your project, or only\none using its task.id. For deleting all the tasks, all you\nve to do is\nrun the following command:\n\n\n``` {.sourceCode .bash}\npbs delete_tasks\n\n\n\nThis command will confirm that you want to delete all the tasks and\nassociated task\\_runs.\n\nIf you want to see all the available options, please check the\n**--help** command:\n\n``` {.sourceCode .bash}\npbs delete_tasks --help\n\n\n\n\n\n\n**Only tasks that are not associated with a result will be deleted.**", 
            "title": "Pbs"
        }, 
        {
            "location": "/user/pbs/#using-the-command-line", 
            "text": "In this section we ll learn how we can use the command line to interact\nwith our project in a PYBOSSA server, using the command line tool: pbs .", 
            "title": "Using the command line"
        }, 
        {
            "location": "/user/pbs/#pbs", 
            "text": "pbs  is a very simple command line interface to a PYBOSSA server. It\nallows you to create projects, add tasks (from a CSV or JSON file) with\na nice progress bar, delete them and update the project templates\n(tutorial, task_presenter, and descriptions) all from the command line.", 
            "title": "pbs"
        }, 
        {
            "location": "/user/pbs/#installation", 
            "text": "pbs is available in Pypi, so you can install the software with pip:  ``` {.sourceCode .bash}\npip install pybossa-pbs   div class= admonition note \n\nWe recommend to use virtual environments to install new Python libraries\n\n:   and packages, so please, before installing the pbs command line tool\n    consider using a virtual environment. /div \n\nIf you have all the dependencies, the package will be installed and you\nwill be able to use it from the command line. The command is: **pbs**.\n\nConfiguring pbs\n---------------\n\nBy default, pbs does not need a config file, however you will have to\nspecify for every command the server and your API key in order to add\ntasks, create a project, etc, etc. For specifying the server and API key\nthat you want to use, all you have to do is pass it as an argument:\n\n``` {.sourceCode .bash}\npbs --server http://server.com --api-key yourkey subcommand  If you work with two or more servers, then, remembering all the keys,\nand server urls could be problematic, as well as you will be leaving a\ntrace in your BASH history file. For this reason, pbs has a\nconfiguration file where you can add all the servers that you are\nworking with.  To create the config file, all you have to do is creating a .pybossa.cfg  file in your home folder:  ``` {.sourceCode .bash}\ncd ~\nvim .pybossa.cfg  \nThe file should have the following structure:\n\n``` {.sourceCode .python}\n[default]\nserver: http://theserver.com\napikey: yourkey  If you are working with more servers, add another section below it. For\nexample:  ``` {.sourceCode .python}\n[default]\nserver: http://theserver.com\napikey: yourkey  [crowdcrafting]\nserver: http://crowdcrafting.org\napikey: yourkeyincrowdcrafting  \nBy default pbs will use the credentials of the default section, so you\ndon't have to type anything to use those values. However, if you want to\ndo actions in the other server, all you have to do is the following:\n\n``` {.sourceCode .bash}\npbs --credentials crowdcrafting --help  That command will use the values of the crowdcrafting section.", 
            "title": "Installation"
        }, 
        {
            "location": "/user/pbs/#creating-a-project", 
            "text": "Creating a project is very simple. All you have to do is create a file\nnamed  project.json  with the following fields:  ``` {.sourceCode .js}\n{\n     name :  Flickr Person Finder ,\n     short_name :  flickrperson ,\n     description :  Image pattern recognition ,\n     question :  Do you see a real human face in this photo? \n}  \nIf you use the name **project.json** you will not have to pass the file\nname via an argument, as it's the named used by default. Once you have\nthe file created, run the following command:\n\n``` {.sourceCode .bash}\npbs create_project  That command should create the project. If you want to see all the\navailable options, please check the  help  command:  ``` {.sourceCode .bash}\npbs create_project  help  \nAdding tasks to a project\n-------------------------\n\nAdding tasks is very simple. You can have your tasks in two formats:  -   JSON  -   CSV\n\nTherefore, adding tasks to your project is as simple as this command:\n\n``` {.sourceCode .bash}\npbs add_tasks --tasks-file tasks_file.json  If you want to see all the available options, please check the help  command:  \n\nBy default PYBOSSA servers use a rate limit for avoiding abuse of the\nAPI. For this reason, you can only do usually 300 requests per every 15\nminutes. If you are going to add more than 300 tasks, pbs will detect it\nand warn you, auto-enabling the throttling for you to respect the\nlimits. Please, see rate-limiting for more details.  ``` {.sourceCode .bash}\npbs add_tasks  help  \nUpdating project templates\n--------------------------\n\nNow that you have added tasks, you can work in your templates. All you\nhave to do to add/update the templates to your project is running the\nfollowing command:\n\n``` {.sourceCode .bash}\npbs update_project  That command needs to have in the same folder where you are running it,\nthe following files:    template.html  results.html  long_description.md  tutorial.html    If you want to use another template, you can via arguments:  ``` {.sourceCode .bash}\npbs update_project  template /tmp/template.html  \nIf you want to see all the available options, please check the\n**--help** command:\n\n``` {.sourceCode .bash}\npbs update_project --help", 
            "title": "Creating a project"
        }, 
        {
            "location": "/user/pbs/#deleting-tasks-from-a-project", 
            "text": "If you need it, you can delete all the tasks from your project, or only\none using its task.id. For deleting all the tasks, all you ve to do is\nrun the following command:  ``` {.sourceCode .bash}\npbs delete_tasks  \nThis command will confirm that you want to delete all the tasks and\nassociated task\\_runs.\n\nIf you want to see all the available options, please check the\n**--help** command:\n\n``` {.sourceCode .bash}\npbs delete_tasks --help  \n\n**Only tasks that are not associated with a result will be deleted.**", 
            "title": "Deleting tasks from a project"
        }, 
        {
            "location": "/user/project_settings/", 
            "text": "Configuring the Project\n\n\nIf you are the owner of a project, you can configure it using the web\ninterface. When you are the owner (also an administrator of the PYBOSSA\nserver) a new link in the left local navigation bar of the project will\nappear with the name \nSettings\n.\n\n\n| .. image:: \nhttp://i.imgur.com/6l91cyV.png\n :width: 100% |\n\n\nThe \nSettings\n page will give you the following options:\n\n\n\n\nproject-details: here you will be able to change the name of the\n    project, the description, icon, etc.\n\n\ntask-settings: this button will open the task-settings page where\n    you will be able to configure the task-scheduler, change the\n    task-priority, modify the task-redundancy and delete-tasks and its\n    associated task runs (also known as answers).\n\n\nproject-delete: if you click in this button you will be able to\n    completely remove the project from the system. A big warning message\n    will be shown before allowing you to delete the project.\n\n\nproject-blog: if you click this button, you will be able to write a\n    new blog post to be shared with the volunteers.\n\n\n\n\nEdit the project details\n\n\nIn this section you can change the following parameters of your project:\n\n\n\n\nName\n: the full name of your project, i.e. Flickr Person Finder\n\n\nShort name\n: (also known as \nslug\n) the string that will be used\n    to access your project, \nhttp://server/project/short_name\n.\n\n\nDescription\n: A \nshort\n description of the project, e.g. \nImage\n    pattern recognition\n. By default, it will have been autogenerated\n    for you from the \nLong description\n you filled in the previous\n    step (but without the Markdown!).\n\n\nLong Description\n: A \nlong\n description where you can use\n    Markdown to format the description of your project. This field is\n    usually used to provide information about the project, the\n    developer, the researcher group or institutions involved in the\n    project, etc.\n\n\nAllow Anonymous Contributors\n: By default anonymous and\n    authenticated users can participate in all the projects, however you\n    can change it to only allow authenticated volunteers to participate.\n\n\nPassword\n: If you want to control who can contribute or access to\n    your project, you can set a password here to share with those you\n    allow to do it. If you leave it blank, then no password will protect\n    your project!\n\n\nCategory\n: Select a category that fits your project. categories\n    are added and managed by the server administrators.\n\n\nIn addition, you will be able to select and upload an \nimage\n from\n    your local computer to set it as the project image thoroughout the\n    server.\n\n\n\n\n| .. image:: \nhttp://i.imgur.com/ZbPoM3f.png\n :width: 100% | ..\n_`Markdown`: \nhttp://daringfireball.net/projects/markdown/\n\n\nTask Settings\n\n\nThe \nTask Settings\n is only accessible for the project owner and server\nadministrators. The page can be reached via the \nSettings\n menu, but\nalso from the \nTasks\n link in the left local navigation bar.\n\n\n| .. image:: \nhttp://i.imgur.com/HsZvKBy.png\n :width: 100% |\n\n\nThe page shows four different blocks:\n\n\n\n\nTask Scheduler\n: this block allows you to specify how the project\n    should send tasks to the volunteers.\n\n\nTask Priority\n: this block allows you to change the priority of\n    the tasks.\n\n\nTask Redundancy\n: use this block to change the default number of\n    answers (30 by default) that you want to obtain before marking a\n    task as completed.\n\n\nDelete Tasks\n: this final block allows you to flush all the tasks\n    and its associated task runs (answers).\n\n\n\n\nTask Scheduler\n\n\nPYBOSSA provides different task schedulers that will send tasks to the\nusers in very different ways.\n\n\n| .. image:: \nhttp://i.imgur.com/CmIylfr.png\n :width: 100% |\n\n\nDefault or Depth First\n\n\nThe Default task scheduler (also known as Depth First) has the following\nfeatures:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n    out.\n\n\nUsers (anonymous and authenticated) will only be allowed to\n    participate once in the same task. Once a user has submitted a Task\n    Run (or answer) for a given task, the scheduler will never send that\n    task to the same user.\n\n\nIt will send the same task until the task-redundancy is achieved. In\n    other words, if a task has a redundancy value of 3, the task will be\n    always sent until those 3 answers have been submitted. Once the 3\n    answers have been collected, the task will be marked as \ncompleted\n\n    and it will not be sent again.\n\n\nWhen a user has submitted a Task Run for a given task, the scheduler\n    will send to the same user the next task.\n\n\nThis scheduler allows the usage of \norderby\n and \ndesc\n\n    arguments via the \napi/projectID/newtask\n endpoint.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).\n\n\nFrom the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value)\nall the tasks as soon as possible.\n\n\nBreadth First\n\n\nThe Breadth First scheduler has the following features:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n    out.\n\n\nIt sends always first the task with the least number of task runs in\n    the system.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project\ns tasks that have less\nanswers (in case of not having an answer, the creation time will be used\nto send them like in a FIFO \nfirst in first out).\n\n\nFrom the point of view of the project, the scheduler will be trying to\nobtain as soon as possible an answer for all the available tasks.\n\n\n\n\nIf you use the limit and offset, the tasks will be ordered first by the\nnumber of task runs, returning always first the tasks with less number\nof task runs for the user.\n\n\n\n\n\nRandom\n\n\nThe Random scheduler has the following features:\n\n\n\n\nIt sends a task randomly to the users.\n\n\nA user (authenticated or anonymous) can receive the same task two or\n    more times in a row.\n\n\nIt ignores the task-redundancy value, so tasks will be never marked\n    as \ncompleted\n.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending tasks randomly as the user could\nreceive in a row the same task several times.\n\n\nFrom the point of view of the project, the scheduler will be sending\ntasks randomly.\n\n\n\n\nBy using this scheduler, you may end up with some tasks that receive only\n\n:   a few answers. If you want to avoid this issue, change to the other\n    two schedulers.\n\n\n\n\n\n\n\nThis scheduler is not enabled by default, as it comes as a plugin and its main\n\n:   purpose is to show how you can create your own scheduler using the\n    plugin infrastructure. We do not recommend to use it in any\n    production system, as users can participate several times in the\n    same task, making the statistical analysis useless.\n\n\n\n\n\nTask Priority\n\n\nPYBOSSA allows you to prioritize the tasks, or in other words, which\ntasks should be delivered first to the volunteers.\n\n\n| .. image:: \nhttp://i.imgur.com/drWV1re.png\n :width: 100% |\n\n\n\n\n**Important**: Task Priority is only respected by the default scheduler.\n\n\n\n\n\nThe page shows you two input boxes:\n\n\n\n\nTask IDs\n: comma separated Task IDs of your project tasks. Note:\n    not spaces between the values or commas.\n\n\nPriority\n: the priority that you want to set for the Task IDs.\n    This must be a value between 0.0 and 1.0.\n\n\n\n\nA task with a priority 1.0 will be the first Task to be delivered to a\ngiven user. In case that two or more tasks have the same priority value,\nthe first task that will be delivered will be the one with the lower\nTask.ID value.\n\n\nTask Redundancy\n\n\nThe Task Redundancy is a feature that will allow you to analyze\nstatistically the results that your project are getting for each of its\ntasks.\n\n\nPYBOSSA by default assigns a value of 30 task runs \nanswers\n per task,\nas this value is commonly used for analyzing the population\nstatistically.\n\n\nThis page will allow you to change the default value, 30, to whatever\nyou like between a minimum of 1 or a maximum of 10000 answers per task.\nWe recommend to have at use at least 3 answers per task, otherwise you\nwill not be able to run a proper analysis on a given task if two uses\nanswer different.\n\n\n| .. image:: \nhttp://i.imgur.com/VaEI5GK.png\n :width: 100% |\n\n\nFor example, imagine that the goal of the task is to answer if you see a\nhuman in a picture, and the available answers are Yes and No. If you set\nup the redundancy value to 2, and two different users answer\nrespectively Yes and No, you will not know the correct answer for the\ntask. By increasing the redundancy value to 5 (or even bigger) you will\nbe able to run a statistical analysis more accurately.\n\n\nDelete Tasks\n\n\nThis section will allow you to complete remove all the Tasks and\nassociated Task Runs (answers) of your project.\n\n\n| .. image:: \nhttp://i.imgur.com/JS4J5D0.png\n :width: 100% |\n\n\n\n\nThis step cannot be undone, once you delete all the tasks and associated\n\n:   task runs they will be lost forever.\n\n\n\n\n\n\n\n**Only tasks not associated with a result can be deleted.**\n\n\n\n\n\nThis feature is useful when you are testing your project, and you are\ndeciding the structure that you are going to build in your answers.\n\n\nImport tasks automatically\n\n\nBoth pro users and server administrators can have access to this\nfeature, which allows to schedule a background job that will\nautomatically import tasks every 24 hours. This option is accessible\nfrom the \nTasks\n link in the left local navigation bar:\n\n\n| .. image:: \nhttp://i.imgur.com/HCuQDLJ.png\n |\n\n\nTasks can be imported using any of the PYBOSSA built-in importers, such\nas csv-import and epicollect-import. To set up an autoimporter, please\nrefer to the instructions for csv-import, epicollect-import,\nflickr-import or twitter-import, as the procedure is the same:\n\n\n| .. image:: \nhttp://i.imgur.com/iaJHMtY.png\n |\n\n\nThe only difference is that the tasks won\nt be imported only once, but\nregularly, as explained. However, the same behaviour should be expected,\nso autoimporting a CSV file that does not change will result in no new\ntasks being imported.\n\n\n\n\nThe Dropbox, Amazon S3 and Youtube importers are not available for being used as an\n\n:   autoimporter.\n\n\n\n\n\nOnce an autoimporter has been set up, it can also be cancelled anytime.\nJust delete it. And a new one can then be created.\n\n\nDelete the project\n\n\nIn case that you want to completely remove the project and all its tasks\nand task runs, use this section to delete the project.\n\n\n| .. image:: \nhttp://i.imgur.com/JFAQHu0.png\n :width: 100% |\n\n\n\n\nThis action cannot be undone, so be sure before proceeding.\n\n\n\n\n\n\n\nOnly projects without results can be deleted.", 
            "title": "Project settings"
        }, 
        {
            "location": "/user/project_settings/#configuring-the-project", 
            "text": "If you are the owner of a project, you can configure it using the web\ninterface. When you are the owner (also an administrator of the PYBOSSA\nserver) a new link in the left local navigation bar of the project will\nappear with the name  Settings .  | .. image::  http://i.imgur.com/6l91cyV.png  :width: 100% |  The  Settings  page will give you the following options:   project-details: here you will be able to change the name of the\n    project, the description, icon, etc.  task-settings: this button will open the task-settings page where\n    you will be able to configure the task-scheduler, change the\n    task-priority, modify the task-redundancy and delete-tasks and its\n    associated task runs (also known as answers).  project-delete: if you click in this button you will be able to\n    completely remove the project from the system. A big warning message\n    will be shown before allowing you to delete the project.  project-blog: if you click this button, you will be able to write a\n    new blog post to be shared with the volunteers.", 
            "title": "Configuring the Project"
        }, 
        {
            "location": "/user/project_settings/#edit-the-project-details", 
            "text": "In this section you can change the following parameters of your project:   Name : the full name of your project, i.e. Flickr Person Finder  Short name : (also known as  slug ) the string that will be used\n    to access your project,  http://server/project/short_name .  Description : A  short  description of the project, e.g.  Image\n    pattern recognition . By default, it will have been autogenerated\n    for you from the  Long description  you filled in the previous\n    step (but without the Markdown!).  Long Description : A  long  description where you can use\n    Markdown to format the description of your project. This field is\n    usually used to provide information about the project, the\n    developer, the researcher group or institutions involved in the\n    project, etc.  Allow Anonymous Contributors : By default anonymous and\n    authenticated users can participate in all the projects, however you\n    can change it to only allow authenticated volunteers to participate.  Password : If you want to control who can contribute or access to\n    your project, you can set a password here to share with those you\n    allow to do it. If you leave it blank, then no password will protect\n    your project!  Category : Select a category that fits your project. categories\n    are added and managed by the server administrators.  In addition, you will be able to select and upload an  image  from\n    your local computer to set it as the project image thoroughout the\n    server.   | .. image::  http://i.imgur.com/ZbPoM3f.png  :width: 100% | ..\n_`Markdown`:  http://daringfireball.net/projects/markdown/", 
            "title": "Edit the project details"
        }, 
        {
            "location": "/user/project_settings/#task-settings", 
            "text": "The  Task Settings  is only accessible for the project owner and server\nadministrators. The page can be reached via the  Settings  menu, but\nalso from the  Tasks  link in the left local navigation bar.  | .. image::  http://i.imgur.com/HsZvKBy.png  :width: 100% |  The page shows four different blocks:   Task Scheduler : this block allows you to specify how the project\n    should send tasks to the volunteers.  Task Priority : this block allows you to change the priority of\n    the tasks.  Task Redundancy : use this block to change the default number of\n    answers (30 by default) that you want to obtain before marking a\n    task as completed.  Delete Tasks : this final block allows you to flush all the tasks\n    and its associated task runs (answers).", 
            "title": "Task Settings"
        }, 
        {
            "location": "/user/project_settings/#task-scheduler", 
            "text": "PYBOSSA provides different task schedulers that will send tasks to the\nusers in very different ways.  | .. image::  http://i.imgur.com/CmIylfr.png  :width: 100% |", 
            "title": "Task Scheduler"
        }, 
        {
            "location": "/user/project_settings/#default-or-depth-first", 
            "text": "The Default task scheduler (also known as Depth First) has the following\nfeatures:   It sends the tasks in the order that were created, first in first\n    out.  Users (anonymous and authenticated) will only be allowed to\n    participate once in the same task. Once a user has submitted a Task\n    Run (or answer) for a given task, the scheduler will never send that\n    task to the same user.  It will send the same task until the task-redundancy is achieved. In\n    other words, if a task has a redundancy value of 3, the task will be\n    always sent until those 3 answers have been submitted. Once the 3\n    answers have been collected, the task will be marked as  completed \n    and it will not be sent again.  When a user has submitted a Task Run for a given task, the scheduler\n    will send to the same user the next task.  This scheduler allows the usage of  orderby  and  desc \n    arguments via the  api/projectID/newtask  endpoint.   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).  From the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value)\nall the tasks as soon as possible.", 
            "title": "Default or Depth First"
        }, 
        {
            "location": "/user/project_settings/#breadth-first", 
            "text": "The Breadth First scheduler has the following features:   It sends the tasks in the order that were created, first in first\n    out.  It sends always first the task with the least number of task runs in\n    the system.   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project s tasks that have less\nanswers (in case of not having an answer, the creation time will be used\nto send them like in a FIFO  first in first out).  From the point of view of the project, the scheduler will be trying to\nobtain as soon as possible an answer for all the available tasks.  \n\nIf you use the limit and offset, the tasks will be ordered first by the\nnumber of task runs, returning always first the tasks with less number\nof task runs for the user.", 
            "title": "Breadth First"
        }, 
        {
            "location": "/user/project_settings/#random", 
            "text": "The Random scheduler has the following features:   It sends a task randomly to the users.  A user (authenticated or anonymous) can receive the same task two or\n    more times in a row.  It ignores the task-redundancy value, so tasks will be never marked\n    as  completed .   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending tasks randomly as the user could\nreceive in a row the same task several times.  From the point of view of the project, the scheduler will be sending\ntasks randomly.  \n\nBy using this scheduler, you may end up with some tasks that receive only\n\n:   a few answers. If you want to avoid this issue, change to the other\n    two schedulers.  \n\nThis scheduler is not enabled by default, as it comes as a plugin and its main\n\n:   purpose is to show how you can create your own scheduler using the\n    plugin infrastructure. We do not recommend to use it in any\n    production system, as users can participate several times in the\n    same task, making the statistical analysis useless.", 
            "title": "Random"
        }, 
        {
            "location": "/user/project_settings/#task-priority", 
            "text": "PYBOSSA allows you to prioritize the tasks, or in other words, which\ntasks should be delivered first to the volunteers.  | .. image::  http://i.imgur.com/drWV1re.png  :width: 100% |  \n\n**Important**: Task Priority is only respected by the default scheduler.  The page shows you two input boxes:   Task IDs : comma separated Task IDs of your project tasks. Note:\n    not spaces between the values or commas.  Priority : the priority that you want to set for the Task IDs.\n    This must be a value between 0.0 and 1.0.   A task with a priority 1.0 will be the first Task to be delivered to a\ngiven user. In case that two or more tasks have the same priority value,\nthe first task that will be delivered will be the one with the lower\nTask.ID value.", 
            "title": "Task Priority"
        }, 
        {
            "location": "/user/project_settings/#task-redundancy", 
            "text": "The Task Redundancy is a feature that will allow you to analyze\nstatistically the results that your project are getting for each of its\ntasks.  PYBOSSA by default assigns a value of 30 task runs  answers  per task,\nas this value is commonly used for analyzing the population\nstatistically.  This page will allow you to change the default value, 30, to whatever\nyou like between a minimum of 1 or a maximum of 10000 answers per task.\nWe recommend to have at use at least 3 answers per task, otherwise you\nwill not be able to run a proper analysis on a given task if two uses\nanswer different.  | .. image::  http://i.imgur.com/VaEI5GK.png  :width: 100% |  For example, imagine that the goal of the task is to answer if you see a\nhuman in a picture, and the available answers are Yes and No. If you set\nup the redundancy value to 2, and two different users answer\nrespectively Yes and No, you will not know the correct answer for the\ntask. By increasing the redundancy value to 5 (or even bigger) you will\nbe able to run a statistical analysis more accurately.", 
            "title": "Task Redundancy"
        }, 
        {
            "location": "/user/project_settings/#delete-tasks", 
            "text": "This section will allow you to complete remove all the Tasks and\nassociated Task Runs (answers) of your project.  | .. image::  http://i.imgur.com/JS4J5D0.png  :width: 100% |  \n\nThis step cannot be undone, once you delete all the tasks and associated\n\n:   task runs they will be lost forever.  \n\n**Only tasks not associated with a result can be deleted.**  This feature is useful when you are testing your project, and you are\ndeciding the structure that you are going to build in your answers.", 
            "title": "Delete Tasks"
        }, 
        {
            "location": "/user/project_settings/#import-tasks-automatically", 
            "text": "Both pro users and server administrators can have access to this\nfeature, which allows to schedule a background job that will\nautomatically import tasks every 24 hours. This option is accessible\nfrom the  Tasks  link in the left local navigation bar:  | .. image::  http://i.imgur.com/HCuQDLJ.png  |  Tasks can be imported using any of the PYBOSSA built-in importers, such\nas csv-import and epicollect-import. To set up an autoimporter, please\nrefer to the instructions for csv-import, epicollect-import,\nflickr-import or twitter-import, as the procedure is the same:  | .. image::  http://i.imgur.com/iaJHMtY.png  |  The only difference is that the tasks won t be imported only once, but\nregularly, as explained. However, the same behaviour should be expected,\nso autoimporting a CSV file that does not change will result in no new\ntasks being imported.  \n\nThe Dropbox, Amazon S3 and Youtube importers are not available for being used as an\n\n:   autoimporter.  Once an autoimporter has been set up, it can also be cancelled anytime.\nJust delete it. And a new one can then be created.", 
            "title": "Import tasks automatically"
        }, 
        {
            "location": "/user/project_settings/#delete-the-project", 
            "text": "In case that you want to completely remove the project and all its tasks\nand task runs, use this section to delete the project.  | .. image::  http://i.imgur.com/JFAQHu0.png  :width: 100% |  \n\nThis action cannot be undone, so be sure before proceeding.  \n\nOnly projects without results can be deleted.", 
            "title": "Delete the project"
        }, 
        {
            "location": "/user/tutorial/", 
            "text": "Project Tutorial\n\n\nThis tutorial is based in the demo project \nFlickr Person\n (\nsource\ncode\n) provided with\nPYBOSSA. This demo project is a simple microtasking project where users\nhave to answer the following question: \nDo you see a human face in this\nphoto?\n The possible answers are: \nYes, No\n and \nI don\nt know\n.\n\n\nThe demo project Flickr Person has two main components:\n\n\n\n\n\n\nThe task-creator a Python script that creates the tasks in\n    PYBOSSA, and\n\n\nthe task-presenter: an HTML + Javascript structure that will show\n    the tasks to the users and save their answers.\n\n\n\n\n\n\nThis tutorial uses the PYBOSSA pbs command line tool.\n\n\nSetting Things Up\n\n\nIn order to run the tutorial, you will need to create an account in a\nPYBOSSA server. The PYBOSSA server could be running in your computer or\nin a third party server.\n\n\n\n\nYou can use \n for testing.\n\n\n\n\n\nWhen you create an account, you will have access to your profile by\nclicking on your name, and then in the \nMy Settings\n option.\n\n\nThen, you will be able to copy the \nAPI-KEY that has been generated for\nyou\n\n\n| .. image:: \nhttp://i.imgur.com/JcxciZc.png\n |\n\n\nThis \nAPI-KEY\n allows you to create the project in PYBOSSA (only\nauthenticated users can create projects and tasks, while everyone can\ncollaborate solving the tasks).\n\n\n\n\nThe Flickr Person Finder demo project uses pbs\n\n:   that need to be installed in your system before proceeding. For this\n    reason, we recommend you to configure a\n    [virtualenv](http://pypi.python.org/pypi/virtualenv) for the project\n    as it will create an isolated Python environment in a folder,\n    helping you to manage different dependencies and versions without\n    having to deal with root permissions in your computer.\n\n[virtualenv](http://pypi.python.org/pypi/virtualenv) creates an\nenvironment that has its own installation directories, that doesn't\nshare libraries with other virtualenv environments (and optionally\ndoesn't access the globally installed libraries either).\n\nYou can install the software if you want at the system level if you have\nroot privileges, however this may lead to broken dependencies in the OS\nfor all your Python packages, so if possible, use only the\n[virtualenv](http://pypi.python.org/pypi/virtualenv) solution.\n\n\n\n\n\n\n\nFlickr Person Finder uses the **pbs** command line tool which simplifies\na lot accessing the PYBOSSA API endpoints. Therefore, you will need to\ninstall the *pybossa-pbs* with [pip --a python installer\npackager](http://pypi.python.org/pypi/pip):\n\n    $ pip install pybossa-pbs\n\n\n\n\n\n\n\nIf you need to install **pip** in your system, check [the official\ndocumentation.](http://www.pip-installer.org/en/latest/installing.html)\n\n\n\n\n\nCreating the Project\n\n\nThere are two possible methos for creating a project:\n\n\n\n\n\n\nweb-interface: click in your user name, and you will see a section\n    named \nprojects\n list. In that section you will be able to\n    create a project using the web interface.\n\n\napi-interface: using the \npbs\n command line tool.\n\n\n\n\n\n\nFor this tutorial we are going to use the second option, the ../api via\nthe PYBOSSA pbs command line tool for interacting with the API.\n\n\nFor creating the project, you will need to parameters\n\n\n\n\n\n\nthe URL of the PYBOSSA server, and\n\n\nan API-KEY to authenticate you in the PYBOSSA server.\n\n\n\n\n\n\nThe following section gives more details about how to use the script.\n\n\n\n\nIf you are running a PYBOSSA server locally, you can omit the URL parameter\n\n:   as by default it uses the URL \n\n\n\n\n\n\nCloning the Flickr Person Finder source code\n\n\nIn order to follow the tutorial, you will need to clone the \nFlickr\nPerson Finder public Github\nRepository\n so you will\nhave a local copy of the required files to create the project and tasks\nusing the API.\n\n\n\n\nIf you are new to Github and the GIT software, we recommend you to take\nthis \nfree and on-line course\n (it will take you\nonly 15 minutes!) where you will learn the basics, which are the main\nconcepts that you will need for cloning the demo project repository.\n\n\nIf you prefer to skip the course and take it in a later stage, the\ncommands that you need to clone the repository are:\n\n\n``` {.sourceCode .bash}\ngit clone git://github.com/Scifabric/app-flickrperson.git\n\n\n\nAfter running that command a new folder named **app-flickrperson** will\nbe created from where you run the command.\n\nConfiguring the name, short name, thumbnail, etc.\n-------------------------------------------------\n\nThe Flickr Person Finder provides a file called:\n[project.json](https://github.com/Scifabric/app-flickrperson/blob/master/project.json)\nthat has the following content:\n\n``` {.sourceCode .js}\n{\n    \nname\n: \nFlickr Person Finder\n,\n    \nshort_name\n: \nflickrperson\n,\n    \ndescription\n: \nImage pattern recognition\n,\n}\n\n\n\n\nYou will need to modify the \nname\n and \nshort_name\n fields in order\nto create a project in crowdcrafting.org, as there is already a project\nregistered with those values. Otherwise, you can keep the same values.\n\n\n\n\nThe **name** and **short\\_name** of the project **must be unique**!\nOtherwise you will get an error (IntegrityError) when creating the\nproject.\n\n\n\n\n\nYou can re-use the other fields if you want. \nDescription\n will be the\ntext shown in the project listing page. It\ns important that you try to\nhave a short description that explains what your project does.\n\n\nNow that we have the \nproject.json\n file ready, we can create the\nproject:\n\n\n``` {.sourceCode .bash}\npbs \nserver server \napikey key create_project\n\n\n\nThis command will read the values in the file **project.json** and it\nwill use them to create an empty project in the PYBOSSA server of your\nchoice.\n\n\ndiv class=\nadmonition note\n\n\nYou can save some typing if you create a config file for pbs. Please,\ncheck the pbs page for more details.\n\n\n/div\n\n\nIf you want to check if the project exists, just open your web browser,\nand type in the folling URL:\n\n    http://server/project/short_name\n\nWhere **short\\_name** is the value of the key with the same name in the\nfile: **project.json**. You sould get a project page, with not so much\ninformation, as we only have created it. Let's add some tasks to the\nproject.\n\nAdding tasks to the project\n---------------------------\n\nNow that we have the project created, we can add some tasks to our\nproject. PYBOSSA will deliver the tasks for the users (authenticated and\nanonymous ones) and store the submitted answers in the PYBOSSA data\nbase, so you can process them in a later stage.\n\nA PYBOSSA task is a JSON object with the information that needs to be\nprocessed by the volunteers. Usually it will be a link to a media file\n(image, video, sound clip, PDF file, etc.) that needs to be processed.\n\nWhile PYBOSSA internally uses JSON for storing the data, you can add\ntasks to your project using two different formats:\n\n    * CSV: a comma separated spreadsheet\n    * JSON: a lightweight data-interchange format.\n\nThe demo project comes with a CSV sample file, that has the following\nstructure:\n\n    question, url_m, link, url_b\n    Do you see a human face in this photo?, http://srv/img_m.jpg, http://srv/img, http://srv/img_b.jp\n\nAdditionally there is a script named: **get\\_images.py** that will\ncontact Flickr, get the latest published photos to this web service, and\nsave them in JSON format as a file (flickr\\_tasks.json), with the same\nstructure as the CSV file (the keys are the same):\n\n``` {.sourceCode .js}\n{ 'link': 'http://www.flickr.com/photos/teleyinex/2945647308/',\n  'url_m': 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg', \n  'url_b': 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg' }\n\n\n\n\n\n\nFlickr creates from the original image different cropped versions of the\nimage. It uses a pattern to distinguish them: **\\_m** for medium size,\nand **\\_b** for the big ones. There are more options, so if you need\nmore help in this matter, check the official [Flickr\ndocumentation](http://www.flickr.com/services/api/).\n\n\n\n\n\nAll those keys will be saved into the task field \ninfo\n of the task\nmodel.\n\n\n\n\nFrom now own, the tutorial assumes that you have configured your pbs\n\n:   installation with a .pybossa.cfg file. Please, see pbs for more\n    information.\n\n\n\n\n\nAs we have a CSV file with some tasks, let\ns use it for adding some\ntasks to our project. For adding tasks in CSV format all you have to do\nis the following:\n\n\n``` {.sourceCode .bash}\npbs add_tasks \ntasks-file flickr_tasks.csv\n\n\n\nAfter running this program, you will see a progress bar that will let\nyou know when all the tasks will be added to your project.\n\nFinally, we'll also add some tasks in JSON format using the\n**get\\_images.py** script, that will generate for us the\n**flickr\\_tasks.json** file with the last 20 published photos in Flickr.\nFirst, we need to create the tasks file:\n\n``` {.sourceCode .bash}\npython get_images.py\n\n\n\n\nThis will create the file: \nflickr_tasks.json\n. Now, let\ns add them\nto our project:\n\n\n``` {.sourceCode .bash}\npbs add_tasks \ntasks-file flickr_tasks.json\n\n\n\nDone! Again, a progress bar will show us how long it takes to add all\nthe tasks. Once it's completed, we can actually move to the next step on\nthe tutorial: presenting the tasks to the volunteers.\n\n\ndiv class=\nadmonition note\n\n\nYou can check all the available options for the command line with the\n\n:   **--help** argument.\n\n\n/div\n\n\nIf something goes wrong, you should an error message similar to the\nfollowing one:\n\n    ERROR:root:pbclient.create_project\n    {\n        \naction\n: \nPOST\n,\n        \nexception_cls\n: \nIntegrityError\n,\n        \nexception_msg\n: \n(IntegrityError) duplicate key value violates unique constraint \\\nproject_name_key\\\n\\nDETAIL:  Key (name)=(Flickr Person Finder) already exists.\\n\n,\n        \nstatus\n: \nfailed\n,\n        \nstatus_code\n: 415,\n        \ntarget\n: \nproject\n\n    }\n\nThe error message will have the information regarding the problems it\nhas found when using the API.\n\n\ndiv class=\nadmonition note\n\n\nSince version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed\n\n:   the number of allowed requests, getting a 429 error. Please see\n    rate-limiting section.\n\n\n/div\n\n\nNumber of answers or task runs per task\n---------------------------------------\n\nPYBOSSA by default will send a task to different users (authenticated\nand anonymous users) until 30 different task runs are obtained for each\ntask.\n\ntask-scheduler does not allow the same user to submit more than one\nanswer for any task (even 'anonymous' users who are not logged in, are\nrecognised via their IP address).\n\nThis value, 30 answers, can be changed for each task without problems in\nthe task-redundancy section or using the API. If you want to improve the\nquality of the results for one task and get more confidence on the data\nwhen you will analyze it, you can specify it with the pbs command. For\nexample, in order to reduce the number of users that will analyze each\ntask to ten, run the following:\n\n``` {.sourceCode .bash}\npbs add_tasks --tasks-file file --redundancy 10\n\n\n\n\nIn this case the \nn_answers\n field will make task-scheduler to try\nand obtain 10 different answers from different users for each task in\nthe file.\n\n\nChanging the Priority of the tasks\n\n\nEvery task can have its own \npriority\n. The task-priority can be\nconfigured using the web interface, or the API.\n\n\nA task with a higher priority will be delivered first to the volunteers.\nHence if you have a project where you need to analyze a task first due\nto an external event (a new data sample has been obtained), then you can\nmodify the priority of the new created task and deliver it first.\n\n\nIf you have a new batch of tasks that need to be processed before all\nthe available ones, you can do it with pbs. Run the following command:\n\n\n``` {.sourceCode .bash}\npbs add_tasks \ntasks-file file \npriority 1\n\n\n\nThe priority is a number between 0.0 and 1.0. The highest priority is\n1.0 and the lowest is 0.0.\n\nPresenting the Tasks to the user\n--------------------------------\n\nIn order to present the tasks to the user, you have to create an HTML\ntemplate.\n\nThe template is the skeleton that will be used to load the data of the\ntasks: the question, the photos, user progress, input fields \n submit\nbuttons to solve the task.\n\nIn this tutorial, Flickr Person uses a basic HTML skeleton and the\n[PYBOSSA.JS](http://pybossajs.rtfd.org) library to load the data of the\ntasks into the HTML template, and take actions based on the users's\nanswers.\n\n\ndiv class=\nadmonition note\n\n\n\n/div\n\n\n\n When a task is submitted by an authenticated user, the task will save\n\n his user\\_id. For anonymous users the submitted task will only have\n\n the user IP address.\n\n### 1. The HTML Skeleton\n\nThe\n[file](https://github.com/Scifabric/app-flickrperson/blob/master/app-flickrperson/template.html)\n**template.html** has the skeleton to show the tasks. The file has three\nsections or \nlt;div\ngt;:\n\n\n -   **\nlt;div\ngt; for the warnings actions**. When the user saves an\n\n     answer, a success feedback message is shown to the user. There is\n\n     also an error one for the failures.\n\n -   **\nlt;div\ngt; for the Flickr image**. This div will be populated\n\n     with the task photo URL and LINK data.\n\n -   **\nlt;div\ngt; for the Questions \n Answer buttons**. There are\n\n     three buttons with the possible answers: *Yes*, *No*, and *I don't\n\n     know*.\n\nBy default, the PYBOSSA framework loads for every task the PYBOSSA.JS\nlibrary, so you don't have to include it in your template.\n\nAll you have to do is to add a script section where you will be loading\nthe tasks and saving the answers from the users:\n\nlt;script\ngt;\nlt;/script\ngt;.\n\nThis template file will be used by the pbs command line tool to add the\ntask presenter to the project. You can add it running the following\ncommand:\n\n``` {.sourceCode .bash}\npbs update_project\n\n\n\n\n\n\nYou can also edit the HTML skeleton using the web interface. Once the\n\n:   project has been created in PYBOSSA you will see a button that\n    allows you to edit the skeleton using a WYSIWYG editor.\n\n\n\n\n\nIn PYBOSSA every project has a \npresenter\n endpoint:\n\n\n\n\n\n\nhttp://PYBOSSA-SERVER/project/SLUG/newtask\n\n\n\n\n\n\n\n\nThe **slug** is the short name for the project, in this case\n**flickrperson**.\n\n\n\n\n\nLoading the above endpoint will load the skeleton and trigger the\nJavaScript functions to get a task from the PYBOSSA server and populate\nit in the HTML skeleton.\n\n\nThe header and footer for the presenter are already provided by PYBOSSA,\nso the template only has to define the structure to present the data\nfrom the tasks to the users and the action buttons, input methods, etc.\nto retrieve and save the answer from the volunteers.\n\n\n1.1. Flickr Person Skeleton\n\n\nIn the Flickr Person Finder demo we have a very simple DOM. At the\nbeginning you will find a big div that will be used to show some\nmessages to the user about the success of an action, for instance that\nan answer has been saved or that a new task is being loaded:\n\n\n``` {.sourceCode .html}\n\n\n  \n \n  \n\n    \n\n      \n\u00d7\n\n      \nWell done!\n Your answer has been saved\n    \n\n    \n\n      \n\u00d7\n\n      Loading next task\n\n    \n\n    \n\n      \nThe task has been completed!\n Thanks a lot!\n    \n\n    \n\n      \nCongratulations!\n You have participated in all available tasks!\n      \n\n      \n\n        \nGo back\n\n        \nor, Check other projects\n\n      \n\n    \n\n    \n\n      \n\u00d7\n\n      \nError!\n Something went wrong, please contact the site administrators\n    \n\n  \n \n\n\n \n\n\n\nThen we have the skeleton where we will be loading the Flickr photos,\nand the submission buttons for the user.\n\nFirst it creates a row that will have two columns (in Bootstrap a row\ncan have 12 columns), so we will populate a structure like this:\n\n``` {.sourceCode .html}\n\ndiv class=\nrow skeleton\n\n    \n!-- First column for showing the question, submission buttons and user\n    progress --\n\n    \ndiv class=\nspan6\n/div\n\n    \n!-- Second column for showing the Flickr photo --\n\n    \ndiv class=\nspan6\n/div\n\n\n/div\n\n\n\n\n\nThe content for the first column where we will be showing the question\nof the task, the submission buttons with the answers: yes, no, and I\ndon\nt know, and obviously the user progress for the user, so he can know\nhow many tasks he has completed and how many are left. The code is the\nfollowing:\n\n\n``` {.sourceCode .html}\n\n\n    \nQuestion\n \n\n    \n \n\n        \n\n        \n Yes\n\n        \n\n        \n No\n\n        \n\n        \n I don\nt know\n\n    \n\n    \n\n    \nYou are working now on task: \n#\n\n    \nYou have completed: \n tasks from\n    \n\n    \n\n    \n\n        \n\n    \n\n    \n\n    \n\n        \n Show comments\n\n        \n Hide comments\n\n    \n\n    \n\n    \n\n\n\n\n\nThen we will add the code for showing the photos. This second column\nwill be much simpler:\n\n``` {.sourceCode .html}\n\ndiv class=\nspan6\n!-- Start of Photo DIV (columnt) --\n\n    \na id=\nphoto-link\n href=\n#\n\n        \nimg id=\nphoto\n src=\nhttp://img339.imageshack.us/img339/9017/loadingo.png\n style=\nmax-width=100%\n\n    \n/a\n\n\n/div\n!-- End of Photo DIV (column) --\n\n\n\n\n\nIn the above code we use a place holder \nloadingo.png\n that we have\ncreated previously, so we show an image while the first one from the\ntask is getting loaded.\n\n\nThe second section of the skeleton, if we join the previous snippets of\ncode will be like this:\n\n\n``` {.sourceCode .html}\n\n \n\n    \n\n        \nQuestion\n \n\n        \n \n\n            \n\n            \n Yes\n\n            \n\n            \n No\n\n            \n\n            \n I don\nt know\n\n        \n\n        \n\n        \nYou are working now on task: \n#\n\n        \nYou have completed: \n tasks from\n        \n\n        \n\n        \n\n            \n\n        \n\n        \n\n        \n\n            \n Show comments\n\n            \n Hide comments\n\n        \n\n        \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\n### 2. Loading the Task data\n\nNow that we have set up the *skeleton* to load the task data, let's see\nwhat JavaScript should we write to populate with the pictures from\nFlickr and how we can grab the answer of the user and save it back in\nthe server.\n\nAll the action takes place in the\n[file](https://github.com/Scifabric/app-flickrperson/blob/master/app-flickrperson/template.html)\n**template.html** script section.\n\nThe script is very simple, it uses the [PYBOSSA.JS\nlibrary](http://pybossajs.rtfd.org) to get a new task and to submit and\nsave the answer in the server.\n\n[PYBOSSA.JS](http://pybossajs.rtfd.org) provides two methods that have\nto been overridden with some logic, as each project will have a\ndifferent need, i.e. some projects will be loading other type of data in\na different skeleton:\n\n\n -   pybossa.taskLoaded(function(task, deferred){});\n\n -   pybossa.presentTask(function(task, deferred){});\n\nThe **pybossa.taskLoaded** method will be in charge of adding new\n**\nlt;img/\ngt;** objects to the DOM once they have been loaded from\nFlickr (the URL is provided by the task object in the field\ntask.info.url\\_b), and resolve the deferred object, so another task for\nthe current user can be pre-loaded. The code is the following:\n\n``` {.sourceCode .js}\npybossa.taskLoaded(function(task, deferred) {\n    if ( !$.isEmptyObject(task) ) {\n        // load image from flickr\n        var img = $('\nimg /\n');\n        img.load(function() {\n            // continue as soon as the image is loaded\n            deferred.resolve(task);\n        });\n        img.attr('src', task.info.url_b).css('height', 460);\n        img.addClass('img-polaroid');\n        task.info.image = img;\n    }\n    else {\n        deferred.resolve(task);\n    }\n});\n\n\n\n\nThe \npybossa.presentTask\n method will be called when a task has been\nobtained from the server:\n\n\n``` {.sourceCode .js}\n{ question: project.description,\n  task: { \n          id: value,\n          \n,\n          info: { \n                  url_m: \n                  link:\n                 } \n        } \n}\n\n\n\nThat JSON object will be accessible via the task object passed as an\nargument to the pybossa.presentTask method. First we will need to check\nthat we are not getting an empty object, as it will mean that there are\nno more available tasks for the current user. In that case, we should\nhide the skeleton, and say thanks to the user as he has participated in\nall the tasks of the project.\n\nIf the task object is not empty, then we have task to load into the\n*skeleton*. In this demo project, we will basically updating the\nquestion, adding the photo to the DOM, updating the user progress and\nadd some actions to the submission buttons so we can save the answer of\nthe volunteer.\n\nThe PYBOSSA.JS library treats the user input as an \nasync function\n.\nThis is why the function gets a deferred object, as this object will be\n*resolved* when the user clicks in one of the possible answers. We use\nthis approach to load in the background the next task for the user while\nthe volunteer is solving the current one. Once the answer has been saved\nin the server, we resolve the deferred:\n\n``` {.sourceCode .javascript}\npybossa.presentTask(function(task, deferred) {\n    if ( !$.isEmptyObject(task) ) {\n        loadUserProgress();\n        $('#photo-link').html('').append(task.info.image);\n        $(\n#photo-link\n).attr(\nhref\n, task.info.link);\n        $(\n#question\n).html(task.info.question);\n        $('#task-id').html(task.id);\n        $('.btn-answer').off('click').on('click', function(evt) {\n            var answer = $(evt.target).attr(\nvalue\n);\n            if (typeof answer != 'undefined') {\n                //console.log(answer);\n                pybossa.saveTask(task.id, answer).done(function() {\n                    deferred.resolve();\n                });\n                $(\n#loading\n).fadeIn(500);\n                if ($(\n#disqus_thread\n).is(\n:visible\n)) {\n                    $('#disqus_thread').toggle();\n                    $('.btn-disqus').toggle();\n                }\n            }\n            else {\n                $(\n#error\n).show();\n            }\n        });\n        $(\n#loading\n).hide();\n    }\n    else {\n        $(\n.skeleton\n).hide();\n        $(\n#loading\n).hide();\n        $(\n#finish\n).fadeIn(500);\n    }\n});\n\n\n\n\nIt is important to note that in this method we bind the \non-click\n\naction for the \nYes\n, \nNo\n and \nI don\nt know\n buttons to call the above\nsnippet:\n\n\n``` {.sourceCode .javascript}\n$(\n.btn-answer\n).off(\nclick\n).on(\nclick\n, function(evt) {\n    var answer = $(evt.target).attr(\nvalue\n);\n    if (typeof answer != \nundefined\n) {\n        //console.log(answer);\n        pybossa.saveTask(task.id, answer).done(function() {\n            deferred.resolve();\n        });\n        $(\n#loading\n).fadeIn(500);\n        if ($(\n#disqus_thread\n).is(\n:visible\n)) {\n            $(\n#disqus_thread\n).toggle();\n            $(\n.btn-disqus\n).toggle();\n        }\n    }\n    else {\n        $(\n#error\n).show();\n    }\n});\n\n\n\nIf your project uses other input methods, you will have to adapt this to\nfit your project needs.\n\nFinally, the pybossa.presentTask calls a method named\n**loadUserProgress**. This method is in charge of getting the user\nprogress of the user and update the progress bar accordingly:\n\n``` {.sourceCode .javascript}\nfunction loadUserProgress() {\n    pybossa.userProgress('flickrperson').done(function(data){\n        var pct = Math.round((data.done*100)/data.total);\n        $(\n#progress\n).css(\nwidth\n, pct.toString() +\n%\n);\n        $(\n#progress\n).attr(\ntitle\n, pct.toString() + \n% completed!\n);\n        $(\n#progress\n).tooltip({'placement': 'left'}); \n        $(\n#total\n).text(data.total);\n        $(\n#done\n).text(data.done);\n    });\n}\n\n\n\n\nYou can update the code to only show the number of answers, or remove it\ncompletely, however the volunteers will benefit from this type of\ninformation as they will be able to know how many tasks they have to do,\ngiving an idea of progress while the contribute to the project.\n\n\nFinally, we only need in our code to tell pybossa.js to run our project:\n\n\n``` {.sourceCode .javascript}\npybossa.run(\nflickrperson\n)\n\n\n\n### 3. Saving the answer\n\nOnce the task has been presented, the users can click on the answer\nbuttons: **Yes**, **No** or **I don't know**.\n\n*Yes* and *No* save the answer in the DB (check **/api/taskrun**) with\ninformation about the task and the answer, while the button *I don't\nknow* simply loads another task as sometimes the image is not available\n(the Flickr user has delete it) or it is not clear if there is a human\nor not in the image (you only see one hand and nothing else).\n\nIn order to submit and save the answer from the user, we will use again\nthe [PYBOSSA.JS library](http://pybossajs.rtfd.org). In this case:\n\n``` {.sourceCode .javascript}\npybossa.saveTask( taskid, answer )\n\n\n\n\nThe \npybossa.saveTask\n method saves an answer for a given task. In the\nprevious section we show that in the pybossa.presentTask method the\n\ntask-id\n can be obtained, as we will be passing the object to saveTask\nmethod.\n\n\nThe method allows us to give a successful pop-up feedback for the user,\nso you can use the following structure to warn the user and tell him\nthat his answer has been successfully saved:\n\n\n``` {.sourceCode .javascript}\npybossa.saveTask( taskid, answer ).done(\n  function( data ) {\n      // Show the feedback div\n      $(\n#success\n).fadeIn(); \n      // Fade out the pop-up after a 1000 miliseconds\n      setTimeout(function() { $(\n#success\n).fadeOut() }, 1000);\n  };\n);\n\n\n\n### 4. Updating the template for all the tasks\n\nIt is possible to update the template of the project without having to\nre-create the project and its tasks. In order to update the template,\nyou only have to modify the file *template.html* and run the following\ncommand:\n\n``` {.sourceCode .bash}\npbs update_project\n\n\n\n\nYou can also use the web interface to do it, and see the changes in real\ntime before saving the results. Check your project page, go to the tasks\nsection, and look for the \nEdit the task presenter\n button.\n\n\n5. Test the task presenter\n\n\nIn order to test the project task presenter, go to the following URL:\n\n\nhttp://PYBOSSA-SERVER/project/SLUG/presenter\n\n\n\nThe presenter will load one task, and you will be able to submit and\nsave one answer for the current task.\n\n\nPublishing the project\n\n\nOnce everything is working, you will need to publish the project so\npeople can start contributing to it. Please, check the publishing\nsection for more details.\n\n\nCreating a tutorial for the users\n\n\nIn general, users will like to have some feedback when accessing for the\nvery first time your project. Usually, the overview page of your project\nwill not be enough, so you can actually build a tutorial (a web page)\nthat will explain to the volunteer how he can participate in the\nproject.\n\n\nPYBOSSA will detect if the user is accessing for the very first time\nyour project, so in that case, it will load the \ntutorial\n if your\nproject has one.\n\n\nAdding a tutorial is really simple: you only have to create a file named\n\ntutorial.html\n and load the content of the file using pbs:\n\n\n``` {.sourceCode .bash}\npbs update_project\n\n\n\nThe tutorial could have whatever you like: videos, nice animations, etc.\nPYBOSSA will render for you the header and the footer, so you only have\nto focus on the content. You can actually copy the template.html file\nand use it as a draft of your tutorial or just include a video of\nyourself explaining why your project is important and how, as a\nvolunteer, you can contribute.\n\nIf your project has a tutorial, you can actually access it directly in\nthis endpoint:\n\n    http://server/project/tutorial\n\nAdding an advance tutorial\n--------------------------\n\nWhile the previous solution works for most of the projects, your project\nmight need something special: visual clues so users can easily identify\nsounds, patterns, etc. easily. The default tutorial does not allow you\nto curate/create a list of helping materials that could be used directly\nin the presenter to explain how for example you can identify cancer\ncells, or specific species of animals.\n\nFor this reason PYBOSSA now suppports an API endpoint for helping\nmaterials: api/helpingmaterial\n\nThis endpoint allows you to add JSON and media files (images, videos or\nsounds) that you can use with your project to build an interactive\ntutorial.\n\nAs with any *api* PYBOSSA endpoint it follows the same rules. However,\nyou can use it for uploading images via the endpoint using the\nmultipart/form-data Content-Type.\n\nFor example, imagine that you want to add a photo of an animal and it's\ndescription, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):\n\n``` {.sourceCode .python}\nimport requests\nurl = 'https://server/api/helpingpoint?api_key=YOURKEY'\n# Upload a picture\nfiles = {'file': open('test.jpg', 'rb')}\ndata = {'project_id': YOURPROJECT_ID}\nr = requests.post(url, data=data, files=files)\n# Get the created helping material\nhp = r.json()\n# Add the meta-data of the picture\nurl = 'https://server/api/helpingpoint/%s?api_key=YOURKEY' % hp['id']\ninfo = {'popular_name': 'elephant', 'scientific_name': 'loxodonta'}\nr = requests.put(url, json={'info': info})\n\n\n\n\nYou can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.\n\n\nProviding some I18n support\n\n\nSometimes, you may want to give the users of your project a little help\nand present them the tutorial and tasks in their language. To allow\nthis, you can access their locale via Javascript in a very easy way, as\nwe\nve placed it in a hidden \ndiv\n node so you can access it just like\nthis:\n\n\n``` {.sourceCode .javascript}\nvar userLocale = document.getElementById(\nPYBOSSA_USER_LOCALE\n).textContent.trim();\n\n\n\nThe way you use it after that is up to you. But let's see an example of\nhow you can use it to make a tutorial that automatically shows the\nstrings in the locale of the user.\n\n\ndiv class=\nadmonition note\n\n\nAnonymous users will be only shown with **en** language by default. This\n\n:   feature only works for authenticated users that choose their own\n    locale in their account. You can however, load the translated\n    strings using the browser preferred language.\n\n\n/div\n\n\nFirst of all, check the *tutorial.html file*. You will see it consists\non some HTML plus some Javascript inside a \nlt;script\ngt; tag to handle\nthe different steps of the tutorial. Here you have a snippet of HTML\ntutorial file:\n\n``` {.sourceCode .html}\n\ndiv class=\nrow\n\n    \ndiv class=\ncol-md-12\n\n        \ndiv id=\nmodal\n class=\nmodal hide fade\n\n            \ndiv class=\nmodal-header\n\n                \nh3\nFlickr Person Finder tutorial\n/h3\n\n            \n/div\n\n            \ndiv id=\n0\n class=\nmodal-body\n style=\ndisplay:none\n\n                \np\nstrong\nHi!\n/strong\n This is a \nstrong\ndemo project\n/strong\n that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework in Crowdcrafting.org.\n               \n/p\n\n            \n/div\n\n            \ndiv id=\n1\n class=\nmodal-body\n style=\ndisplay:none\n\n                \np\nThe project is really simple. It loads a photo from \na href=\nhttp://flickr.com\nFlickr\n/a\n and asks you this question: \nstrong\nDo you see a human in this photo?\n/strong\n/p\n\n                \nimg src=\nhttp://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg\n class=\nimg-thumbnail\n/\n\n                \np\nYou will have 3 possible answers:\n                \nul\n\n                    \nli\nYes,\n/li\n\n                    \nli\nNo, and\n/li\n\n                    \nli\nI don't know\n/li\n\n                \n/ul\n\n                \n/p\n\n                \np\n\n                \n/p\n\n                \np\nAll you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems.\n/p\n\n            \n/div\n\n            \ndiv class=\nmodal-footer\n\n                \na id=\nprevBtn\n href=\n#\n onclick=\nshowStep('prev')\n class=\nbtn\nPrevious\n/a\n\n                \na id=\nnextBtn\n href=\n#\n onclick=\nshowStep('next')\n class=\nbtn btn-success\nNext\n/a\n\n                \na id=\nstartContrib\n href=\n../flickrperson/newtask\n class=\nbtn btn-primary\n style=\ndisplay:none\ni class=\nfa fa-thumbs-o-up\n/i\n Try the demo!\n/a\n\n            \n/div\n\n        \n/div\n\n    \n/div\n\n\n/div\n\n\n\n\n\nTo add multilingual support, copy and paste it is as many times as\nlanguages you\nre planning to support.\n\n\nThen, add to each of them an id in the most outer \ndiv\n which\ncorresponds to the abreviated name of the locale (\nen\n for English, \nes\n\nfor Spanish, etc.), and translate the inner text of it, but leave all\nthe HTML the same in every version (tags, ids, classes, etc.) like:\n\n\n``` {.sourceCode .html}\n\n\n   Your translated version of the HTML goes here, but only change the text,\n   NOT the HTML tags, IDs or classes.\n\n\n\n\nFinally, in the Javascript section of the tutorial, you will need to add\nsome extra code to enable multilingual tutorials. Thus, modify the\njavascript from:\n\n``` {.sourceCode .javascript}\nvar step = -1;\nfunction showStep(action) {\n    $(\n#\n + step).hide();\n    if (action == 'next') {\n        step = step + 1;\n    }\n    if (action == 'prev') {\n        step = step - 1;\n    }\n    if (step == 0) {\n        $(\n#prevBtn\n).hide();\n    }\n    else {\n        $(\n#prevBtn\n).show();\n    }\n\n    if (step == 1 ) {\n        $(\n#nextBtn\n).hide();\n        $(\n#startContrib\n).show();\n    }\n    $(\n#\n + step).show();\n}\n\nshowStep('next');\n$(\n#modal\n).modal('show');\n\n\n\n\nTo:\n\n\n``` {.sourceCode .javascript}\nvar languages = [\nen\n, \nes\n]\n$(document).ready(function(){\n    var userLocale = document.getElementById(\nPYBOSSA_USER_LOCALE\n).textContent.trim();\n    languages.forEach(function(lan){\n        if (lan !== userLocale) {\n            var node = document.getElementById(lan);\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    });\n    var step = -1;\n    function showStep(action) {\n        $(\n#\n + step).hide();\n        if (action == \nnext\n) {\n            step = step + 1;\n        }\n        if (action == \nprev\n) {\n            step = step - 1;\n        }\n        if (step == 0) {\n            $(\n#prevBtn\n).hide();\n        }\n        else {\n            $(\n#prevBtn\n).show();\n        }\n\n\n    if (step == 1 ) {\n        $(\"#nextBtn\").hide();\n        $(\"#startContrib\").show();\n    }\n    $(\"#\" + step).show();\n}\nshowStep('next');\n$(\"#modal\").modal('show');\n\n\n\n});\n\n\n\nNotice the languages array variable defined at the beggining?. It's\nimportant that you place there the ids you've given to the different\ntranslated versions of your HTML for the tutorial. The rest of the\nscript will only compare the locale of the user that is seeing the\ntutorial and delete all the HTML that is not in his language, so that\nonly the tutorial that fits his locale settings is shown.\n\n### Another method to support I18n\n\nAnother option for translating your project to different languages is\nusing a JSON object like this:\n\n``` {.sourceCode .javascript}\nmessages = {\nen\n: \n               {\nwelcome\n: \nHello World!,\n                \nbye\n: \nGood bye!\n\n               },\n            \nes:\n               {\nwelcome\n: \nHola mundo!\n,\n                \nbye\n: \nHasta luego!\n\n               }\n           }\n\n\n\n\nThis object can be placed in the \ntutorial.html\n or \ntemplate.html\n file\nto load the proper strings translated to your users.\n\n\nThe logic is very simple. With the following code you grab the language\nthat should be loaded for the current user:\n\n\n``` {.sourceCode .javascript}\nvar userLocale = document.getElementById(\nPYBOSSA_USER_LOCALE\n).textContent.trim();\n\n\n\nNow, use userLocale to load the strings. For example, for\n*template.html* and the Flickrperson demo project, you will find the\nfollowing code at the start of the script:\n\n``` {.sourceCode .javascript}\n// Default language\nvar userLocale = \nen\n;\n// Translations\nvar messages = {\nen\n: {\n                        \ni18n_welldone\n: \nWell done!\n,\n                        \ni18n_welldone_text\n: \nYour answer has been saved\n,\n                        \ni18n_loading_next_task\n: \nLoading next task...\n,\n                        \ni18n_task_completed\n: \nThe task has been completed!\n,\n                        \ni18n_thanks\n: \nThanks a lot!\n,\n                        \ni18n_congratulations\n: \nCongratulations\n,\n                        \ni18n_congratulations_text\n: \nYou have participated in all available tasks!\n,\n                        \ni18n_yes\n: \nYes\n,\n                        \ni18n_no_photo\n: \nNo photo\n,\n                        \ni18n_i_dont_know\n: \nI don't know\n,\n                        \ni18n_working_task\n: \nYou are working now on task:\n,\n                        \ni18n_tasks_completed\n: \nYou have completed:\n,\n                        \ni18n_tasks_from\n: \ntasks from\n,\n                        \ni18n_show_comments\n: \nShow comments:\n,\n                        \ni18n_hide_comments\n: \nHide comments:\n,\n                        \ni18n_question\n: \nDo you see a human face in this photo?\n,\n                      },\n                \nes\n: {\n                        \ni18n_welldone\n: \nBien hecho!\n,\n                        \ni18n_welldone_text\n: \nTu respuesta ha sido guardada\n,\n                        \ni18n_loading_next_task\n: \nCargando la siguiente tarea...\n,\n                        \ni18n_task_completed\n: \nLa tarea ha sido completadas!\n,\n                        \ni18n_thanks\n: \nMuch\u00edsimas gracias!\n,\n                        \ni18n_congratulations\n: \nEnhorabuena\n,\n                        \ni18n_congratulations_text\n: \nHas participado en todas las tareas disponibles!\n,\n                        \ni18n_yes\n: \nS\u00ed\n,\n                        \ni18n_no_photo\n: \nNo hay foto\n,\n                        \ni18n_i_dont_know\n: \nNo lo s\u00e9\n,\n                        \ni18n_working_task\n: \nEst\u00e1s trabajando en la tarea:\n,\n                        \ni18n_tasks_completed\n: \nHas completado:\n,\n                        \ni18n_tasks_from\n: \ntareas de\n,\n                        \ni18n_show_comments\n: \nMostrar comentarios\n,\n                        \ni18n_hide_comments\n: \nOcultar comentarios\n,\n                        \ni18n_question\n: \n\u00bfVes una cara humana en esta foto?\n,\n                      },\n               };\n// Update userLocale with server side information\n $(document).ready(function(){\n     userLocale = document.getElementById('PYBOSSA_USER_LOCALE').textContent.trim();\n\n});\n\nfunction i18n_translate() {\n    var ids = Object.keys(messages[userLocale])\n    for (i=0; i\nids.length; i++) {\n        console.log(\nTranslating: \n + ids[i]);\n        document.getElementById(ids[i]).innerHTML = messages[userLocale][ids[i]];\n    }\n}\n\n\n\n\nFirst, we define the default locale, \nen\n for English. Then, we create a\nmessages dictionary with all the ids that we want to translate. Finally,\nwe add the languages that we want to support.\n\n\n\n\nPYBOSSA will give you only the following 3 locale settings: \"en\", \"es\"\nand \"fr\" as PYBOSSA is only translated to those languages. If you want\nto add another language, please, help us to translate PYBOSSA (see\ntranslating).\n\n\n\n\n\nAs you can see, it\ns quite simple as you can share the messages object\nwith your volunteers, so you can get many more translations for your\nproject easily.\n\n\nFinally, we need to actually load those translated strings into the\ntemplate. For doing this step, all we\nve to do is adding the following\ncode to our \ntemplate.html\n file at the function pybossa.presentTask:\n\n\n``` {.sourceCode .javascript}\npybossa.presentTask(function(task, deferred) {\n    if ( !$.isEmptyObject(task) ) {\n        loadUserProgress();\n        i18n_translate();\n        \n\n\n\nDone! When the task is loaded, the strings are translated and the\nproject will be shown in the user language.\n\nProviding more details about the project\n----------------------------------------\n\nUp to now we have created the project, added some tasks, but the project\nstill lacks a lot of information. For example, a welcome page (or long\ndescription) of the project, so the users can know what this project is\nabout.\n\nIf you check the source code, you will see that there is a file named\n*long\\_description.md*. This file has a long description of the project,\nexplaining different aspects of it.\n\nThis information is not mandatory, however it will be very useful for\nthe users as they will get a bit more of information about the project\ngoals.\n\nThe file can be composed using Markdown or plain text.\n\nThe long description will be shown in the project home page:\n\n    http://crowdcrafting.org/project/flickrperson\n\nIf you want to modify the description you have two options, edit it via\nthe web interface, or modify locally the *long\\_description.md* file and\nrun pbs to update it:\n\n``` {.sourceCode .bash}\npbs update_project\n\n\n\n\nAdding an icon to the project\n\n\nIt is possible also to add a nice icon for the project. By default\nPYBOSSA will render a 100x100 pixels empty thumbnail for those projects\nthat do not provide it.\n\n\nIf you want to add an icon you can do it by using the web interface.\nJust go to the \nSettings\n tab within your project. There, select the\nimage file you want to use and push the \nUpload\n button. That\ns all!\n\n\nProtecting the project with a password\n\n\nIf, for any reason, you want to allow only certain people to contribute\nto your project, you can set a password. Thus, every time a user (either\nanonymous or authenticated) wants to contribute to the project, it will\nbe asked to introduce the password. The user will then be able to\ncontribute to the project for 30 minutes (this is a value by default,\ncan be changed in every PYBOSSA server). After this time, the user will\nbe asked again to introduce the password if wants to continue\ncontributing, and so on.\n\n\nCreating a blog for the project\n\n\nYou can share the progress of the project creating a blog. Every PYBOSSA\nproject includes a very simple blog where you will be able to write\nabout your project regularly.\n\n\nYou can use Markdown or plain text for the content of the posts. And you\nwill also be able to edit them or delete after creation if you want.\n\n\nTo write a post simply go to the project **Settings tab and there you\nwill find an option to write, read or delete your blog posts.\n\n\nExporting the obtained results\n\n\nYou can export all the available tasks and task runs for your project in\nthree different ways:\n\n\n\n\nJSON\n, an open standard designed\n    for human-readable data interchange, or\n\n\nCSV\n, a file\n    that stores tabular data (numbers and text) in plain-text form and\n    that can be opened with almost any spreadsheet software, or\n\n\nCKAN\n web server, a powerful data management\n    system that makes data accessible \u2013by providing tools to streamline\n    publishing, sharing, finding and using data.\n\n\n\n\nFor exporting the data, all you have to do is to visit the following URL\nin your web-browser:\n\n\nhttp://PYBOSSA-SERVER/project/slug/tasks/export\n\n\n\nYou will find a simple interface that will allow you to export the Tasks\nand Task Runs to \nJSON\n and\n\nCSV\n formats:\n\n\n| .. image:: \nhttp://i.imgur.com/m5gDyjU.png\n :width: 100% |\n\n\nThe previous methods will export all the tasks and task runs, \neven if\nthey are not completed\n. When a task has been completed, in other\nwords, when a task has collected the number of answers specified by the\ntask (\nn_answers\n = 30 by default), a \nbrown button\n with the text\n\nDownload results\n will pop up, and if you click it all the answers\nfor the given task will be shown in JSON format.\n\n\nYou can check which tasks are completed, going to the project URL:\n\n\nhttp://PYBOSSA-SERVER/project/slug\n\n\n\nAnd clicking in the \nTasks\n link in the \nleft local navigation\n, and\nthen click in the \nBrowse\n box:\n\n\n| .. image:: \nhttp://i.imgur.com/nauht7l.png\n :width: 100% |\n\n\nThen you will see which tasks are completed, and which ones you can\ndownload in \nJSON\n format:\n\n\n| .. image:: \nhttp://i.imgur.com/pf5O5Tr.png\n |\n\n\nYou could download the results also using the API. For example, you\ncould write a small script that gets the list of tasks that have been\ncompleted using this url:\n\n\nGET http://PYBOSSA-SERVER/api/task?state=completed\n\n\n\n\n\nIf your project has more than 20 tasks, then you will need to use the\n\n:   **offset** and **limit** parameters to get the next tasks, as by\n    default PYBOSSA API only returns the first 20 items.\n\n\n\n\n\nOnce you have obtained the list of completed tasks, your script could\nstart requesting the collected answers for the given tasks:\n\n\nGET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID\n\n\n\n\n\nIf your project is collecting more than 20 answers per task, then you\nwill need to use the **offset** and **limit** parameters to get the next\ntask runs, as by default PYBOSSA API only returns the first 20 items.\nThat way you will be able to get all the submitted answers by the\nvolunteers for the given task.\n\n\n\n\n\nExporting the task and task runs in JSON\n\n\nFor the \nJSON\n format, you will get\nall the output as a file that your browser will download, named:\nshort_name_tasks.json for the tasks, and short_name_task_runs.json\nfor the task runs.\n\n\nExporting the task and task runs to a CSV file\n\n\nWhile for the \nCSV\n\nformat, you will get a CSV file that will be automatically saved in your\ncomputer.\n\n\nExporting the task and task runs to a CKAN server\n\n\nIf the server has been configured to allow you to export your\naplication\ns data to a CKAN server (see config-ckan), the owner of the\nproject will see another box that will give you the option to export the\ndata to the CKAN server.\n\n\nIn order to use this method you will need to add the CKAN API-KEY\nassociated with your account, otherwise you will not be able to export\nthe data and a warning message will let you know it.\n\n\nAdding the CKAN API-KEY is really simple. You only need to create an\naccount in the supported CKAN server, check your profile and copy the\nAPI-KEY. Then, open your PYBOSSA account page, edit it and paste the key\nin the section \nExternal Services\n.\n\n\n| .. image:: \nhttp://i.imgur.com/xOezl6C.png\n |\n\n\nThen, you will be able to actually export the data to the CKAN server\nand host it there.\n\n\nPublishing results of your project\n\n\nSince v1.2.0, PYBOSSA automatically creates \nempty\n results when a task\nis completed.\n\n\nFor example, imagine your project is asking the following question in a\nset of images: \nDo you see a triangle in this picture?\n The possible\nanswers are: yes and no.\n\n\nYour project has configured the task redundancy to 5, so 5 people will\nanswer that question for a given image (or task). When the 5th person\nsends the answer, the server marks the task as completed, and it creates\na result for the given task associating the answers, the task and the\nproject:\n\n\n``` {.sourceCode .js}\n{\nid\n: 1,\n \nproject_id\n: 1,\n \ntask_id\n: 1,\n \ntask_run_ids\n: [1,2,3,4,5],\n \ninfo\n: null}\n\n\n\nAs in other PYBOSSA domain objects, a result has a JSON field named\n**info** that allows you to store the **final result** for that task\nusing the task\\_runs 1, 2, 3, 4, 5. Imagine that the five volunteers\nanswered: yes, then as you are the project owner you could update the\ninfo field with that value:\n\n``` {.sourceCode .js}\n{\nid\n: 1,\n \nproject_id\n: 1,\n \ntask_id\n: 1,\n \ntask_run_ids\n: [1,2,3,4,5],\n \ninfo\n: {\ntriangle\n: \nyes\n}}\n\n\n\n\nThe benefit of storing that information is that you can access these\ndata via the PYBOSSA API so you will be able to show the results, in\nyour result project section using the API.\n\n\nThis will allow you to build beautiful visualizations of your results on\nmaps, webgl, etc.\n\n\nRight now this new feature is evolving, so please contact us if you need\nhelp. We\nll provide result templates soon for our own basic templates.\n\n\nKeeping track of the time spent by volunteers\n\n\nSince v1.1.3, PYBOSSA records a timestamp, for every task run, of the\ninstant a volunteer requests a task to contribute to it. This is stored\nin the \ncreated\n attribute of the Task Runs.\n\n\nThis allows, together with the \nfinish_time\n attribute, to know how\nmuch time the volunteer has spent completing the task: (time spent =\nfinish_time - created)", 
            "title": "Tutorial"
        }, 
        {
            "location": "/user/tutorial/#project-tutorial", 
            "text": "This tutorial is based in the demo project  Flickr Person  ( source\ncode ) provided with\nPYBOSSA. This demo project is a simple microtasking project where users\nhave to answer the following question:  Do you see a human face in this\nphoto?  The possible answers are:  Yes, No  and  I don t know .  The demo project Flickr Person has two main components:    The task-creator a Python script that creates the tasks in\n    PYBOSSA, and  the task-presenter: an HTML + Javascript structure that will show\n    the tasks to the users and save their answers.    This tutorial uses the PYBOSSA pbs command line tool.", 
            "title": "Project Tutorial"
        }, 
        {
            "location": "/user/tutorial/#setting-things-up", 
            "text": "In order to run the tutorial, you will need to create an account in a\nPYBOSSA server. The PYBOSSA server could be running in your computer or\nin a third party server.  \n\nYou can use   for testing.  When you create an account, you will have access to your profile by\nclicking on your name, and then in the  My Settings  option.  Then, you will be able to copy the  API-KEY that has been generated for\nyou  | .. image::  http://i.imgur.com/JcxciZc.png  |  This  API-KEY  allows you to create the project in PYBOSSA (only\nauthenticated users can create projects and tasks, while everyone can\ncollaborate solving the tasks).  \n\nThe Flickr Person Finder demo project uses pbs\n\n:   that need to be installed in your system before proceeding. For this\n    reason, we recommend you to configure a\n    [virtualenv](http://pypi.python.org/pypi/virtualenv) for the project\n    as it will create an isolated Python environment in a folder,\n    helping you to manage different dependencies and versions without\n    having to deal with root permissions in your computer.\n\n[virtualenv](http://pypi.python.org/pypi/virtualenv) creates an\nenvironment that has its own installation directories, that doesn't\nshare libraries with other virtualenv environments (and optionally\ndoesn't access the globally installed libraries either).\n\nYou can install the software if you want at the system level if you have\nroot privileges, however this may lead to broken dependencies in the OS\nfor all your Python packages, so if possible, use only the\n[virtualenv](http://pypi.python.org/pypi/virtualenv) solution.  \n\nFlickr Person Finder uses the **pbs** command line tool which simplifies\na lot accessing the PYBOSSA API endpoints. Therefore, you will need to\ninstall the *pybossa-pbs* with [pip --a python installer\npackager](http://pypi.python.org/pypi/pip):\n\n    $ pip install pybossa-pbs  \n\nIf you need to install **pip** in your system, check [the official\ndocumentation.](http://www.pip-installer.org/en/latest/installing.html)", 
            "title": "Setting Things Up"
        }, 
        {
            "location": "/user/tutorial/#creating-the-project", 
            "text": "There are two possible methos for creating a project:    web-interface: click in your user name, and you will see a section\n    named  projects  list. In that section you will be able to\n    create a project using the web interface.  api-interface: using the  pbs  command line tool.    For this tutorial we are going to use the second option, the ../api via\nthe PYBOSSA pbs command line tool for interacting with the API.  For creating the project, you will need to parameters    the URL of the PYBOSSA server, and  an API-KEY to authenticate you in the PYBOSSA server.    The following section gives more details about how to use the script.  \n\nIf you are running a PYBOSSA server locally, you can omit the URL parameter\n\n:   as by default it uses the URL", 
            "title": "Creating the Project"
        }, 
        {
            "location": "/user/tutorial/#cloning-the-flickr-person-finder-source-code", 
            "text": "In order to follow the tutorial, you will need to clone the  Flickr\nPerson Finder public Github\nRepository  so you will\nhave a local copy of the required files to create the project and tasks\nusing the API.   If you are new to Github and the GIT software, we recommend you to take\nthis  free and on-line course  (it will take you\nonly 15 minutes!) where you will learn the basics, which are the main\nconcepts that you will need for cloning the demo project repository.  If you prefer to skip the course and take it in a later stage, the\ncommands that you need to clone the repository are:  ``` {.sourceCode .bash}\ngit clone git://github.com/Scifabric/app-flickrperson.git  \nAfter running that command a new folder named **app-flickrperson** will\nbe created from where you run the command.\n\nConfiguring the name, short name, thumbnail, etc.\n-------------------------------------------------\n\nThe Flickr Person Finder provides a file called:\n[project.json](https://github.com/Scifabric/app-flickrperson/blob/master/project.json)\nthat has the following content:\n\n``` {.sourceCode .js}\n{\n     name :  Flickr Person Finder ,\n     short_name :  flickrperson ,\n     description :  Image pattern recognition ,\n}  You will need to modify the  name  and  short_name  fields in order\nto create a project in crowdcrafting.org, as there is already a project\nregistered with those values. Otherwise, you can keep the same values.  \n\nThe **name** and **short\\_name** of the project **must be unique**!\nOtherwise you will get an error (IntegrityError) when creating the\nproject.  You can re-use the other fields if you want.  Description  will be the\ntext shown in the project listing page. It s important that you try to\nhave a short description that explains what your project does.  Now that we have the  project.json  file ready, we can create the\nproject:  ``` {.sourceCode .bash}\npbs  server server  apikey key create_project  \nThis command will read the values in the file **project.json** and it\nwill use them to create an empty project in the PYBOSSA server of your\nchoice. div class= admonition note \n\nYou can save some typing if you create a config file for pbs. Please,\ncheck the pbs page for more details. /div \n\nIf you want to check if the project exists, just open your web browser,\nand type in the folling URL:\n\n    http://server/project/short_name\n\nWhere **short\\_name** is the value of the key with the same name in the\nfile: **project.json**. You sould get a project page, with not so much\ninformation, as we only have created it. Let's add some tasks to the\nproject.\n\nAdding tasks to the project\n---------------------------\n\nNow that we have the project created, we can add some tasks to our\nproject. PYBOSSA will deliver the tasks for the users (authenticated and\nanonymous ones) and store the submitted answers in the PYBOSSA data\nbase, so you can process them in a later stage.\n\nA PYBOSSA task is a JSON object with the information that needs to be\nprocessed by the volunteers. Usually it will be a link to a media file\n(image, video, sound clip, PDF file, etc.) that needs to be processed.\n\nWhile PYBOSSA internally uses JSON for storing the data, you can add\ntasks to your project using two different formats:\n\n    * CSV: a comma separated spreadsheet\n    * JSON: a lightweight data-interchange format.\n\nThe demo project comes with a CSV sample file, that has the following\nstructure:\n\n    question, url_m, link, url_b\n    Do you see a human face in this photo?, http://srv/img_m.jpg, http://srv/img, http://srv/img_b.jp\n\nAdditionally there is a script named: **get\\_images.py** that will\ncontact Flickr, get the latest published photos to this web service, and\nsave them in JSON format as a file (flickr\\_tasks.json), with the same\nstructure as the CSV file (the keys are the same):\n\n``` {.sourceCode .js}\n{ 'link': 'http://www.flickr.com/photos/teleyinex/2945647308/',\n  'url_m': 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg', \n  'url_b': 'http://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg' }  \n\nFlickr creates from the original image different cropped versions of the\nimage. It uses a pattern to distinguish them: **\\_m** for medium size,\nand **\\_b** for the big ones. There are more options, so if you need\nmore help in this matter, check the official [Flickr\ndocumentation](http://www.flickr.com/services/api/).  All those keys will be saved into the task field  info  of the task\nmodel.  \n\nFrom now own, the tutorial assumes that you have configured your pbs\n\n:   installation with a .pybossa.cfg file. Please, see pbs for more\n    information.  As we have a CSV file with some tasks, let s use it for adding some\ntasks to our project. For adding tasks in CSV format all you have to do\nis the following:  ``` {.sourceCode .bash}\npbs add_tasks  tasks-file flickr_tasks.csv  \nAfter running this program, you will see a progress bar that will let\nyou know when all the tasks will be added to your project.\n\nFinally, we'll also add some tasks in JSON format using the\n**get\\_images.py** script, that will generate for us the\n**flickr\\_tasks.json** file with the last 20 published photos in Flickr.\nFirst, we need to create the tasks file:\n\n``` {.sourceCode .bash}\npython get_images.py  This will create the file:  flickr_tasks.json . Now, let s add them\nto our project:  ``` {.sourceCode .bash}\npbs add_tasks  tasks-file flickr_tasks.json  \nDone! Again, a progress bar will show us how long it takes to add all\nthe tasks. Once it's completed, we can actually move to the next step on\nthe tutorial: presenting the tasks to the volunteers. div class= admonition note \n\nYou can check all the available options for the command line with the\n\n:   **--help** argument. /div \n\nIf something goes wrong, you should an error message similar to the\nfollowing one:\n\n    ERROR:root:pbclient.create_project\n    {\n         action :  POST ,\n         exception_cls :  IntegrityError ,\n         exception_msg :  (IntegrityError) duplicate key value violates unique constraint \\ project_name_key\\ \\nDETAIL:  Key (name)=(Flickr Person Finder) already exists.\\n ,\n         status :  failed ,\n         status_code : 415,\n         target :  project \n    }\n\nThe error message will have the information regarding the problems it\nhas found when using the API. div class= admonition note \n\nSince version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed\n\n:   the number of allowed requests, getting a 429 error. Please see\n    rate-limiting section. /div \n\nNumber of answers or task runs per task\n---------------------------------------\n\nPYBOSSA by default will send a task to different users (authenticated\nand anonymous users) until 30 different task runs are obtained for each\ntask.\n\ntask-scheduler does not allow the same user to submit more than one\nanswer for any task (even 'anonymous' users who are not logged in, are\nrecognised via their IP address).\n\nThis value, 30 answers, can be changed for each task without problems in\nthe task-redundancy section or using the API. If you want to improve the\nquality of the results for one task and get more confidence on the data\nwhen you will analyze it, you can specify it with the pbs command. For\nexample, in order to reduce the number of users that will analyze each\ntask to ten, run the following:\n\n``` {.sourceCode .bash}\npbs add_tasks --tasks-file file --redundancy 10  In this case the  n_answers  field will make task-scheduler to try\nand obtain 10 different answers from different users for each task in\nthe file.", 
            "title": "Cloning the Flickr Person Finder source code"
        }, 
        {
            "location": "/user/tutorial/#changing-the-priority-of-the-tasks", 
            "text": "Every task can have its own  priority . The task-priority can be\nconfigured using the web interface, or the API.  A task with a higher priority will be delivered first to the volunteers.\nHence if you have a project where you need to analyze a task first due\nto an external event (a new data sample has been obtained), then you can\nmodify the priority of the new created task and deliver it first.  If you have a new batch of tasks that need to be processed before all\nthe available ones, you can do it with pbs. Run the following command:  ``` {.sourceCode .bash}\npbs add_tasks  tasks-file file  priority 1  \nThe priority is a number between 0.0 and 1.0. The highest priority is\n1.0 and the lowest is 0.0.\n\nPresenting the Tasks to the user\n--------------------------------\n\nIn order to present the tasks to the user, you have to create an HTML\ntemplate.\n\nThe template is the skeleton that will be used to load the data of the\ntasks: the question, the photos, user progress, input fields   submit\nbuttons to solve the task.\n\nIn this tutorial, Flickr Person uses a basic HTML skeleton and the\n[PYBOSSA.JS](http://pybossajs.rtfd.org) library to load the data of the\ntasks into the HTML template, and take actions based on the users's\nanswers. div class= admonition note  /div   When a task is submitted by an authenticated user, the task will save  his user\\_id. For anonymous users the submitted task will only have  the user IP address.\n\n### 1. The HTML Skeleton\n\nThe\n[file](https://github.com/Scifabric/app-flickrperson/blob/master/app-flickrperson/template.html)\n**template.html** has the skeleton to show the tasks. The file has three\nsections or  lt;div gt;:  -   ** lt;div gt; for the warnings actions**. When the user saves an      answer, a success feedback message is shown to the user. There is      also an error one for the failures.  -   ** lt;div gt; for the Flickr image**. This div will be populated      with the task photo URL and LINK data.  -   ** lt;div gt; for the Questions   Answer buttons**. There are      three buttons with the possible answers: *Yes*, *No*, and *I don't      know*.\n\nBy default, the PYBOSSA framework loads for every task the PYBOSSA.JS\nlibrary, so you don't have to include it in your template.\n\nAll you have to do is to add a script section where you will be loading\nthe tasks and saving the answers from the users: lt;script gt; lt;/script gt;.\n\nThis template file will be used by the pbs command line tool to add the\ntask presenter to the project. You can add it running the following\ncommand:\n\n``` {.sourceCode .bash}\npbs update_project  \n\nYou can also edit the HTML skeleton using the web interface. Once the\n\n:   project has been created in PYBOSSA you will see a button that\n    allows you to edit the skeleton using a WYSIWYG editor.  In PYBOSSA every project has a  presenter  endpoint:    http://PYBOSSA-SERVER/project/SLUG/newtask    \n\nThe **slug** is the short name for the project, in this case\n**flickrperson**.  Loading the above endpoint will load the skeleton and trigger the\nJavaScript functions to get a task from the PYBOSSA server and populate\nit in the HTML skeleton.  The header and footer for the presenter are already provided by PYBOSSA,\nso the template only has to define the structure to present the data\nfrom the tasks to the users and the action buttons, input methods, etc.\nto retrieve and save the answer from the volunteers.", 
            "title": "Changing the Priority of the tasks"
        }, 
        {
            "location": "/user/tutorial/#11-flickr-person-skeleton", 
            "text": "In the Flickr Person Finder demo we have a very simple DOM. At the\nbeginning you will find a big div that will be used to show some\nmessages to the user about the success of an action, for instance that\nan answer has been saved or that a new task is being loaded:  ``` {.sourceCode .html} \n    \n   \n     \n       \u00d7 \n       Well done!  Your answer has been saved\n     \n     \n       \u00d7 \n      Loading next task \n     \n     \n       The task has been completed!  Thanks a lot!\n     \n     \n       Congratulations!  You have participated in all available tasks!\n       \n       \n         Go back \n         or, Check other projects \n       \n     \n     \n       \u00d7 \n       Error!  Something went wrong, please contact the site administrators\n     \n         \nThen we have the skeleton where we will be loading the Flickr photos,\nand the submission buttons for the user.\n\nFirst it creates a row that will have two columns (in Bootstrap a row\ncan have 12 columns), so we will populate a structure like this:\n\n``` {.sourceCode .html} div class= row skeleton \n     !-- First column for showing the question, submission buttons and user\n    progress -- \n     div class= span6 /div \n     !-- Second column for showing the Flickr photo -- \n     div class= span6 /div  /div   The content for the first column where we will be showing the question\nof the task, the submission buttons with the answers: yes, no, and I\ndon t know, and obviously the user progress for the user, so he can know\nhow many tasks he has completed and how many are left. The code is the\nfollowing:  ``` {.sourceCode .html}", 
            "title": "1.1. Flickr Person Skeleton"
        }, 
        {
            "location": "/user/tutorial/#5-test-the-task-presenter", 
            "text": "In order to test the project task presenter, go to the following URL:  http://PYBOSSA-SERVER/project/SLUG/presenter  The presenter will load one task, and you will be able to submit and\nsave one answer for the current task.", 
            "title": "5. Test the task presenter"
        }, 
        {
            "location": "/user/tutorial/#publishing-the-project", 
            "text": "Once everything is working, you will need to publish the project so\npeople can start contributing to it. Please, check the publishing\nsection for more details.", 
            "title": "Publishing the project"
        }, 
        {
            "location": "/user/tutorial/#creating-a-tutorial-for-the-users", 
            "text": "In general, users will like to have some feedback when accessing for the\nvery first time your project. Usually, the overview page of your project\nwill not be enough, so you can actually build a tutorial (a web page)\nthat will explain to the volunteer how he can participate in the\nproject.  PYBOSSA will detect if the user is accessing for the very first time\nyour project, so in that case, it will load the  tutorial  if your\nproject has one.  Adding a tutorial is really simple: you only have to create a file named tutorial.html  and load the content of the file using pbs:  ``` {.sourceCode .bash}\npbs update_project  \nThe tutorial could have whatever you like: videos, nice animations, etc.\nPYBOSSA will render for you the header and the footer, so you only have\nto focus on the content. You can actually copy the template.html file\nand use it as a draft of your tutorial or just include a video of\nyourself explaining why your project is important and how, as a\nvolunteer, you can contribute.\n\nIf your project has a tutorial, you can actually access it directly in\nthis endpoint:\n\n    http://server/project/tutorial\n\nAdding an advance tutorial\n--------------------------\n\nWhile the previous solution works for most of the projects, your project\nmight need something special: visual clues so users can easily identify\nsounds, patterns, etc. easily. The default tutorial does not allow you\nto curate/create a list of helping materials that could be used directly\nin the presenter to explain how for example you can identify cancer\ncells, or specific species of animals.\n\nFor this reason PYBOSSA now suppports an API endpoint for helping\nmaterials: api/helpingmaterial\n\nThis endpoint allows you to add JSON and media files (images, videos or\nsounds) that you can use with your project to build an interactive\ntutorial.\n\nAs with any *api* PYBOSSA endpoint it follows the same rules. However,\nyou can use it for uploading images via the endpoint using the\nmultipart/form-data Content-Type.\n\nFor example, imagine that you want to add a photo of an animal and it's\ndescription, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):\n\n``` {.sourceCode .python}\nimport requests\nurl = 'https://server/api/helpingpoint?api_key=YOURKEY'\n# Upload a picture\nfiles = {'file': open('test.jpg', 'rb')}\ndata = {'project_id': YOURPROJECT_ID}\nr = requests.post(url, data=data, files=files)\n# Get the created helping material\nhp = r.json()\n# Add the meta-data of the picture\nurl = 'https://server/api/helpingpoint/%s?api_key=YOURKEY' % hp['id']\ninfo = {'popular_name': 'elephant', 'scientific_name': 'loxodonta'}\nr = requests.put(url, json={'info': info})  You can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.", 
            "title": "Creating a tutorial for the users"
        }, 
        {
            "location": "/user/tutorial/#providing-some-i18n-support", 
            "text": "Sometimes, you may want to give the users of your project a little help\nand present them the tutorial and tasks in their language. To allow\nthis, you can access their locale via Javascript in a very easy way, as\nwe ve placed it in a hidden  div  node so you can access it just like\nthis:  ``` {.sourceCode .javascript}\nvar userLocale = document.getElementById( PYBOSSA_USER_LOCALE ).textContent.trim();  \nThe way you use it after that is up to you. But let's see an example of\nhow you can use it to make a tutorial that automatically shows the\nstrings in the locale of the user. div class= admonition note \n\nAnonymous users will be only shown with **en** language by default. This\n\n:   feature only works for authenticated users that choose their own\n    locale in their account. You can however, load the translated\n    strings using the browser preferred language. /div \n\nFirst of all, check the *tutorial.html file*. You will see it consists\non some HTML plus some Javascript inside a  lt;script gt; tag to handle\nthe different steps of the tutorial. Here you have a snippet of HTML\ntutorial file:\n\n``` {.sourceCode .html} div class= row \n     div class= col-md-12 \n         div id= modal  class= modal hide fade \n             div class= modal-header \n                 h3 Flickr Person Finder tutorial /h3 \n             /div \n             div id= 0  class= modal-body  style= display:none \n                 p strong Hi! /strong  This is a  strong demo project /strong  that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework in Crowdcrafting.org.\n                /p \n             /div \n             div id= 1  class= modal-body  style= display:none \n                 p The project is really simple. It loads a photo from  a href= http://flickr.com Flickr /a  and asks you this question:  strong Do you see a human in this photo? /strong /p \n                 img src= http://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg  class= img-thumbnail / \n                 p You will have 3 possible answers:\n                 ul \n                     li Yes, /li \n                     li No, and /li \n                     li I don't know /li \n                 /ul \n                 /p \n                 p \n                 /p \n                 p All you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems. /p \n             /div \n             div class= modal-footer \n                 a id= prevBtn  href= #  onclick= showStep('prev')  class= btn Previous /a \n                 a id= nextBtn  href= #  onclick= showStep('next')  class= btn btn-success Next /a \n                 a id= startContrib  href= ../flickrperson/newtask  class= btn btn-primary  style= display:none i class= fa fa-thumbs-o-up /i  Try the demo! /a \n             /div \n         /div \n     /div  /div   To add multilingual support, copy and paste it is as many times as\nlanguages you re planning to support.  Then, add to each of them an id in the most outer  div  which\ncorresponds to the abreviated name of the locale ( en  for English,  es \nfor Spanish, etc.), and translate the inner text of it, but leave all\nthe HTML the same in every version (tags, ids, classes, etc.) like:  ``` {.sourceCode .html} \n   Your translated version of the HTML goes here, but only change the text,\n   NOT the HTML tags, IDs or classes.  \nFinally, in the Javascript section of the tutorial, you will need to add\nsome extra code to enable multilingual tutorials. Thus, modify the\njavascript from:\n\n``` {.sourceCode .javascript}\nvar step = -1;\nfunction showStep(action) {\n    $( #  + step).hide();\n    if (action == 'next') {\n        step = step + 1;\n    }\n    if (action == 'prev') {\n        step = step - 1;\n    }\n    if (step == 0) {\n        $( #prevBtn ).hide();\n    }\n    else {\n        $( #prevBtn ).show();\n    }\n\n    if (step == 1 ) {\n        $( #nextBtn ).hide();\n        $( #startContrib ).show();\n    }\n    $( #  + step).show();\n}\n\nshowStep('next');\n$( #modal ).modal('show');  To:  ``` {.sourceCode .javascript}\nvar languages = [ en ,  es ]\n$(document).ready(function(){\n    var userLocale = document.getElementById( PYBOSSA_USER_LOCALE ).textContent.trim();\n    languages.forEach(function(lan){\n        if (lan !== userLocale) {\n            var node = document.getElementById(lan);\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    });\n    var step = -1;\n    function showStep(action) {\n        $( #  + step).hide();\n        if (action ==  next ) {\n            step = step + 1;\n        }\n        if (action ==  prev ) {\n            step = step - 1;\n        }\n        if (step == 0) {\n            $( #prevBtn ).hide();\n        }\n        else {\n            $( #prevBtn ).show();\n        }      if (step == 1 ) {\n        $(\"#nextBtn\").hide();\n        $(\"#startContrib\").show();\n    }\n    $(\"#\" + step).show();\n}\nshowStep('next');\n$(\"#modal\").modal('show');  });  \nNotice the languages array variable defined at the beggining?. It's\nimportant that you place there the ids you've given to the different\ntranslated versions of your HTML for the tutorial. The rest of the\nscript will only compare the locale of the user that is seeing the\ntutorial and delete all the HTML that is not in his language, so that\nonly the tutorial that fits his locale settings is shown.\n\n### Another method to support I18n\n\nAnother option for translating your project to different languages is\nusing a JSON object like this:\n\n``` {.sourceCode .javascript}\nmessages = { en : \n               { welcome :  Hello World!,\n                 bye :  Good bye! \n               },\n             es:\n               { welcome :  Hola mundo! ,\n                 bye :  Hasta luego! \n               }\n           }  This object can be placed in the  tutorial.html  or  template.html  file\nto load the proper strings translated to your users.  The logic is very simple. With the following code you grab the language\nthat should be loaded for the current user:  ``` {.sourceCode .javascript}\nvar userLocale = document.getElementById( PYBOSSA_USER_LOCALE ).textContent.trim();  \nNow, use userLocale to load the strings. For example, for\n*template.html* and the Flickrperson demo project, you will find the\nfollowing code at the start of the script:\n\n``` {.sourceCode .javascript}\n// Default language\nvar userLocale =  en ;\n// Translations\nvar messages = { en : {\n                         i18n_welldone :  Well done! ,\n                         i18n_welldone_text :  Your answer has been saved ,\n                         i18n_loading_next_task :  Loading next task... ,\n                         i18n_task_completed :  The task has been completed! ,\n                         i18n_thanks :  Thanks a lot! ,\n                         i18n_congratulations :  Congratulations ,\n                         i18n_congratulations_text :  You have participated in all available tasks! ,\n                         i18n_yes :  Yes ,\n                         i18n_no_photo :  No photo ,\n                         i18n_i_dont_know :  I don't know ,\n                         i18n_working_task :  You are working now on task: ,\n                         i18n_tasks_completed :  You have completed: ,\n                         i18n_tasks_from :  tasks from ,\n                         i18n_show_comments :  Show comments: ,\n                         i18n_hide_comments :  Hide comments: ,\n                         i18n_question :  Do you see a human face in this photo? ,\n                      },\n                 es : {\n                         i18n_welldone :  Bien hecho! ,\n                         i18n_welldone_text :  Tu respuesta ha sido guardada ,\n                         i18n_loading_next_task :  Cargando la siguiente tarea... ,\n                         i18n_task_completed :  La tarea ha sido completadas! ,\n                         i18n_thanks :  Much\u00edsimas gracias! ,\n                         i18n_congratulations :  Enhorabuena ,\n                         i18n_congratulations_text :  Has participado en todas las tareas disponibles! ,\n                         i18n_yes :  S\u00ed ,\n                         i18n_no_photo :  No hay foto ,\n                         i18n_i_dont_know :  No lo s\u00e9 ,\n                         i18n_working_task :  Est\u00e1s trabajando en la tarea: ,\n                         i18n_tasks_completed :  Has completado: ,\n                         i18n_tasks_from :  tareas de ,\n                         i18n_show_comments :  Mostrar comentarios ,\n                         i18n_hide_comments :  Ocultar comentarios ,\n                         i18n_question :  \u00bfVes una cara humana en esta foto? ,\n                      },\n               };\n// Update userLocale with server side information\n $(document).ready(function(){\n     userLocale = document.getElementById('PYBOSSA_USER_LOCALE').textContent.trim();\n\n});\n\nfunction i18n_translate() {\n    var ids = Object.keys(messages[userLocale])\n    for (i=0; i ids.length; i++) {\n        console.log( Translating:   + ids[i]);\n        document.getElementById(ids[i]).innerHTML = messages[userLocale][ids[i]];\n    }\n}  First, we define the default locale,  en  for English. Then, we create a\nmessages dictionary with all the ids that we want to translate. Finally,\nwe add the languages that we want to support.  \n\nPYBOSSA will give you only the following 3 locale settings: \"en\", \"es\"\nand \"fr\" as PYBOSSA is only translated to those languages. If you want\nto add another language, please, help us to translate PYBOSSA (see\ntranslating).  As you can see, it s quite simple as you can share the messages object\nwith your volunteers, so you can get many more translations for your\nproject easily.  Finally, we need to actually load those translated strings into the\ntemplate. For doing this step, all we ve to do is adding the following\ncode to our  template.html  file at the function pybossa.presentTask:  ``` {.sourceCode .javascript}\npybossa.presentTask(function(task, deferred) {\n    if ( !$.isEmptyObject(task) ) {\n        loadUserProgress();\n        i18n_translate();\n          \nDone! When the task is loaded, the strings are translated and the\nproject will be shown in the user language.\n\nProviding more details about the project\n----------------------------------------\n\nUp to now we have created the project, added some tasks, but the project\nstill lacks a lot of information. For example, a welcome page (or long\ndescription) of the project, so the users can know what this project is\nabout.\n\nIf you check the source code, you will see that there is a file named\n*long\\_description.md*. This file has a long description of the project,\nexplaining different aspects of it.\n\nThis information is not mandatory, however it will be very useful for\nthe users as they will get a bit more of information about the project\ngoals.\n\nThe file can be composed using Markdown or plain text.\n\nThe long description will be shown in the project home page:\n\n    http://crowdcrafting.org/project/flickrperson\n\nIf you want to modify the description you have two options, edit it via\nthe web interface, or modify locally the *long\\_description.md* file and\nrun pbs to update it:\n\n``` {.sourceCode .bash}\npbs update_project", 
            "title": "Providing some I18n support"
        }, 
        {
            "location": "/user/tutorial/#adding-an-icon-to-the-project", 
            "text": "It is possible also to add a nice icon for the project. By default\nPYBOSSA will render a 100x100 pixels empty thumbnail for those projects\nthat do not provide it.  If you want to add an icon you can do it by using the web interface.\nJust go to the  Settings  tab within your project. There, select the\nimage file you want to use and push the  Upload  button. That s all!", 
            "title": "Adding an icon to the project"
        }, 
        {
            "location": "/user/tutorial/#protecting-the-project-with-a-password", 
            "text": "If, for any reason, you want to allow only certain people to contribute\nto your project, you can set a password. Thus, every time a user (either\nanonymous or authenticated) wants to contribute to the project, it will\nbe asked to introduce the password. The user will then be able to\ncontribute to the project for 30 minutes (this is a value by default,\ncan be changed in every PYBOSSA server). After this time, the user will\nbe asked again to introduce the password if wants to continue\ncontributing, and so on.", 
            "title": "Protecting the project with a password"
        }, 
        {
            "location": "/user/tutorial/#creating-a-blog-for-the-project", 
            "text": "You can share the progress of the project creating a blog. Every PYBOSSA\nproject includes a very simple blog where you will be able to write\nabout your project regularly.  You can use Markdown or plain text for the content of the posts. And you\nwill also be able to edit them or delete after creation if you want.  To write a post simply go to the project **Settings tab and there you\nwill find an option to write, read or delete your blog posts.", 
            "title": "Creating a blog for the project"
        }, 
        {
            "location": "/user/tutorial/#exporting-the-obtained-results", 
            "text": "You can export all the available tasks and task runs for your project in\nthree different ways:   JSON , an open standard designed\n    for human-readable data interchange, or  CSV , a file\n    that stores tabular data (numbers and text) in plain-text form and\n    that can be opened with almost any spreadsheet software, or  CKAN  web server, a powerful data management\n    system that makes data accessible \u2013by providing tools to streamline\n    publishing, sharing, finding and using data.   For exporting the data, all you have to do is to visit the following URL\nin your web-browser:  http://PYBOSSA-SERVER/project/slug/tasks/export  You will find a simple interface that will allow you to export the Tasks\nand Task Runs to  JSON  and CSV  formats:  | .. image::  http://i.imgur.com/m5gDyjU.png  :width: 100% |  The previous methods will export all the tasks and task runs,  even if\nthey are not completed . When a task has been completed, in other\nwords, when a task has collected the number of answers specified by the\ntask ( n_answers  = 30 by default), a  brown button  with the text Download results  will pop up, and if you click it all the answers\nfor the given task will be shown in JSON format.  You can check which tasks are completed, going to the project URL:  http://PYBOSSA-SERVER/project/slug  And clicking in the  Tasks  link in the  left local navigation , and\nthen click in the  Browse  box:  | .. image::  http://i.imgur.com/nauht7l.png  :width: 100% |  Then you will see which tasks are completed, and which ones you can\ndownload in  JSON  format:  | .. image::  http://i.imgur.com/pf5O5Tr.png  |  You could download the results also using the API. For example, you\ncould write a small script that gets the list of tasks that have been\ncompleted using this url:  GET http://PYBOSSA-SERVER/api/task?state=completed  \n\nIf your project has more than 20 tasks, then you will need to use the\n\n:   **offset** and **limit** parameters to get the next tasks, as by\n    default PYBOSSA API only returns the first 20 items.  Once you have obtained the list of completed tasks, your script could\nstart requesting the collected answers for the given tasks:  GET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID  \n\nIf your project is collecting more than 20 answers per task, then you\nwill need to use the **offset** and **limit** parameters to get the next\ntask runs, as by default PYBOSSA API only returns the first 20 items.\nThat way you will be able to get all the submitted answers by the\nvolunteers for the given task.", 
            "title": "Exporting the obtained results"
        }, 
        {
            "location": "/user/tutorial/#exporting-the-task-and-task-runs-in-json", 
            "text": "For the  JSON  format, you will get\nall the output as a file that your browser will download, named:\nshort_name_tasks.json for the tasks, and short_name_task_runs.json\nfor the task runs.", 
            "title": "Exporting the task and task runs in JSON"
        }, 
        {
            "location": "/user/tutorial/#exporting-the-task-and-task-runs-to-a-csv-file", 
            "text": "While for the  CSV \nformat, you will get a CSV file that will be automatically saved in your\ncomputer.", 
            "title": "Exporting the task and task runs to a CSV file"
        }, 
        {
            "location": "/user/tutorial/#exporting-the-task-and-task-runs-to-a-ckan-server", 
            "text": "If the server has been configured to allow you to export your\naplication s data to a CKAN server (see config-ckan), the owner of the\nproject will see another box that will give you the option to export the\ndata to the CKAN server.  In order to use this method you will need to add the CKAN API-KEY\nassociated with your account, otherwise you will not be able to export\nthe data and a warning message will let you know it.  Adding the CKAN API-KEY is really simple. You only need to create an\naccount in the supported CKAN server, check your profile and copy the\nAPI-KEY. Then, open your PYBOSSA account page, edit it and paste the key\nin the section  External Services .  | .. image::  http://i.imgur.com/xOezl6C.png  |  Then, you will be able to actually export the data to the CKAN server\nand host it there.", 
            "title": "Exporting the task and task runs to a CKAN server"
        }, 
        {
            "location": "/user/tutorial/#publishing-results-of-your-project", 
            "text": "Since v1.2.0, PYBOSSA automatically creates  empty  results when a task\nis completed.  For example, imagine your project is asking the following question in a\nset of images:  Do you see a triangle in this picture?  The possible\nanswers are: yes and no.  Your project has configured the task redundancy to 5, so 5 people will\nanswer that question for a given image (or task). When the 5th person\nsends the answer, the server marks the task as completed, and it creates\na result for the given task associating the answers, the task and the\nproject:  ``` {.sourceCode .js}\n{ id : 1,\n  project_id : 1,\n  task_id : 1,\n  task_run_ids : [1,2,3,4,5],\n  info : null}  \nAs in other PYBOSSA domain objects, a result has a JSON field named\n**info** that allows you to store the **final result** for that task\nusing the task\\_runs 1, 2, 3, 4, 5. Imagine that the five volunteers\nanswered: yes, then as you are the project owner you could update the\ninfo field with that value:\n\n``` {.sourceCode .js}\n{ id : 1,\n  project_id : 1,\n  task_id : 1,\n  task_run_ids : [1,2,3,4,5],\n  info : { triangle :  yes }}  The benefit of storing that information is that you can access these\ndata via the PYBOSSA API so you will be able to show the results, in\nyour result project section using the API.  This will allow you to build beautiful visualizations of your results on\nmaps, webgl, etc.  Right now this new feature is evolving, so please contact us if you need\nhelp. We ll provide result templates soon for our own basic templates.", 
            "title": "Publishing results of your project"
        }, 
        {
            "location": "/user/tutorial/#keeping-track-of-the-time-spent-by-volunteers", 
            "text": "Since v1.1.3, PYBOSSA records a timestamp, for every task run, of the\ninstant a volunteer requests a task to contribute to it. This is stored\nin the  created  attribute of the Task Runs.  This allows, together with the  finish_time  attribute, to know how\nmuch time the volunteer has spent completing the task: (time spent =\nfinish_time - created)", 
            "title": "Keeping track of the time spent by volunteers"
        }
    ]
}